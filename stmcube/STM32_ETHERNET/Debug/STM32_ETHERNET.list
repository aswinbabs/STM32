
STM32_ETHERNET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e160  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c28  0800e330  0800e330  0001e330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f58  08010f58  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  08010f58  08010f58  00020f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010f60  08010f60  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010f60  08010f60  00020f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010f64  08010f64  00020f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08010f68  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000090  08010ff8  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000130  08011098  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000b3a0  200001d0  08011138  000301d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000b570  08011138  0003b570  2**0
                  ALLOC
 13 .lwip_sec     00040530  2000bb70  2000bb70  0003bb70  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 15 .debug_info   00018342  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000478a  00000000  00000000  00048542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001170  00000000  00000000  0004ccd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 000010e0  00000000  00000000  0004de40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00030707  00000000  00000000  0004ef20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001effd  00000000  00000000  0007f627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f89b6  00000000  00000000  0009e624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  00196fda  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00004e24  00000000  00000000  0019702c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e318 	.word	0x0800e318

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d4 	.word	0x200001d4
 800020c:	0800e318 	.word	0x0800e318

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 fb1f 	bl	8000bfa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f80c 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 f872 	bl	80006a8 <MX_GPIO_Init>
  MX_LWIP_Init();
 80005c4:	f002 fbec 	bl	8002da0 <MX_LWIP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 80005c8:	4802      	ldr	r0, [pc, #8]	; (80005d4 <main+0x20>)
 80005ca:	f002 fe85 	bl	80032d8 <ethernetif_input>
	  sys_check_timeouts();
 80005ce:	f00a f947 	bl	800a860 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 80005d2:	e7f9      	b.n	80005c8 <main+0x14>
 80005d4:	200001f4 	.word	0x200001f4

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2230      	movs	r2, #48	; 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f00c fe3e 	bl	800d268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <SystemClock_Config+0xc8>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a27      	ldr	r2, [pc, #156]	; (80006a0 <SystemClock_Config+0xc8>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <SystemClock_Config+0xc8>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000614:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <SystemClock_Config+0xcc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800061c:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <SystemClock_Config+0xcc>)
 800061e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <SystemClock_Config+0xcc>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000638:	2310      	movs	r3, #16
 800063a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063c:	2302      	movs	r3, #2
 800063e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000644:	2308      	movs	r3, #8
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000648:	2332      	movs	r3, #50	; 0x32
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000650:	2302      	movs	r3, #2
 8000652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f001 ff3f 	bl	80024dc <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000664:	f000 f85c 	bl	8000720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066c:	2302      	movs	r3, #2
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000674:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000678:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2101      	movs	r1, #1
 8000686:	4618      	mov	r0, r3
 8000688:	f002 f9cc 	bl	8002a24 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000692:	f000 f845 	bl	8000720 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3750      	adds	r7, #80	; 0x50
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ae:	4b1b      	ldr	r3, [pc, #108]	; (800071c <MX_GPIO_Init+0x74>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a1a      	ldr	r2, [pc, #104]	; (800071c <MX_GPIO_Init+0x74>)
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <MX_GPIO_Init+0x74>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0304 	and.w	r3, r3, #4
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <MX_GPIO_Init+0x74>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a14      	ldr	r2, [pc, #80]	; (800071c <MX_GPIO_Init+0x74>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_GPIO_Init+0x74>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_GPIO_Init+0x74>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a0e      	ldr	r2, [pc, #56]	; (800071c <MX_GPIO_Init+0x74>)
 80006e4:	f043 0302 	orr.w	r3, r3, #2
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_GPIO_Init+0x74>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0302 	and.w	r3, r3, #2
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_GPIO_Init+0x74>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a08      	ldr	r2, [pc, #32]	; (800071c <MX_GPIO_Init+0x74>)
 80006fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_GPIO_Init+0x74>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]

}
 800070e:	bf00      	nop
 8000710:	3714      	adds	r7, #20
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000724:	b672      	cpsid	i
}
 8000726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000728:	e7fe      	b.n	8000728 <Error_Handler+0x8>
	...

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <HAL_MspInit+0x50>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000736:	4a11      	ldr	r2, [pc, #68]	; (800077c <HAL_MspInit+0x50>)
 8000738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073c:	6413      	str	r3, [r2, #64]	; 0x40
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <HAL_MspInit+0x50>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <HAL_MspInit+0x50>)
 800074c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074e:	4a0b      	ldr	r2, [pc, #44]	; (800077c <HAL_MspInit+0x50>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6453      	str	r3, [r2, #68]	; 0x44
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <HAL_MspInit+0x50>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	2005      	movs	r0, #5
 8000768:	f000 fba3 	bl	8000eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800076c:	2005      	movs	r0, #5
 800076e:	f000 fbbc 	bl	8000eea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800

08000780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <NMI_Handler+0x4>

08000786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <HardFault_Handler+0x4>

0800078c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <MemManage_Handler+0x4>

08000792 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <BusFault_Handler+0x4>

08000798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <UsageFault_Handler+0x4>

0800079e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007cc:	f000 fa52 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
	return 1;
 80007e6:	2301      	movs	r3, #1
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
	...

080007f4 <_kill>:

int _kill(int pid, int sig)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <_kill+0x20>)
 8000800:	2216      	movs	r2, #22
 8000802:	601a      	str	r2, [r3, #0]
	return -1;
 8000804:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000808:	4618      	mov	r0, r3
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	2000b560 	.word	0x2000b560

08000818 <_exit>:

void _exit (int status)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000820:	f04f 31ff 	mov.w	r1, #4294967295
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f7ff ffe5 	bl	80007f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 800082a:	e7fe      	b.n	800082a <_exit+0x12>

0800082c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	e00a      	b.n	8000854 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800083e:	f3af 8000 	nop.w
 8000842:	4601      	mov	r1, r0
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	1c5a      	adds	r2, r3, #1
 8000848:	60ba      	str	r2, [r7, #8]
 800084a:	b2ca      	uxtb	r2, r1
 800084c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	3301      	adds	r3, #1
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697a      	ldr	r2, [r7, #20]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	429a      	cmp	r2, r3
 800085a:	dbf0      	blt.n	800083e <_read+0x12>
	}

return len;
 800085c:	687b      	ldr	r3, [r7, #4]
}
 800085e:	4618      	mov	r0, r3
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b086      	sub	sp, #24
 800086a:	af00      	add	r7, sp, #0
 800086c:	60f8      	str	r0, [r7, #12]
 800086e:	60b9      	str	r1, [r7, #8]
 8000870:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
 8000876:	e009      	b.n	800088c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	1c5a      	adds	r2, r3, #1
 800087c:	60ba      	str	r2, [r7, #8]
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4618      	mov	r0, r3
 8000882:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	3301      	adds	r3, #1
 800088a:	617b      	str	r3, [r7, #20]
 800088c:	697a      	ldr	r2, [r7, #20]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	429a      	cmp	r2, r3
 8000892:	dbf1      	blt.n	8000878 <_write+0x12>
	}
	return len;
 8000894:	687b      	ldr	r3, [r7, #4]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <_close>:

int _close(int file)
{
 800089e:	b480      	push	{r7}
 80008a0:	b083      	sub	sp, #12
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
	return -1;
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008b6:	b480      	push	{r7}
 80008b8:	b083      	sub	sp, #12
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
 80008be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008c6:	605a      	str	r2, [r3, #4]
	return 0;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <_isatty>:

int _isatty(int file)
{
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
	return 1;
 80008de:	2301      	movs	r3, #1
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
	return 0;
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3714      	adds	r7, #20
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
	...

08000908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000908:	b480      	push	{r7}
 800090a:	b087      	sub	sp, #28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000910:	4a14      	ldr	r2, [pc, #80]	; (8000964 <_sbrk+0x5c>)
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <_sbrk+0x60>)
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <_sbrk+0x64>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d102      	bne.n	800092a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <_sbrk+0x64>)
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <_sbrk+0x68>)
 8000928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <_sbrk+0x64>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	429a      	cmp	r2, r3
 8000936:	d205      	bcs.n	8000944 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000938:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <_sbrk+0x6c>)
 800093a:	220c      	movs	r2, #12
 800093c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800093e:	f04f 33ff 	mov.w	r3, #4294967295
 8000942:	e009      	b.n	8000958 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <_sbrk+0x64>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <_sbrk+0x64>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	4a06      	ldr	r2, [pc, #24]	; (800096c <_sbrk+0x64>)
 8000954:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000956:	68fb      	ldr	r3, [r7, #12]
}
 8000958:	4618      	mov	r0, r3
 800095a:	371c      	adds	r7, #28
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	20050000 	.word	0x20050000
 8000968:	00000400 	.word	0x00000400
 800096c:	200001ec 	.word	0x200001ec
 8000970:	2000b570 	.word	0x2000b570
 8000974:	2000b560 	.word	0x2000b560

08000978 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <SystemInit+0x20>)
 800097e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000982:	4a05      	ldr	r2, [pc, #20]	; (8000998 <SystemInit+0x20>)
 8000984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800099c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009a0:	f7ff ffea 	bl	8000978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009a4:	480c      	ldr	r0, [pc, #48]	; (80009d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009a6:	490d      	ldr	r1, [pc, #52]	; (80009dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009a8:	4a0d      	ldr	r2, [pc, #52]	; (80009e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ac:	e002      	b.n	80009b4 <LoopCopyDataInit>

080009ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b2:	3304      	adds	r3, #4

080009b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b8:	d3f9      	bcc.n	80009ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ba:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009bc:	4c0a      	ldr	r4, [pc, #40]	; (80009e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c0:	e001      	b.n	80009c6 <LoopFillZerobss>

080009c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c4:	3204      	adds	r2, #4

080009c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c8:	d3fb      	bcc.n	80009c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009ca:	f00c fc0b 	bl	800d1e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ce:	f7ff fdf1 	bl	80005b4 <main>
  bx  lr    
 80009d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009d4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80009d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009dc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80009e0:	08010f68 	.word	0x08010f68
  ldr r2, =_sbss
 80009e4:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80009e8:	2000b570 	.word	0x2000b570

080009ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009ec:	e7fe      	b.n	80009ec <ADC_IRQHandler>

080009ee <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b083      	sub	sp, #12
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
 80009f6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d00b      	beq.n	8000a16 <LAN8742_RegisterBusIO+0x28>
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	68db      	ldr	r3, [r3, #12]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d007      	beq.n	8000a16 <LAN8742_RegisterBusIO+0x28>
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	689b      	ldr	r3, [r3, #8]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d003      	beq.n	8000a16 <LAN8742_RegisterBusIO+0x28>
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	691b      	ldr	r3, [r3, #16]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d102      	bne.n	8000a1c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	e014      	b.n	8000a46 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685a      	ldr	r2, [r3, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	68da      	ldr	r2, [r3, #12]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	689a      	ldr	r2, [r3, #8]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	691a      	ldr	r2, [r3, #16]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b086      	sub	sp, #24
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d139      	bne.n	8000ae2 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d002      	beq.n	8000a7c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2220      	movs	r2, #32
 8000a80:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
 8000a86:	e01c      	b.n	8000ac2 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	695b      	ldr	r3, [r3, #20]
 8000a8c:	f107 020c 	add.w	r2, r7, #12
 8000a90:	2112      	movs	r1, #18
 8000a92:	6978      	ldr	r0, [r7, #20]
 8000a94:	4798      	blx	r3
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	da03      	bge.n	8000aa4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000a9c:	f06f 0304 	mvn.w	r3, #4
 8000aa0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000aa2:	e00b      	b.n	8000abc <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f003 031f 	and.w	r3, r3, #31
 8000aaa:	697a      	ldr	r2, [r7, #20]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d105      	bne.n	8000abc <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
         break;
 8000aba:	e005      	b.n	8000ac8 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	617b      	str	r3, [r7, #20]
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	2b1f      	cmp	r3, #31
 8000ac6:	d9df      	bls.n	8000a88 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b1f      	cmp	r3, #31
 8000ace:	d902      	bls.n	8000ad6 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000ad0:	f06f 0302 	mvn.w	r3, #2
 8000ad4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2201      	movs	r2, #1
 8000ae0:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000ae2:	693b      	ldr	r3, [r7, #16]
 }
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3718      	adds	r7, #24
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	695b      	ldr	r3, [r3, #20]
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	6810      	ldr	r0, [r2, #0]
 8000b00:	f107 020c 	add.w	r2, r7, #12
 8000b04:	2101      	movs	r1, #1
 8000b06:	4798      	blx	r3
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	da02      	bge.n	8000b14 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000b0e:	f06f 0304 	mvn.w	r3, #4
 8000b12:	e06e      	b.n	8000bf2 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	695b      	ldr	r3, [r3, #20]
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	6810      	ldr	r0, [r2, #0]
 8000b1c:	f107 020c 	add.w	r2, r7, #12
 8000b20:	2101      	movs	r1, #1
 8000b22:	4798      	blx	r3
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	da02      	bge.n	8000b30 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000b2a:	f06f 0304 	mvn.w	r3, #4
 8000b2e:	e060      	b.n	8000bf2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d101      	bne.n	8000b3e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e059      	b.n	8000bf2 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	6810      	ldr	r0, [r2, #0]
 8000b46:	f107 020c 	add.w	r2, r7, #12
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4798      	blx	r3
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	da02      	bge.n	8000b5a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000b54:	f06f 0304 	mvn.w	r3, #4
 8000b58:	e04b      	b.n	8000bf2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d11b      	bne.n	8000b9c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d006      	beq.n	8000b7c <LAN8742_GetLinkState+0x90>
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	e03a      	b.n	8000bf2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000b86:	2303      	movs	r3, #3
 8000b88:	e033      	b.n	8000bf2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000b94:	2304      	movs	r3, #4
 8000b96:	e02c      	b.n	8000bf2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000b98:	2305      	movs	r3, #5
 8000b9a:	e02a      	b.n	8000bf2 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	6810      	ldr	r0, [r2, #0]
 8000ba4:	f107 020c 	add.w	r2, r7, #12
 8000ba8:	211f      	movs	r1, #31
 8000baa:	4798      	blx	r3
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	da02      	bge.n	8000bb8 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000bb2:	f06f 0304 	mvn.w	r3, #4
 8000bb6:	e01c      	b.n	8000bf2 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d101      	bne.n	8000bc6 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000bc2:	2306      	movs	r3, #6
 8000bc4:	e015      	b.n	8000bf2 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	f003 031c 	and.w	r3, r3, #28
 8000bcc:	2b18      	cmp	r3, #24
 8000bce:	d101      	bne.n	8000bd4 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	e00e      	b.n	8000bf2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f003 031c 	and.w	r3, r3, #28
 8000bda:	2b08      	cmp	r3, #8
 8000bdc:	d101      	bne.n	8000be2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000bde:	2303      	movs	r3, #3
 8000be0:	e007      	b.n	8000bf2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f003 031c 	and.w	r3, r3, #28
 8000be8:	2b14      	cmp	r3, #20
 8000bea:	d101      	bne.n	8000bf0 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000bec:	2304      	movs	r3, #4
 8000bee:	e000      	b.n	8000bf2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000bf0:	2305      	movs	r3, #5
    }
  }
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfe:	2003      	movs	r0, #3
 8000c00:	f000 f94c 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c04:	200f      	movs	r0, #15
 8000c06:	f000 f805 	bl	8000c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c0a:	f7ff fd8f 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_InitTick+0x54>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <HAL_InitTick+0x58>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f967 	bl	8000f06 <HAL_SYSTICK_Config>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00e      	b.n	8000c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b0f      	cmp	r3, #15
 8000c46:	d80a      	bhi.n	8000c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	f000 f92f 	bl	8000eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c54:	4a06      	ldr	r2, [pc, #24]	; (8000c70 <HAL_InitTick+0x5c>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e000      	b.n	8000c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000004 	.word	0x20000004

08000c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x20>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_IncTick+0x24>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_IncTick+0x24>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000008 	.word	0x20000008
 8000c98:	200001f0 	.word	0x200001f0

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <HAL_GetTick+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	200001f0 	.word	0x200001f0

08000cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cbc:	f7ff ffee 	bl	8000c9c <HAL_GetTick>
 8000cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ccc:	d005      	beq.n	8000cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cce:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <HAL_Delay+0x44>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cda:	bf00      	nop
 8000cdc:	f7ff ffde 	bl	8000c9c <HAL_GetTick>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d8f7      	bhi.n	8000cdc <HAL_Delay+0x28>
  {
  }
}
 8000cec:	bf00      	nop
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008

08000cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <__NVIC_SetPriorityGrouping+0x40>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	4313      	orrs	r3, r2
 8000d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <__NVIC_SetPriorityGrouping+0x40>)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	60d3      	str	r3, [r2, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00
 8000d40:	05fa0000 	.word	0x05fa0000

08000d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <__NVIC_GetPriorityGrouping+0x18>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	f003 0307 	and.w	r3, r3, #7
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	db0b      	blt.n	8000d8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	f003 021f 	and.w	r2, r3, #31
 8000d78:	4907      	ldr	r1, [pc, #28]	; (8000d98 <__NVIC_EnableIRQ+0x38>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	095b      	lsrs	r3, r3, #5
 8000d80:	2001      	movs	r0, #1
 8000d82:	fa00 f202 	lsl.w	r2, r0, r2
 8000d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000e100 	.word	0xe000e100

08000d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	db0a      	blt.n	8000dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	490c      	ldr	r1, [pc, #48]	; (8000de8 <__NVIC_SetPriority+0x4c>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	0112      	lsls	r2, r2, #4
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc4:	e00a      	b.n	8000ddc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4908      	ldr	r1, [pc, #32]	; (8000dec <__NVIC_SetPriority+0x50>)
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	3b04      	subs	r3, #4
 8000dd4:	0112      	lsls	r2, r2, #4
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	440b      	add	r3, r1
 8000dda:	761a      	strb	r2, [r3, #24]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f1c3 0307 	rsb	r3, r3, #7
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	bf28      	it	cs
 8000e0e:	2304      	movcs	r3, #4
 8000e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3304      	adds	r3, #4
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d902      	bls.n	8000e20 <NVIC_EncodePriority+0x30>
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3b03      	subs	r3, #3
 8000e1e:	e000      	b.n	8000e22 <NVIC_EncodePriority+0x32>
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	f04f 32ff 	mov.w	r2, #4294967295
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	43d9      	mvns	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	4313      	orrs	r3, r2
         );
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3724      	adds	r7, #36	; 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e68:	d301      	bcc.n	8000e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00f      	b.n	8000e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <SysTick_Config+0x40>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e76:	210f      	movs	r1, #15
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f7ff ff8e 	bl	8000d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <SysTick_Config+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <SysTick_Config+0x40>)
 8000e88:	2207      	movs	r2, #7
 8000e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	e000e010 	.word	0xe000e010

08000e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff29 	bl	8000cfc <__NVIC_SetPriorityGrouping>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec4:	f7ff ff3e 	bl	8000d44 <__NVIC_GetPriorityGrouping>
 8000ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	6978      	ldr	r0, [r7, #20]
 8000ed0:	f7ff ff8e 	bl	8000df0 <NVIC_EncodePriority>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff5d 	bl	8000d9c <__NVIC_SetPriority>
}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff31 	bl	8000d60 <__NVIC_EnableIRQ>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ffa2 	bl	8000e58 <SysTick_Config>
 8000f14:	4603      	mov	r3, r0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e086      	b.n	8001040 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d106      	bne.n	8000f4a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2223      	movs	r2, #35	; 0x23
 8000f40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f002 fa37 	bl	80033b8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	4b3f      	ldr	r3, [pc, #252]	; (8001048 <HAL_ETH_Init+0x128>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	4a3e      	ldr	r2, [pc, #248]	; (8001048 <HAL_ETH_Init+0x128>)
 8000f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f54:	6453      	str	r3, [r2, #68]	; 0x44
 8000f56:	4b3c      	ldr	r3, [pc, #240]	; (8001048 <HAL_ETH_Init+0x128>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000f62:	4b3a      	ldr	r3, [pc, #232]	; (800104c <HAL_ETH_Init+0x12c>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	4a39      	ldr	r2, [pc, #228]	; (800104c <HAL_ETH_Init+0x12c>)
 8000f68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000f6c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000f6e:	4b37      	ldr	r3, [pc, #220]	; (800104c <HAL_ETH_Init+0x12c>)
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	4935      	ldr	r1, [pc, #212]	; (800104c <HAL_ETH_Init+0x12c>)
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8000f7c:	4b33      	ldr	r3, [pc, #204]	; (800104c <HAL_ETH_Init+0x12c>)
 8000f7e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	6812      	ldr	r2, [r2, #0]
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000f96:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f98:	f7ff fe80 	bl	8000c9c <HAL_GetTick>
 8000f9c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8000f9e:	e011      	b.n	8000fc4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8000fa0:	f7ff fe7c 	bl	8000c9c <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fae:	d909      	bls.n	8000fc4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	22e0      	movs	r2, #224	; 0xe0
 8000fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e03d      	b.n	8001040 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1e4      	bne.n	8000fa0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 fe18 	bl	8001c0c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 fec3 	bl	8001d68 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 ff19 	bl	8001e1a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	461a      	mov	r2, r3
 8000fee:	2100      	movs	r1, #0
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 fe81 	bl	8001cf8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001004:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <HAL_ETH_Init+0x130>)
 8001014:	430b      	orrs	r3, r1
 8001016:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 800102a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2210      	movs	r2, #16
 800103a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40023800 	.word	0x40023800
 800104c:	40013800 	.word	0x40013800
 8001050:	00020060 	.word	0x00020060

08001054 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001062:	2b10      	cmp	r3, #16
 8001064:	d150      	bne.n	8001108 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2223      	movs	r2, #35	; 0x23
 800106a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2204      	movs	r2, #4
 8001072:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f000 f9f9 	bl	800146c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f042 0208 	orr.w	r2, r2, #8
 8001088:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001092:	2001      	movs	r0, #1
 8001094:	f7ff fe0e 	bl	8000cb4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f042 0204 	orr.w	r2, r2, #4
 80010ae:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80010b8:	2001      	movs	r0, #1
 80010ba:	f7ff fdfb 	bl	8000cb4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 fc3c 	bl	8001944 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	6812      	ldr	r2, [r2, #0]
 80010da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80010e2:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	6812      	ldr	r2, [r2, #0]
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80010fa:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2223      	movs	r2, #35	; 0x23
 8001100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	e000      	b.n	800110a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
  }
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001120:	2b23      	cmp	r3, #35	; 0x23
 8001122:	d14a      	bne.n	80011ba <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2223      	movs	r2, #35	; 0x23
 8001128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	6812      	ldr	r2, [r2, #0]
 800113a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800113e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001142:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	6812      	ldr	r2, [r2, #0]
 8001152:	f023 0302 	bic.w	r3, r3, #2
 8001156:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800115a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 0204 	bic.w	r2, r2, #4
 800116a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001174:	2001      	movs	r0, #1
 8001176:	f7ff fd9d 	bl	8000cb4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f000 fbde 	bl	8001944 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 0208 	bic.w	r2, r2, #8
 8001196:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80011a0:	2001      	movs	r0, #1
 80011a2:	f7ff fd87 	bl	8000cb4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2210      	movs	r2, #16
 80011b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e000      	b.n	80011bc <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
  }
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d109      	bne.n	80011ea <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011dc:	f043 0201 	orr.w	r2, r3, #1
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e07c      	b.n	80012e4 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011f0:	2b23      	cmp	r3, #35	; 0x23
 80011f2:	d176      	bne.n	80012e2 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80011f4:	2200      	movs	r2, #0
 80011f6:	68b9      	ldr	r1, [r7, #8]
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	f000 fe7d 	bl	8001ef8 <ETH_Prepare_Tx_Descriptors>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d009      	beq.n	8001218 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800120a:	f043 0202 	orr.w	r2, r3, #2
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e065      	b.n	80012e4 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001218:	f3bf 8f4f 	dsb	sy
}
 800121c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	3206      	adds	r2, #6
 8001226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800122a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	629a      	str	r2, [r3, #40]	; 0x28
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123a:	2b03      	cmp	r3, #3
 800123c:	d904      	bls.n	8001248 <HAL_ETH_Transmit+0x84>
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001242:	1f1a      	subs	r2, r3, #4
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	3106      	adds	r1, #6
 8001254:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001258:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800125c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800125e:	f7ff fd1d 	bl	8000c9c <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001264:	e037      	b.n	80012d6 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d011      	beq.n	800129c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800127e:	f043 0208 	orr.w	r2, r3, #8
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001290:	695a      	ldr	r2, [r3, #20]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e023      	b.n	80012e4 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a2:	d018      	beq.n	80012d6 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80012a4:	f7ff fcfa 	bl	8000c9c <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d302      	bcc.n	80012ba <HAL_ETH_Transmit+0xf6>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10d      	bne.n	80012d6 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012c0:	f043 0204 	orr.w	r2, r3, #4
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80012d0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e006      	b.n	80012e4 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	dbc3      	blt.n	8001266 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	e000      	b.n	80012e4 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
  }
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d109      	bne.n	8001318 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800130a:	f043 0201 	orr.w	r2, r3, #1
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e0a4      	b.n	8001462 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800131e:	2b23      	cmp	r3, #35	; 0x23
 8001320:	d001      	beq.n	8001326 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e09d      	b.n	8001462 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69fa      	ldr	r2, [r7, #28]
 8001330:	3212      	adds	r2, #18
 8001332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001336:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800133c:	f1c3 0304 	rsb	r3, r3, #4
 8001340:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001342:	e066      	b.n	8001412 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134c:	2b00      	cmp	r3, #0
 800134e:	d007      	beq.n	8001360 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	69da      	ldr	r2, [r3, #28]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	699a      	ldr	r2, [r3, #24]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001368:	2b00      	cmp	r3, #0
 800136a:	d103      	bne.n	8001374 <HAL_ETH_ReadData+0x88>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001370:	2b00      	cmp	r3, #0
 8001372:	d03c      	beq.n	80013ee <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800137c:	2b00      	cmp	r3, #0
 800137e:	d005      	beq.n	800138c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	0c1b      	lsrs	r3, r3, #16
 8001392:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001396:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d005      	beq.n	80013b0 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80013ac:	2301      	movs	r3, #1
 80013ae:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80013c8:	461a      	mov	r2, r3
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	f002 f9b5 	bl	800373c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	441a      	add	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	2200      	movs	r2, #0
 80013ec:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3301      	adds	r3, #1
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	d902      	bls.n	8001400 <HAL_ETH_ReadData+0x114>
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3b04      	subs	r3, #4
 80013fe:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69fa      	ldr	r2, [r7, #28]
 8001404:	3212      	adds	r2, #18
 8001406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800140a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3301      	adds	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	db06      	blt.n	8001428 <HAL_ETH_ReadData+0x13c>
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	429a      	cmp	r2, r3
 8001420:	d202      	bcs.n	8001428 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8001422:	7cfb      	ldrb	r3, [r7, #19]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d08d      	beq.n	8001344 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	441a      	add	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001438:	2b00      	cmp	r3, #0
 800143a:	d002      	beq.n	8001442 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 f815 	bl	800146c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69fa      	ldr	r2, [r7, #28]
 8001446:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001448:	7cfb      	ldrb	r3, [r7, #19]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d108      	bne.n	8001460 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800145c:	2300      	movs	r3, #0
 800145e:	e000      	b.n	8001462 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
}
 8001462:	4618      	mov	r0, r3
 8001464:	3720      	adds	r7, #32
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001478:	2301      	movs	r3, #1
 800147a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001480:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69fa      	ldr	r2, [r7, #28]
 8001486:	3212      	adds	r2, #18
 8001488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800148c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001492:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001494:	e042      	b.n	800151c <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d112      	bne.n	80014c4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800149e:	f107 0308 	add.w	r3, r7, #8
 80014a2:	4618      	mov	r0, r3
 80014a4:	f002 f91a 	bl	80036dc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	74fb      	strb	r3, [r7, #19]
 80014b2:	e007      	b.n	80014c4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	461a      	mov	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	461a      	mov	r2, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80014c4:	7cfb      	ldrb	r3, [r7, #19]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d028      	beq.n	800151c <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d106      	bne.n	80014e0 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	695a      	ldr	r2, [r3, #20]
 80014d6:	4b26      	ldr	r3, [pc, #152]	; (8001570 <ETH_UpdateDescriptor+0x104>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	6053      	str	r3, [r2, #4]
 80014de:	e005      	b.n	80014ec <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	3301      	adds	r3, #1
 80014fc:	61fb      	str	r3, [r7, #28]
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	2b03      	cmp	r3, #3
 8001502:	d902      	bls.n	800150a <ETH_UpdateDescriptor+0x9e>
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	3b04      	subs	r3, #4
 8001508:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69fa      	ldr	r2, [r7, #28]
 800150e:	3212      	adds	r2, #18
 8001510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001514:	617b      	str	r3, [r7, #20]
      desccount--;
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	3b01      	subs	r3, #1
 800151a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d002      	beq.n	8001528 <ETH_UpdateDescriptor+0xbc>
 8001522:	7cfb      	ldrb	r3, [r7, #19]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1b6      	bne.n	8001496 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	429a      	cmp	r2, r3
 8001530:	d01a      	beq.n	8001568 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3301      	adds	r3, #1
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800153c:	f3bf 8f5f 	dmb	sy
}
 8001540:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6919      	ldr	r1, [r3, #16]
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	18ca      	adds	r2, r1, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800155a:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69fa      	ldr	r2, [r7, #28]
 8001560:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001568:	bf00      	nop
 800156a:	3720      	adds	r7, #32
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	80004000 	.word	0x80004000

08001574 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
 8001580:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	f003 031c 	and.w	r3, r3, #28
 8001590:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	02db      	lsls	r3, r3, #11
 8001596:	b29b      	uxth	r3, r3
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	4313      	orrs	r3, r2
 800159c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	019b      	lsls	r3, r3, #6
 80015a2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	f023 0302 	bic.w	r3, r3, #2
 80015b2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80015c4:	f7ff fb6a 	bl	8000c9c <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80015ca:	e00d      	b.n	80015e8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80015cc:	f7ff fb66 	bl	8000c9c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015da:	d301      	bcc.n	80015e0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e010      	b.n	8001602 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1ec      	bne.n	80015cc <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	461a      	mov	r2, r3
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b086      	sub	sp, #24
 800160e:	af00      	add	r7, sp, #0
 8001610:	60f8      	str	r0, [r7, #12]
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
 8001616:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	f003 031c 	and.w	r3, r3, #28
 8001626:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	02db      	lsls	r3, r3, #11
 800162c:	b29b      	uxth	r3, r3
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	4313      	orrs	r3, r2
 8001632:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	019b      	lsls	r3, r3, #6
 8001638:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	4313      	orrs	r3, r2
 8001640:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	b29a      	uxth	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001664:	f7ff fb1a 	bl	8000c9c <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800166a:	e00d      	b.n	8001688 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800166c:	f7ff fb16 	bl	8000c9c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800167a:	d301      	bcc.n	8001680 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e009      	b.n	8001694 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1ec      	bne.n	800166c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e0e6      	b.n	800187e <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0310 	and.w	r3, r3, #16
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	bf14      	ite	ne
 80016be:	2301      	movne	r3, #1
 80016c0:	2300      	moveq	r3, #0
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bf0c      	ite	eq
 80016e8:	2301      	moveq	r3, #1
 80016ea:	2300      	movne	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	461a      	mov	r2, r3
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001700:	2b00      	cmp	r3, #0
 8001702:	bf14      	ite	ne
 8001704:	2301      	movne	r3, #1
 8001706:	2300      	moveq	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800171a:	2b00      	cmp	r3, #0
 800171c:	bf0c      	ite	eq
 800171e:	2301      	moveq	r3, #1
 8001720:	2300      	movne	r3, #0
 8001722:	b2db      	uxtb	r3, r3
 8001724:	461a      	mov	r2, r3
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001734:	2b00      	cmp	r3, #0
 8001736:	bf14      	ite	ne
 8001738:	2301      	movne	r3, #1
 800173a:	2300      	moveq	r3, #0
 800173c:	b2db      	uxtb	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176a:	2b00      	cmp	r3, #0
 800176c:	bf0c      	ite	eq
 800176e:	2301      	moveq	r3, #1
 8001770:	2300      	movne	r3, #0
 8001772:	b2db      	uxtb	r3, r3
 8001774:	461a      	mov	r2, r3
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001784:	2b00      	cmp	r3, #0
 8001786:	bf0c      	ite	eq
 8001788:	2301      	moveq	r3, #1
 800178a:	2300      	movne	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	461a      	mov	r2, r3
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800179e:	2b00      	cmp	r3, #0
 80017a0:	bf14      	ite	ne
 80017a2:	2301      	movne	r3, #1
 80017a4:	2300      	moveq	r3, #0
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	461a      	mov	r2, r3
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	bf14      	ite	ne
 80017ca:	2301      	movne	r3, #1
 80017cc:	2300      	moveq	r3, #0
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	bf14      	ite	ne
 80017e4:	2301      	movne	r3, #1
 80017e6:	2300      	moveq	r3, #0
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	461a      	mov	r2, r3
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	bf14      	ite	ne
 80017fe:	2301      	movne	r3, #1
 8001800:	2300      	moveq	r3, #0
 8001802:	b2db      	uxtb	r3, r3
 8001804:	461a      	mov	r2, r3
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001816:	2b00      	cmp	r3, #0
 8001818:	bf0c      	ite	eq
 800181a:	2301      	moveq	r3, #1
 800181c:	2300      	movne	r3, #0
 800181e:	b2db      	uxtb	r3, r3
 8001820:	461a      	mov	r2, r3
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	0c1b      	lsrs	r3, r3, #16
 800183e:	b29a      	uxth	r2, r3
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	f003 0304 	and.w	r3, r3, #4
 800184e:	2b00      	cmp	r3, #0
 8001850:	bf14      	ite	ne
 8001852:	2301      	movne	r3, #1
 8001854:	2300      	moveq	r3, #0
 8001856:	b2db      	uxtb	r3, r3
 8001858:	461a      	mov	r2, r3
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800186a:	2b00      	cmp	r3, #0
 800186c:	bf14      	ite	ne
 800186e:	2301      	movne	r3, #1
 8001870:	2300      	moveq	r3, #0
 8001872:	b2db      	uxtb	r3, r3
 8001874:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e00b      	b.n	80018b6 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018a4:	2b10      	cmp	r3, #16
 80018a6:	d105      	bne.n	80018b4 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80018a8:	6839      	ldr	r1, [r7, #0]
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 f870 	bl	8001990 <ETH_SetMACConfig>

    return HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	e000      	b.n	80018b6 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
  }
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f023 031c 	bic.w	r3, r3, #28
 80018d6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80018d8:	f001 fa56 	bl	8002d88 <HAL_RCC_GetHCLKFreq>
 80018dc:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	4a14      	ldr	r2, [pc, #80]	; (8001934 <HAL_ETH_SetMDIOClockRange+0x74>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d804      	bhi.n	80018f0 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f043 0308 	orr.w	r3, r3, #8
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	e019      	b.n	8001924 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	4a11      	ldr	r2, [pc, #68]	; (8001938 <HAL_ETH_SetMDIOClockRange+0x78>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d204      	bcs.n	8001902 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f043 030c 	orr.w	r3, r3, #12
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	e010      	b.n	8001924 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	4a0d      	ldr	r2, [pc, #52]	; (800193c <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d90c      	bls.n	8001924 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	4a0c      	ldr	r2, [pc, #48]	; (8001940 <HAL_ETH_SetMDIOClockRange+0x80>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d804      	bhi.n	800191c <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	e003      	b.n	8001924 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f043 0310 	orr.w	r3, r3, #16
 8001922:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	611a      	str	r2, [r3, #16]
}
 800192c:	bf00      	nop
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	02160ebf 	.word	0x02160ebf
 8001938:	03938700 	.word	0x03938700
 800193c:	05f5e0ff 	.word	0x05f5e0ff
 8001940:	08f0d17f 	.word	0x08f0d17f

08001944 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6812      	ldr	r2, [r2, #0]
 800195e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001962:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001966:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001974:	2001      	movs	r0, #1
 8001976:	f7ff f99d 	bl	8000cb4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001984:	6193      	str	r3, [r2, #24]
}
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	4b53      	ldr	r3, [pc, #332]	; (8001af4 <ETH_SetMACConfig+0x164>)
 80019a6:	4013      	ands	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	7b9b      	ldrb	r3, [r3, #14]
 80019ae:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	7c12      	ldrb	r2, [r2, #16]
 80019b4:	2a00      	cmp	r2, #0
 80019b6:	d102      	bne.n	80019be <ETH_SetMACConfig+0x2e>
 80019b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80019bc:	e000      	b.n	80019c0 <ETH_SetMACConfig+0x30>
 80019be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80019c0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	7c52      	ldrb	r2, [r2, #17]
 80019c6:	2a00      	cmp	r2, #0
 80019c8:	d102      	bne.n	80019d0 <ETH_SetMACConfig+0x40>
 80019ca:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80019ce:	e000      	b.n	80019d2 <ETH_SetMACConfig+0x42>
 80019d0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80019d2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80019d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	7fdb      	ldrb	r3, [r3, #31]
 80019de:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80019e0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80019e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	7f92      	ldrb	r2, [r2, #30]
 80019ec:	2a00      	cmp	r2, #0
 80019ee:	d102      	bne.n	80019f6 <ETH_SetMACConfig+0x66>
 80019f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019f4:	e000      	b.n	80019f8 <ETH_SetMACConfig+0x68>
 80019f6:	2200      	movs	r2, #0
                        macconf->Speed |
 80019f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	7f1b      	ldrb	r3, [r3, #28]
 80019fe:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001a00:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001a06:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	791b      	ldrb	r3, [r3, #4]
 8001a0c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001a0e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001a16:	2a00      	cmp	r2, #0
 8001a18:	d102      	bne.n	8001a20 <ETH_SetMACConfig+0x90>
 8001a1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a1e:	e000      	b.n	8001a22 <ETH_SetMACConfig+0x92>
 8001a20:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001a22:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	7bdb      	ldrb	r3, [r3, #15]
 8001a28:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001a2a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001a30:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a38:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a52:	2001      	movs	r0, #1
 8001a54:	f7ff f92e 	bl	8000cb4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001a6e:	4013      	ands	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a76:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001a7e:	2a00      	cmp	r2, #0
 8001a80:	d101      	bne.n	8001a86 <ETH_SetMACConfig+0xf6>
 8001a82:	2280      	movs	r2, #128	; 0x80
 8001a84:	e000      	b.n	8001a88 <ETH_SetMACConfig+0xf8>
 8001a86:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a88:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001a8e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001a96:	2a01      	cmp	r2, #1
 8001a98:	d101      	bne.n	8001a9e <ETH_SetMACConfig+0x10e>
 8001a9a:	2208      	movs	r2, #8
 8001a9c:	e000      	b.n	8001aa0 <ETH_SetMACConfig+0x110>
 8001a9e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001aa0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001aa8:	2a01      	cmp	r2, #1
 8001aaa:	d101      	bne.n	8001ab0 <ETH_SetMACConfig+0x120>
 8001aac:	2204      	movs	r2, #4
 8001aae:	e000      	b.n	8001ab2 <ETH_SetMACConfig+0x122>
 8001ab0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001ab2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001aba:	2a01      	cmp	r2, #1
 8001abc:	d101      	bne.n	8001ac2 <ETH_SetMACConfig+0x132>
 8001abe:	2202      	movs	r2, #2
 8001ac0:	e000      	b.n	8001ac4 <ETH_SetMACConfig+0x134>
 8001ac2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001adc:	2001      	movs	r0, #1
 8001ade:	f7ff f8e9 	bl	8000cb4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	619a      	str	r2, [r3, #24]
}
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	fd20810f 	.word	0xfd20810f

08001af8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	4b3d      	ldr	r3, [pc, #244]	; (8001c08 <ETH_SetDMAConfig+0x110>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	7b1b      	ldrb	r3, [r3, #12]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d102      	bne.n	8001b24 <ETH_SetDMAConfig+0x2c>
 8001b1e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b22:	e000      	b.n	8001b26 <ETH_SetDMAConfig+0x2e>
 8001b24:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	7b5b      	ldrb	r3, [r3, #13]
 8001b2a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b2c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	7f52      	ldrb	r2, [r2, #29]
 8001b32:	2a00      	cmp	r2, #0
 8001b34:	d102      	bne.n	8001b3c <ETH_SetDMAConfig+0x44>
 8001b36:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b3a:	e000      	b.n	8001b3e <ETH_SetDMAConfig+0x46>
 8001b3c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001b3e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	7b9b      	ldrb	r3, [r3, #14]
 8001b44:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001b46:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001b4c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	7f1b      	ldrb	r3, [r3, #28]
 8001b52:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001b54:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	7f9b      	ldrb	r3, [r3, #30]
 8001b5a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001b5c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001b62:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b6a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f7ff f890 	bl	8000cb4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	791b      	ldrb	r3, [r3, #4]
 8001ba6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001bac:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001bb2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001bb8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bc0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001bc2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001bca:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001bd0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bde:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bec:	2001      	movs	r0, #1
 8001bee:	f7ff f861 	bl	8000cb4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6013      	str	r3, [r2, #0]
}
 8001c00:	bf00      	nop
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	f8de3f23 	.word	0xf8de3f23

08001c0c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b0a6      	sub	sp, #152	; 0x98
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001c14:	2301      	movs	r3, #1
 8001c16:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001c20:	2300      	movs	r3, #0
 8001c22:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001c36:	2301      	movs	r3, #1
 8001c38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c78:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff fe7f 	bl	8001990 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001c92:	2301      	movs	r3, #1
 8001c94:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001c96:	2301      	movs	r3, #1
 8001c98:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001cc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cc6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001cc8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ccc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001cce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cd2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ce2:	f107 0308 	add.w	r3, r7, #8
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff ff05 	bl	8001af8 <ETH_SetDMAConfig>
}
 8001cee:	bf00      	nop
 8001cf0:	3798      	adds	r7, #152	; 0x98
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b087      	sub	sp, #28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3305      	adds	r3, #5
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	021b      	lsls	r3, r3, #8
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	3204      	adds	r2, #4
 8001d10:	7812      	ldrb	r2, [r2, #0]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <ETH_MACAddressConfig+0x68>)
 8001d1a:	4413      	add	r3, r2
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3303      	adds	r3, #3
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	061a      	lsls	r2, r3, #24
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3302      	adds	r3, #2
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	041b      	lsls	r3, r3, #16
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3301      	adds	r3, #1
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	021b      	lsls	r3, r3, #8
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	7812      	ldrb	r2, [r2, #0]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <ETH_MACAddressConfig+0x6c>)
 8001d4a:	4413      	add	r3, r2
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	6013      	str	r3, [r2, #0]
}
 8001d52:	bf00      	nop
 8001d54:	371c      	adds	r7, #28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40028040 	.word	0x40028040
 8001d64:	40028044 	.word	0x40028044

08001d68 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	e03e      	b.n	8001df4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68d9      	ldr	r1, [r3, #12]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	440b      	add	r3, r1
 8001d86:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	2200      	movs	r2, #0
 8001d92:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001da0:	68b9      	ldr	r1, [r7, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	3206      	adds	r2, #6
 8001da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d80c      	bhi.n	8001dd8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68d9      	ldr	r1, [r3, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	440b      	add	r3, r1
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	e004      	b.n	8001de2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	3301      	adds	r3, #1
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d9bd      	bls.n	8001d76 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e0c:	611a      	str	r2, [r3, #16]
}
 8001e0e:	bf00      	nop
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b085      	sub	sp, #20
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	e048      	b.n	8001eba <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6919      	ldr	r1, [r3, #16]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	440b      	add	r3, r1
 8001e38:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2200      	movs	r2, #0
 8001e44:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2200      	movs	r2, #0
 8001e56:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e64:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001e7e:	68b9      	ldr	r1, [r7, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	3212      	adds	r2, #18
 8001e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d80c      	bhi.n	8001eaa <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6919      	ldr	r1, [r3, #16]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	440b      	add	r3, r1
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
 8001ea8:	e004      	b.n	8001eb4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d9b3      	bls.n	8001e28 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eea:	60da      	str	r2, [r3, #12]
}
 8001eec:	bf00      	nop
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b091      	sub	sp, #68	; 0x44
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	3318      	adds	r3, #24
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	637b      	str	r3, [r7, #52]	; 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f22:	633b      	str	r3, [r7, #48]	; 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t           bd_count = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f3a:	d007      	beq.n	8001f4c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f40:	3304      	adds	r3, #4
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e111      	b.n	8002174 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8001f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f52:	3301      	adds	r3, #1
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	4b86      	ldr	r3, [pc, #536]	; (8002180 <ETH_Prepare_Tx_Descriptors+0x288>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f6a:	6852      	ldr	r2, [r2, #4]
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f70:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d008      	beq.n	8001f90 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8001f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0320 	and.w	r3, r3, #32
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d008      	beq.n	8001fae <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8001f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fac:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8001fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd0:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8001fd2:	e082      	b.n	80020da <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fde:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d006      	beq.n	8001ff4 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	e005      	b.n	8002000 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffe:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002002:	3301      	adds	r3, #1
 8002004:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002008:	2b03      	cmp	r3, #3
 800200a:	d902      	bls.n	8002012 <ETH_Prepare_Tx_Descriptors+0x11a>
 800200c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800200e:	3b04      	subs	r3, #4
 8002010:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800201a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800201c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002024:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002028:	d007      	beq.n	800203a <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800202a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800202c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800202e:	3304      	adds	r3, #4
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d029      	beq.n	800208e <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	63fb      	str	r3, [r7, #60]	; 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002046:	633b      	str	r3, [r7, #48]	; 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002048:	2300      	movs	r3, #0
 800204a:	63bb      	str	r3, [r7, #56]	; 0x38
 800204c:	e019      	b.n	8002082 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 800204e:	f3bf 8f5f 	dmb	sy
}
 8002052:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800205c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800205e:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002062:	3301      	adds	r3, #1
 8002064:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002068:	2b03      	cmp	r3, #3
 800206a:	d902      	bls.n	8002072 <ETH_Prepare_Tx_Descriptors+0x17a>
 800206c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800206e:	3b04      	subs	r3, #4
 8002070:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800207a:	633b      	str	r3, [r7, #48]	; 0x30
      for (idx = 0; idx < descnbr; idx ++)
 800207c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800207e:	3301      	adds	r3, #1
 8002080:	63bb      	str	r3, [r7, #56]	; 0x38
 8002082:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002086:	429a      	cmp	r2, r3
 8002088:	d3e1      	bcc.n	800204e <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 800208a:	2302      	movs	r3, #2
 800208c:	e072      	b.n	8002174 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800208e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002098:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 800209a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209c:	3301      	adds	r3, #1
 800209e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80020a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80020a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ae:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80020b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	4b32      	ldr	r3, [pc, #200]	; (8002180 <ETH_Prepare_Tx_Descriptors+0x288>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020ba:	6852      	ldr	r2, [r2, #4]
 80020bc:	431a      	orrs	r2, r3
 80020be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c0:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80020c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c4:	3301      	adds	r3, #1
 80020c6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80020c8:	f3bf 8f5f 	dmb	sy
}
 80020cc:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80020ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d8:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80020da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f47f af78 	bne.w	8001fd4 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d006      	beq.n	80020f8 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80020ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80020f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	e005      	b.n	8002104 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80020f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002102:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800210c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210e:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	6a3a      	ldr	r2, [r7, #32]
 8002114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002118:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800211a:	f3bf 8f5f 	dmb	sy
}
 800211e:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212a:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002130:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002134:	3304      	adds	r3, #4
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002140:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002142:	f3ef 8310 	mrs	r3, PRIMASK
 8002146:	613b      	str	r3, [r7, #16]
  return(result);
 8002148:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800214a:	61fb      	str	r3, [r7, #28]
 800214c:	2301      	movs	r3, #1
 800214e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f383 8810 	msr	PRIMASK, r3
}
 8002156:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800215c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215e:	4413      	add	r3, r2
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	629a      	str	r2, [r3, #40]	; 0x28
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	f383 8810 	msr	PRIMASK, r3
}
 8002170:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3744      	adds	r7, #68	; 0x44
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	ffffe000 	.word	0xffffe000

08002184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800219a:	2300      	movs	r3, #0
 800219c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	e175      	b.n	8002490 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80021a4:	2201      	movs	r2, #1
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	429a      	cmp	r2, r3
 80021be:	f040 8164 	bne.w	800248a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d005      	beq.n	80021da <HAL_GPIO_Init+0x56>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d130      	bne.n	800223c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	2203      	movs	r2, #3
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002210:	2201      	movs	r2, #1
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	091b      	lsrs	r3, r3, #4
 8002226:	f003 0201 	and.w	r2, r3, #1
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b03      	cmp	r3, #3
 8002246:	d017      	beq.n	8002278 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	2203      	movs	r2, #3
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d123      	bne.n	80022cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	08da      	lsrs	r2, r3, #3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3208      	adds	r2, #8
 800228c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	220f      	movs	r2, #15
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	08da      	lsrs	r2, r3, #3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3208      	adds	r2, #8
 80022c6:	69b9      	ldr	r1, [r7, #24]
 80022c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	2203      	movs	r2, #3
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0203 	and.w	r2, r3, #3
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80be 	beq.w	800248a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230e:	4b66      	ldr	r3, [pc, #408]	; (80024a8 <HAL_GPIO_Init+0x324>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	4a65      	ldr	r2, [pc, #404]	; (80024a8 <HAL_GPIO_Init+0x324>)
 8002314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002318:	6453      	str	r3, [r2, #68]	; 0x44
 800231a:	4b63      	ldr	r3, [pc, #396]	; (80024a8 <HAL_GPIO_Init+0x324>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002326:	4a61      	ldr	r2, [pc, #388]	; (80024ac <HAL_GPIO_Init+0x328>)
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	3302      	adds	r3, #2
 800232e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002332:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	220f      	movs	r2, #15
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a58      	ldr	r2, [pc, #352]	; (80024b0 <HAL_GPIO_Init+0x32c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d037      	beq.n	80023c2 <HAL_GPIO_Init+0x23e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a57      	ldr	r2, [pc, #348]	; (80024b4 <HAL_GPIO_Init+0x330>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d031      	beq.n	80023be <HAL_GPIO_Init+0x23a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a56      	ldr	r2, [pc, #344]	; (80024b8 <HAL_GPIO_Init+0x334>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d02b      	beq.n	80023ba <HAL_GPIO_Init+0x236>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a55      	ldr	r2, [pc, #340]	; (80024bc <HAL_GPIO_Init+0x338>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d025      	beq.n	80023b6 <HAL_GPIO_Init+0x232>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a54      	ldr	r2, [pc, #336]	; (80024c0 <HAL_GPIO_Init+0x33c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d01f      	beq.n	80023b2 <HAL_GPIO_Init+0x22e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a53      	ldr	r2, [pc, #332]	; (80024c4 <HAL_GPIO_Init+0x340>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d019      	beq.n	80023ae <HAL_GPIO_Init+0x22a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a52      	ldr	r2, [pc, #328]	; (80024c8 <HAL_GPIO_Init+0x344>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d013      	beq.n	80023aa <HAL_GPIO_Init+0x226>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a51      	ldr	r2, [pc, #324]	; (80024cc <HAL_GPIO_Init+0x348>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00d      	beq.n	80023a6 <HAL_GPIO_Init+0x222>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a50      	ldr	r2, [pc, #320]	; (80024d0 <HAL_GPIO_Init+0x34c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d007      	beq.n	80023a2 <HAL_GPIO_Init+0x21e>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a4f      	ldr	r2, [pc, #316]	; (80024d4 <HAL_GPIO_Init+0x350>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d101      	bne.n	800239e <HAL_GPIO_Init+0x21a>
 800239a:	2309      	movs	r3, #9
 800239c:	e012      	b.n	80023c4 <HAL_GPIO_Init+0x240>
 800239e:	230a      	movs	r3, #10
 80023a0:	e010      	b.n	80023c4 <HAL_GPIO_Init+0x240>
 80023a2:	2308      	movs	r3, #8
 80023a4:	e00e      	b.n	80023c4 <HAL_GPIO_Init+0x240>
 80023a6:	2307      	movs	r3, #7
 80023a8:	e00c      	b.n	80023c4 <HAL_GPIO_Init+0x240>
 80023aa:	2306      	movs	r3, #6
 80023ac:	e00a      	b.n	80023c4 <HAL_GPIO_Init+0x240>
 80023ae:	2305      	movs	r3, #5
 80023b0:	e008      	b.n	80023c4 <HAL_GPIO_Init+0x240>
 80023b2:	2304      	movs	r3, #4
 80023b4:	e006      	b.n	80023c4 <HAL_GPIO_Init+0x240>
 80023b6:	2303      	movs	r3, #3
 80023b8:	e004      	b.n	80023c4 <HAL_GPIO_Init+0x240>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e002      	b.n	80023c4 <HAL_GPIO_Init+0x240>
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <HAL_GPIO_Init+0x240>
 80023c2:	2300      	movs	r3, #0
 80023c4:	69fa      	ldr	r2, [r7, #28]
 80023c6:	f002 0203 	and.w	r2, r2, #3
 80023ca:	0092      	lsls	r2, r2, #2
 80023cc:	4093      	lsls	r3, r2
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80023d4:	4935      	ldr	r1, [pc, #212]	; (80024ac <HAL_GPIO_Init+0x328>)
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	089b      	lsrs	r3, r3, #2
 80023da:	3302      	adds	r3, #2
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023e2:	4b3d      	ldr	r3, [pc, #244]	; (80024d8 <HAL_GPIO_Init+0x354>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002406:	4a34      	ldr	r2, [pc, #208]	; (80024d8 <HAL_GPIO_Init+0x354>)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800240c:	4b32      	ldr	r3, [pc, #200]	; (80024d8 <HAL_GPIO_Init+0x354>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002430:	4a29      	ldr	r2, [pc, #164]	; (80024d8 <HAL_GPIO_Init+0x354>)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002436:	4b28      	ldr	r3, [pc, #160]	; (80024d8 <HAL_GPIO_Init+0x354>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800245a:	4a1f      	ldr	r2, [pc, #124]	; (80024d8 <HAL_GPIO_Init+0x354>)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002460:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <HAL_GPIO_Init+0x354>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002484:	4a14      	ldr	r2, [pc, #80]	; (80024d8 <HAL_GPIO_Init+0x354>)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3301      	adds	r3, #1
 800248e:	61fb      	str	r3, [r7, #28]
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	2b0f      	cmp	r3, #15
 8002494:	f67f ae86 	bls.w	80021a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002498:	bf00      	nop
 800249a:	bf00      	nop
 800249c:	3724      	adds	r7, #36	; 0x24
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40013800 	.word	0x40013800
 80024b0:	40020000 	.word	0x40020000
 80024b4:	40020400 	.word	0x40020400
 80024b8:	40020800 	.word	0x40020800
 80024bc:	40020c00 	.word	0x40020c00
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40021400 	.word	0x40021400
 80024c8:	40021800 	.word	0x40021800
 80024cc:	40021c00 	.word	0x40021c00
 80024d0:	40022000 	.word	0x40022000
 80024d4:	40022400 	.word	0x40022400
 80024d8:	40013c00 	.word	0x40013c00

080024dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80024e4:	2300      	movs	r3, #0
 80024e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e291      	b.n	8002a16 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 8087 	beq.w	800260e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002500:	4b96      	ldr	r3, [pc, #600]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 030c 	and.w	r3, r3, #12
 8002508:	2b04      	cmp	r3, #4
 800250a:	d00c      	beq.n	8002526 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800250c:	4b93      	ldr	r3, [pc, #588]	; (800275c <HAL_RCC_OscConfig+0x280>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	2b08      	cmp	r3, #8
 8002516:	d112      	bne.n	800253e <HAL_RCC_OscConfig+0x62>
 8002518:	4b90      	ldr	r3, [pc, #576]	; (800275c <HAL_RCC_OscConfig+0x280>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002520:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002524:	d10b      	bne.n	800253e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002526:	4b8d      	ldr	r3, [pc, #564]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d06c      	beq.n	800260c <HAL_RCC_OscConfig+0x130>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d168      	bne.n	800260c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e26b      	b.n	8002a16 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002546:	d106      	bne.n	8002556 <HAL_RCC_OscConfig+0x7a>
 8002548:	4b84      	ldr	r3, [pc, #528]	; (800275c <HAL_RCC_OscConfig+0x280>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a83      	ldr	r2, [pc, #524]	; (800275c <HAL_RCC_OscConfig+0x280>)
 800254e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	e02e      	b.n	80025b4 <HAL_RCC_OscConfig+0xd8>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10c      	bne.n	8002578 <HAL_RCC_OscConfig+0x9c>
 800255e:	4b7f      	ldr	r3, [pc, #508]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a7e      	ldr	r2, [pc, #504]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b7c      	ldr	r3, [pc, #496]	; (800275c <HAL_RCC_OscConfig+0x280>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a7b      	ldr	r2, [pc, #492]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002570:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e01d      	b.n	80025b4 <HAL_RCC_OscConfig+0xd8>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002580:	d10c      	bne.n	800259c <HAL_RCC_OscConfig+0xc0>
 8002582:	4b76      	ldr	r3, [pc, #472]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a75      	ldr	r2, [pc, #468]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	4b73      	ldr	r3, [pc, #460]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a72      	ldr	r2, [pc, #456]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	e00b      	b.n	80025b4 <HAL_RCC_OscConfig+0xd8>
 800259c:	4b6f      	ldr	r3, [pc, #444]	; (800275c <HAL_RCC_OscConfig+0x280>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a6e      	ldr	r2, [pc, #440]	; (800275c <HAL_RCC_OscConfig+0x280>)
 80025a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	4b6c      	ldr	r3, [pc, #432]	; (800275c <HAL_RCC_OscConfig+0x280>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a6b      	ldr	r2, [pc, #428]	; (800275c <HAL_RCC_OscConfig+0x280>)
 80025ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d013      	beq.n	80025e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025bc:	f7fe fb6e 	bl	8000c9c <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c4:	f7fe fb6a 	bl	8000c9c <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	; 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e21f      	b.n	8002a16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d6:	4b61      	ldr	r3, [pc, #388]	; (800275c <HAL_RCC_OscConfig+0x280>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0xe8>
 80025e2:	e014      	b.n	800260e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e4:	f7fe fb5a 	bl	8000c9c <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ec:	f7fe fb56 	bl	8000c9c <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	; 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e20b      	b.n	8002a16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fe:	4b57      	ldr	r3, [pc, #348]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x110>
 800260a:	e000      	b.n	800260e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d069      	beq.n	80026ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800261a:	4b50      	ldr	r3, [pc, #320]	; (800275c <HAL_RCC_OscConfig+0x280>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00b      	beq.n	800263e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002626:	4b4d      	ldr	r3, [pc, #308]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b08      	cmp	r3, #8
 8002630:	d11c      	bne.n	800266c <HAL_RCC_OscConfig+0x190>
 8002632:	4b4a      	ldr	r3, [pc, #296]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d116      	bne.n	800266c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263e:	4b47      	ldr	r3, [pc, #284]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <HAL_RCC_OscConfig+0x17a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d001      	beq.n	8002656 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e1df      	b.n	8002a16 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002656:	4b41      	ldr	r3, [pc, #260]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	493d      	ldr	r1, [pc, #244]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266a:	e040      	b.n	80026ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d023      	beq.n	80026bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002674:	4b39      	ldr	r3, [pc, #228]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a38      	ldr	r2, [pc, #224]	; (800275c <HAL_RCC_OscConfig+0x280>)
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe fb0c 	bl	8000c9c <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002688:	f7fe fb08 	bl	8000c9c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e1bd      	b.n	8002a16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269a:	4b30      	ldr	r3, [pc, #192]	; (800275c <HAL_RCC_OscConfig+0x280>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a6:	4b2d      	ldr	r3, [pc, #180]	; (800275c <HAL_RCC_OscConfig+0x280>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4929      	ldr	r1, [pc, #164]	; (800275c <HAL_RCC_OscConfig+0x280>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]
 80026ba:	e018      	b.n	80026ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026bc:	4b27      	ldr	r3, [pc, #156]	; (800275c <HAL_RCC_OscConfig+0x280>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a26      	ldr	r2, [pc, #152]	; (800275c <HAL_RCC_OscConfig+0x280>)
 80026c2:	f023 0301 	bic.w	r3, r3, #1
 80026c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7fe fae8 	bl	8000c9c <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d0:	f7fe fae4 	bl	8000c9c <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e199      	b.n	8002a16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e2:	4b1e      	ldr	r3, [pc, #120]	; (800275c <HAL_RCC_OscConfig+0x280>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d038      	beq.n	800276c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d019      	beq.n	8002736 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002702:	4b16      	ldr	r3, [pc, #88]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002706:	4a15      	ldr	r2, [pc, #84]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270e:	f7fe fac5 	bl	8000c9c <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002716:	f7fe fac1 	bl	8000c9c <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e176      	b.n	8002a16 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <HAL_RCC_OscConfig+0x280>)
 800272a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0f0      	beq.n	8002716 <HAL_RCC_OscConfig+0x23a>
 8002734:	e01a      	b.n	800276c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002736:	4b09      	ldr	r3, [pc, #36]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800273a:	4a08      	ldr	r2, [pc, #32]	; (800275c <HAL_RCC_OscConfig+0x280>)
 800273c:	f023 0301 	bic.w	r3, r3, #1
 8002740:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002742:	f7fe faab 	bl	8000c9c <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002748:	e00a      	b.n	8002760 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274a:	f7fe faa7 	bl	8000c9c <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d903      	bls.n	8002760 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e15c      	b.n	8002a16 <HAL_RCC_OscConfig+0x53a>
 800275c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002760:	4b91      	ldr	r3, [pc, #580]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 8002762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1ee      	bne.n	800274a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 80a4 	beq.w	80028c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800277a:	4b8b      	ldr	r3, [pc, #556]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10d      	bne.n	80027a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002786:	4b88      	ldr	r3, [pc, #544]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	4a87      	ldr	r2, [pc, #540]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 800278c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002790:	6413      	str	r3, [r2, #64]	; 0x40
 8002792:	4b85      	ldr	r3, [pc, #532]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279e:	2301      	movs	r3, #1
 80027a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027a2:	4b82      	ldr	r3, [pc, #520]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d118      	bne.n	80027e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80027ae:	4b7f      	ldr	r3, [pc, #508]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a7e      	ldr	r2, [pc, #504]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 80027b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ba:	f7fe fa6f 	bl	8000c9c <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c2:	f7fe fa6b 	bl	8000c9c <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b64      	cmp	r3, #100	; 0x64
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e120      	b.n	8002a16 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d4:	4b75      	ldr	r3, [pc, #468]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0f0      	beq.n	80027c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d106      	bne.n	80027f6 <HAL_RCC_OscConfig+0x31a>
 80027e8:	4b6f      	ldr	r3, [pc, #444]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 80027ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ec:	4a6e      	ldr	r2, [pc, #440]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6713      	str	r3, [r2, #112]	; 0x70
 80027f4:	e02d      	b.n	8002852 <HAL_RCC_OscConfig+0x376>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10c      	bne.n	8002818 <HAL_RCC_OscConfig+0x33c>
 80027fe:	4b6a      	ldr	r3, [pc, #424]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002802:	4a69      	ldr	r2, [pc, #420]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 8002804:	f023 0301 	bic.w	r3, r3, #1
 8002808:	6713      	str	r3, [r2, #112]	; 0x70
 800280a:	4b67      	ldr	r3, [pc, #412]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280e:	4a66      	ldr	r2, [pc, #408]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 8002810:	f023 0304 	bic.w	r3, r3, #4
 8002814:	6713      	str	r3, [r2, #112]	; 0x70
 8002816:	e01c      	b.n	8002852 <HAL_RCC_OscConfig+0x376>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b05      	cmp	r3, #5
 800281e:	d10c      	bne.n	800283a <HAL_RCC_OscConfig+0x35e>
 8002820:	4b61      	ldr	r3, [pc, #388]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 8002822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002824:	4a60      	ldr	r2, [pc, #384]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 8002826:	f043 0304 	orr.w	r3, r3, #4
 800282a:	6713      	str	r3, [r2, #112]	; 0x70
 800282c:	4b5e      	ldr	r3, [pc, #376]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002830:	4a5d      	ldr	r2, [pc, #372]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	6713      	str	r3, [r2, #112]	; 0x70
 8002838:	e00b      	b.n	8002852 <HAL_RCC_OscConfig+0x376>
 800283a:	4b5b      	ldr	r3, [pc, #364]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 800283c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283e:	4a5a      	ldr	r2, [pc, #360]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 8002840:	f023 0301 	bic.w	r3, r3, #1
 8002844:	6713      	str	r3, [r2, #112]	; 0x70
 8002846:	4b58      	ldr	r3, [pc, #352]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284a:	4a57      	ldr	r2, [pc, #348]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 800284c:	f023 0304 	bic.w	r3, r3, #4
 8002850:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d015      	beq.n	8002886 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285a:	f7fe fa1f 	bl	8000c9c <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002860:	e00a      	b.n	8002878 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002862:	f7fe fa1b 	bl	8000c9c <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002870:	4293      	cmp	r3, r2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e0ce      	b.n	8002a16 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002878:	4b4b      	ldr	r3, [pc, #300]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 800287a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0ee      	beq.n	8002862 <HAL_RCC_OscConfig+0x386>
 8002884:	e014      	b.n	80028b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002886:	f7fe fa09 	bl	8000c9c <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800288c:	e00a      	b.n	80028a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288e:	f7fe fa05 	bl	8000c9c <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	f241 3288 	movw	r2, #5000	; 0x1388
 800289c:	4293      	cmp	r3, r2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e0b8      	b.n	8002a16 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a4:	4b40      	ldr	r3, [pc, #256]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 80028a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1ee      	bne.n	800288e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028b0:	7dfb      	ldrb	r3, [r7, #23]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d105      	bne.n	80028c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b6:	4b3c      	ldr	r3, [pc, #240]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	4a3b      	ldr	r2, [pc, #236]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 80028bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 80a4 	beq.w	8002a14 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028cc:	4b36      	ldr	r3, [pc, #216]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 030c 	and.w	r3, r3, #12
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d06b      	beq.n	80029b0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d149      	bne.n	8002974 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e0:	4b31      	ldr	r3, [pc, #196]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a30      	ldr	r2, [pc, #192]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 80028e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7fe f9d6 	bl	8000c9c <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f4:	f7fe f9d2 	bl	8000c9c <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e087      	b.n	8002a16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002906:	4b28      	ldr	r3, [pc, #160]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69da      	ldr	r2, [r3, #28]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	019b      	lsls	r3, r3, #6
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002928:	085b      	lsrs	r3, r3, #1
 800292a:	3b01      	subs	r3, #1
 800292c:	041b      	lsls	r3, r3, #16
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	061b      	lsls	r3, r3, #24
 8002936:	4313      	orrs	r3, r2
 8002938:	4a1b      	ldr	r2, [pc, #108]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 800293a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800293e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002940:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a18      	ldr	r2, [pc, #96]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 8002946:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800294a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294c:	f7fe f9a6 	bl	8000c9c <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002954:	f7fe f9a2 	bl	8000c9c <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e057      	b.n	8002a16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002966:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0x478>
 8002972:	e04f      	b.n	8002a14 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002974:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0b      	ldr	r2, [pc, #44]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 800297a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800297e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe f98c 	bl	8000c9c <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002988:	f7fe f988 	bl	8000c9c <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e03d      	b.n	8002a16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299a:	4b03      	ldr	r3, [pc, #12]	; (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x4ac>
 80029a6:	e035      	b.n	8002a14 <HAL_RCC_OscConfig+0x538>
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80029b0:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <HAL_RCC_OscConfig+0x544>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d028      	beq.n	8002a10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d121      	bne.n	8002a10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d11a      	bne.n	8002a10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029e0:	4013      	ands	r3, r2
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d111      	bne.n	8002a10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f6:	085b      	lsrs	r3, r3, #1
 80029f8:	3b01      	subs	r3, #1
 80029fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d107      	bne.n	8002a10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e000      	b.n	8002a16 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40023800 	.word	0x40023800

08002a24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0d0      	b.n	8002bde <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a3c:	4b6a      	ldr	r3, [pc, #424]	; (8002be8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d910      	bls.n	8002a6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4a:	4b67      	ldr	r3, [pc, #412]	; (8002be8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f023 020f 	bic.w	r2, r3, #15
 8002a52:	4965      	ldr	r1, [pc, #404]	; (8002be8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5a:	4b63      	ldr	r3, [pc, #396]	; (8002be8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0b8      	b.n	8002bde <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d020      	beq.n	8002aba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a84:	4b59      	ldr	r3, [pc, #356]	; (8002bec <HAL_RCC_ClockConfig+0x1c8>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	4a58      	ldr	r2, [pc, #352]	; (8002bec <HAL_RCC_ClockConfig+0x1c8>)
 8002a8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a9c:	4b53      	ldr	r3, [pc, #332]	; (8002bec <HAL_RCC_ClockConfig+0x1c8>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	4a52      	ldr	r2, [pc, #328]	; (8002bec <HAL_RCC_ClockConfig+0x1c8>)
 8002aa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002aa6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa8:	4b50      	ldr	r3, [pc, #320]	; (8002bec <HAL_RCC_ClockConfig+0x1c8>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	494d      	ldr	r1, [pc, #308]	; (8002bec <HAL_RCC_ClockConfig+0x1c8>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d040      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d107      	bne.n	8002ade <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ace:	4b47      	ldr	r3, [pc, #284]	; (8002bec <HAL_RCC_ClockConfig+0x1c8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d115      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e07f      	b.n	8002bde <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae6:	4b41      	ldr	r3, [pc, #260]	; (8002bec <HAL_RCC_ClockConfig+0x1c8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d109      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e073      	b.n	8002bde <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af6:	4b3d      	ldr	r3, [pc, #244]	; (8002bec <HAL_RCC_ClockConfig+0x1c8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e06b      	b.n	8002bde <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b06:	4b39      	ldr	r3, [pc, #228]	; (8002bec <HAL_RCC_ClockConfig+0x1c8>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f023 0203 	bic.w	r2, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	4936      	ldr	r1, [pc, #216]	; (8002bec <HAL_RCC_ClockConfig+0x1c8>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b18:	f7fe f8c0 	bl	8000c9c <HAL_GetTick>
 8002b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1e:	e00a      	b.n	8002b36 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b20:	f7fe f8bc 	bl	8000c9c <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e053      	b.n	8002bde <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b36:	4b2d      	ldr	r3, [pc, #180]	; (8002bec <HAL_RCC_ClockConfig+0x1c8>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 020c 	and.w	r2, r3, #12
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d1eb      	bne.n	8002b20 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b48:	4b27      	ldr	r3, [pc, #156]	; (8002be8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d210      	bcs.n	8002b78 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b56:	4b24      	ldr	r3, [pc, #144]	; (8002be8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f023 020f 	bic.w	r2, r3, #15
 8002b5e:	4922      	ldr	r1, [pc, #136]	; (8002be8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b66:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e032      	b.n	8002bde <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b84:	4b19      	ldr	r3, [pc, #100]	; (8002bec <HAL_RCC_ClockConfig+0x1c8>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4916      	ldr	r1, [pc, #88]	; (8002bec <HAL_RCC_ClockConfig+0x1c8>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d009      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ba2:	4b12      	ldr	r3, [pc, #72]	; (8002bec <HAL_RCC_ClockConfig+0x1c8>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	490e      	ldr	r1, [pc, #56]	; (8002bec <HAL_RCC_ClockConfig+0x1c8>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bb6:	f000 f821 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <HAL_RCC_ClockConfig+0x1c8>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	490a      	ldr	r1, [pc, #40]	; (8002bf0 <HAL_RCC_ClockConfig+0x1cc>)
 8002bc8:	5ccb      	ldrb	r3, [r1, r3]
 8002bca:	fa22 f303 	lsr.w	r3, r2, r3
 8002bce:	4a09      	ldr	r2, [pc, #36]	; (8002bf4 <HAL_RCC_ClockConfig+0x1d0>)
 8002bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bd2:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <HAL_RCC_ClockConfig+0x1d4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe f81c 	bl	8000c14 <HAL_InitTick>

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40023c00 	.word	0x40023c00
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	08010d10 	.word	0x08010d10
 8002bf4:	20000000 	.word	0x20000000
 8002bf8:	20000004 	.word	0x20000004

08002bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c00:	b090      	sub	sp, #64	; 0x40
 8002c02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	637b      	str	r3, [r7, #52]	; 0x34
 8002c08:	2300      	movs	r3, #0
 8002c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002c10:	2300      	movs	r3, #0
 8002c12:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c14:	4b59      	ldr	r3, [pc, #356]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 030c 	and.w	r3, r3, #12
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d00d      	beq.n	8002c3c <HAL_RCC_GetSysClockFreq+0x40>
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	f200 80a1 	bhi.w	8002d68 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <HAL_RCC_GetSysClockFreq+0x34>
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d003      	beq.n	8002c36 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c2e:	e09b      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c30:	4b53      	ldr	r3, [pc, #332]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c32:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c34:	e09b      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c36:	4b53      	ldr	r3, [pc, #332]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c3a:	e098      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c3c:	4b4f      	ldr	r3, [pc, #316]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c44:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c46:	4b4d      	ldr	r3, [pc, #308]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d028      	beq.n	8002ca4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c52:	4b4a      	ldr	r3, [pc, #296]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	099b      	lsrs	r3, r3, #6
 8002c58:	2200      	movs	r2, #0
 8002c5a:	623b      	str	r3, [r7, #32]
 8002c5c:	627a      	str	r2, [r7, #36]	; 0x24
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c64:	2100      	movs	r1, #0
 8002c66:	4b47      	ldr	r3, [pc, #284]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c68:	fb03 f201 	mul.w	r2, r3, r1
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	fb00 f303 	mul.w	r3, r0, r3
 8002c72:	4413      	add	r3, r2
 8002c74:	4a43      	ldr	r2, [pc, #268]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c76:	fba0 1202 	umull	r1, r2, r0, r2
 8002c7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c7c:	460a      	mov	r2, r1
 8002c7e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c82:	4413      	add	r3, r2
 8002c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c88:	2200      	movs	r2, #0
 8002c8a:	61bb      	str	r3, [r7, #24]
 8002c8c:	61fa      	str	r2, [r7, #28]
 8002c8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c96:	f7fd fb0b 	bl	80002b0 <__aeabi_uldivmod>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ca2:	e053      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca4:	4b35      	ldr	r3, [pc, #212]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	099b      	lsrs	r3, r3, #6
 8002caa:	2200      	movs	r2, #0
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	617a      	str	r2, [r7, #20]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002cb6:	f04f 0b00 	mov.w	fp, #0
 8002cba:	4652      	mov	r2, sl
 8002cbc:	465b      	mov	r3, fp
 8002cbe:	f04f 0000 	mov.w	r0, #0
 8002cc2:	f04f 0100 	mov.w	r1, #0
 8002cc6:	0159      	lsls	r1, r3, #5
 8002cc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ccc:	0150      	lsls	r0, r2, #5
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	ebb2 080a 	subs.w	r8, r2, sl
 8002cd6:	eb63 090b 	sbc.w	r9, r3, fp
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ce6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002cea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002cee:	ebb2 0408 	subs.w	r4, r2, r8
 8002cf2:	eb63 0509 	sbc.w	r5, r3, r9
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	f04f 0300 	mov.w	r3, #0
 8002cfe:	00eb      	lsls	r3, r5, #3
 8002d00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d04:	00e2      	lsls	r2, r4, #3
 8002d06:	4614      	mov	r4, r2
 8002d08:	461d      	mov	r5, r3
 8002d0a:	eb14 030a 	adds.w	r3, r4, sl
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	eb45 030b 	adc.w	r3, r5, fp
 8002d14:	607b      	str	r3, [r7, #4]
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d22:	4629      	mov	r1, r5
 8002d24:	028b      	lsls	r3, r1, #10
 8002d26:	4621      	mov	r1, r4
 8002d28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d2c:	4621      	mov	r1, r4
 8002d2e:	028a      	lsls	r2, r1, #10
 8002d30:	4610      	mov	r0, r2
 8002d32:	4619      	mov	r1, r3
 8002d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d36:	2200      	movs	r2, #0
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	60fa      	str	r2, [r7, #12]
 8002d3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d40:	f7fd fab6 	bl	80002b0 <__aeabi_uldivmod>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4613      	mov	r3, r2
 8002d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	0c1b      	lsrs	r3, r3, #16
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	3301      	adds	r3, #1
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002d5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d66:	e002      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d6a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3740      	adds	r7, #64	; 0x40
 8002d74:	46bd      	mov	sp, r7
 8002d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	00f42400 	.word	0x00f42400
 8002d84:	017d7840 	.word	0x017d7840

08002d88 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d8c:	4b03      	ldr	r3, [pc, #12]	; (8002d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	20000000 	.word	0x20000000

08002da0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8002da6:	4b8d      	ldr	r3, [pc, #564]	; (8002fdc <MX_LWIP_Init+0x23c>)
 8002da8:	22c0      	movs	r2, #192	; 0xc0
 8002daa:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8002dac:	4b8b      	ldr	r3, [pc, #556]	; (8002fdc <MX_LWIP_Init+0x23c>)
 8002dae:	22a8      	movs	r2, #168	; 0xa8
 8002db0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8002db2:	4b8a      	ldr	r3, [pc, #552]	; (8002fdc <MX_LWIP_Init+0x23c>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 8002db8:	4b88      	ldr	r3, [pc, #544]	; (8002fdc <MX_LWIP_Init+0x23c>)
 8002dba:	227b      	movs	r2, #123	; 0x7b
 8002dbc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8002dbe:	4b88      	ldr	r3, [pc, #544]	; (8002fe0 <MX_LWIP_Init+0x240>)
 8002dc0:	22ff      	movs	r2, #255	; 0xff
 8002dc2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8002dc4:	4b86      	ldr	r3, [pc, #536]	; (8002fe0 <MX_LWIP_Init+0x240>)
 8002dc6:	22ff      	movs	r2, #255	; 0xff
 8002dc8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8002dca:	4b85      	ldr	r3, [pc, #532]	; (8002fe0 <MX_LWIP_Init+0x240>)
 8002dcc:	22ff      	movs	r2, #255	; 0xff
 8002dce:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8002dd0:	4b83      	ldr	r3, [pc, #524]	; (8002fe0 <MX_LWIP_Init+0x240>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8002dd6:	4b83      	ldr	r3, [pc, #524]	; (8002fe4 <MX_LWIP_Init+0x244>)
 8002dd8:	22c0      	movs	r2, #192	; 0xc0
 8002dda:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8002ddc:	4b81      	ldr	r3, [pc, #516]	; (8002fe4 <MX_LWIP_Init+0x244>)
 8002dde:	22a8      	movs	r2, #168	; 0xa8
 8002de0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8002de2:	4b80      	ldr	r3, [pc, #512]	; (8002fe4 <MX_LWIP_Init+0x244>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8002de8:	4b7e      	ldr	r3, [pc, #504]	; (8002fe4 <MX_LWIP_Init+0x244>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8002dee:	f000 fd15 	bl	800381c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002df2:	4b7a      	ldr	r3, [pc, #488]	; (8002fdc <MX_LWIP_Init+0x23c>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	061a      	lsls	r2, r3, #24
 8002df8:	4b78      	ldr	r3, [pc, #480]	; (8002fdc <MX_LWIP_Init+0x23c>)
 8002dfa:	785b      	ldrb	r3, [r3, #1]
 8002dfc:	041b      	lsls	r3, r3, #16
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	4b76      	ldr	r3, [pc, #472]	; (8002fdc <MX_LWIP_Init+0x23c>)
 8002e02:	789b      	ldrb	r3, [r3, #2]
 8002e04:	021b      	lsls	r3, r3, #8
 8002e06:	4313      	orrs	r3, r2
 8002e08:	4a74      	ldr	r2, [pc, #464]	; (8002fdc <MX_LWIP_Init+0x23c>)
 8002e0a:	78d2      	ldrb	r2, [r2, #3]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	061a      	lsls	r2, r3, #24
 8002e10:	4b72      	ldr	r3, [pc, #456]	; (8002fdc <MX_LWIP_Init+0x23c>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	0619      	lsls	r1, r3, #24
 8002e16:	4b71      	ldr	r3, [pc, #452]	; (8002fdc <MX_LWIP_Init+0x23c>)
 8002e18:	785b      	ldrb	r3, [r3, #1]
 8002e1a:	041b      	lsls	r3, r3, #16
 8002e1c:	4319      	orrs	r1, r3
 8002e1e:	4b6f      	ldr	r3, [pc, #444]	; (8002fdc <MX_LWIP_Init+0x23c>)
 8002e20:	789b      	ldrb	r3, [r3, #2]
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	430b      	orrs	r3, r1
 8002e26:	496d      	ldr	r1, [pc, #436]	; (8002fdc <MX_LWIP_Init+0x23c>)
 8002e28:	78c9      	ldrb	r1, [r1, #3]
 8002e2a:	430b      	orrs	r3, r1
 8002e2c:	021b      	lsls	r3, r3, #8
 8002e2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002e32:	431a      	orrs	r2, r3
 8002e34:	4b69      	ldr	r3, [pc, #420]	; (8002fdc <MX_LWIP_Init+0x23c>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	0619      	lsls	r1, r3, #24
 8002e3a:	4b68      	ldr	r3, [pc, #416]	; (8002fdc <MX_LWIP_Init+0x23c>)
 8002e3c:	785b      	ldrb	r3, [r3, #1]
 8002e3e:	041b      	lsls	r3, r3, #16
 8002e40:	4319      	orrs	r1, r3
 8002e42:	4b66      	ldr	r3, [pc, #408]	; (8002fdc <MX_LWIP_Init+0x23c>)
 8002e44:	789b      	ldrb	r3, [r3, #2]
 8002e46:	021b      	lsls	r3, r3, #8
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	4964      	ldr	r1, [pc, #400]	; (8002fdc <MX_LWIP_Init+0x23c>)
 8002e4c:	78c9      	ldrb	r1, [r1, #3]
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	0a1b      	lsrs	r3, r3, #8
 8002e52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002e56:	431a      	orrs	r2, r3
 8002e58:	4b60      	ldr	r3, [pc, #384]	; (8002fdc <MX_LWIP_Init+0x23c>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	0619      	lsls	r1, r3, #24
 8002e5e:	4b5f      	ldr	r3, [pc, #380]	; (8002fdc <MX_LWIP_Init+0x23c>)
 8002e60:	785b      	ldrb	r3, [r3, #1]
 8002e62:	041b      	lsls	r3, r3, #16
 8002e64:	4319      	orrs	r1, r3
 8002e66:	4b5d      	ldr	r3, [pc, #372]	; (8002fdc <MX_LWIP_Init+0x23c>)
 8002e68:	789b      	ldrb	r3, [r3, #2]
 8002e6a:	021b      	lsls	r3, r3, #8
 8002e6c:	430b      	orrs	r3, r1
 8002e6e:	495b      	ldr	r1, [pc, #364]	; (8002fdc <MX_LWIP_Init+0x23c>)
 8002e70:	78c9      	ldrb	r1, [r1, #3]
 8002e72:	430b      	orrs	r3, r1
 8002e74:	0e1b      	lsrs	r3, r3, #24
 8002e76:	4313      	orrs	r3, r2
 8002e78:	4a5b      	ldr	r2, [pc, #364]	; (8002fe8 <MX_LWIP_Init+0x248>)
 8002e7a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002e7c:	4b58      	ldr	r3, [pc, #352]	; (8002fe0 <MX_LWIP_Init+0x240>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	061a      	lsls	r2, r3, #24
 8002e82:	4b57      	ldr	r3, [pc, #348]	; (8002fe0 <MX_LWIP_Init+0x240>)
 8002e84:	785b      	ldrb	r3, [r3, #1]
 8002e86:	041b      	lsls	r3, r3, #16
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	4b55      	ldr	r3, [pc, #340]	; (8002fe0 <MX_LWIP_Init+0x240>)
 8002e8c:	789b      	ldrb	r3, [r3, #2]
 8002e8e:	021b      	lsls	r3, r3, #8
 8002e90:	4313      	orrs	r3, r2
 8002e92:	4a53      	ldr	r2, [pc, #332]	; (8002fe0 <MX_LWIP_Init+0x240>)
 8002e94:	78d2      	ldrb	r2, [r2, #3]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	061a      	lsls	r2, r3, #24
 8002e9a:	4b51      	ldr	r3, [pc, #324]	; (8002fe0 <MX_LWIP_Init+0x240>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	0619      	lsls	r1, r3, #24
 8002ea0:	4b4f      	ldr	r3, [pc, #316]	; (8002fe0 <MX_LWIP_Init+0x240>)
 8002ea2:	785b      	ldrb	r3, [r3, #1]
 8002ea4:	041b      	lsls	r3, r3, #16
 8002ea6:	4319      	orrs	r1, r3
 8002ea8:	4b4d      	ldr	r3, [pc, #308]	; (8002fe0 <MX_LWIP_Init+0x240>)
 8002eaa:	789b      	ldrb	r3, [r3, #2]
 8002eac:	021b      	lsls	r3, r3, #8
 8002eae:	430b      	orrs	r3, r1
 8002eb0:	494b      	ldr	r1, [pc, #300]	; (8002fe0 <MX_LWIP_Init+0x240>)
 8002eb2:	78c9      	ldrb	r1, [r1, #3]
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	4b48      	ldr	r3, [pc, #288]	; (8002fe0 <MX_LWIP_Init+0x240>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	0619      	lsls	r1, r3, #24
 8002ec4:	4b46      	ldr	r3, [pc, #280]	; (8002fe0 <MX_LWIP_Init+0x240>)
 8002ec6:	785b      	ldrb	r3, [r3, #1]
 8002ec8:	041b      	lsls	r3, r3, #16
 8002eca:	4319      	orrs	r1, r3
 8002ecc:	4b44      	ldr	r3, [pc, #272]	; (8002fe0 <MX_LWIP_Init+0x240>)
 8002ece:	789b      	ldrb	r3, [r3, #2]
 8002ed0:	021b      	lsls	r3, r3, #8
 8002ed2:	430b      	orrs	r3, r1
 8002ed4:	4942      	ldr	r1, [pc, #264]	; (8002fe0 <MX_LWIP_Init+0x240>)
 8002ed6:	78c9      	ldrb	r1, [r1, #3]
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	0a1b      	lsrs	r3, r3, #8
 8002edc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	4b3f      	ldr	r3, [pc, #252]	; (8002fe0 <MX_LWIP_Init+0x240>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	0619      	lsls	r1, r3, #24
 8002ee8:	4b3d      	ldr	r3, [pc, #244]	; (8002fe0 <MX_LWIP_Init+0x240>)
 8002eea:	785b      	ldrb	r3, [r3, #1]
 8002eec:	041b      	lsls	r3, r3, #16
 8002eee:	4319      	orrs	r1, r3
 8002ef0:	4b3b      	ldr	r3, [pc, #236]	; (8002fe0 <MX_LWIP_Init+0x240>)
 8002ef2:	789b      	ldrb	r3, [r3, #2]
 8002ef4:	021b      	lsls	r3, r3, #8
 8002ef6:	430b      	orrs	r3, r1
 8002ef8:	4939      	ldr	r1, [pc, #228]	; (8002fe0 <MX_LWIP_Init+0x240>)
 8002efa:	78c9      	ldrb	r1, [r1, #3]
 8002efc:	430b      	orrs	r3, r1
 8002efe:	0e1b      	lsrs	r3, r3, #24
 8002f00:	4313      	orrs	r3, r2
 8002f02:	4a3a      	ldr	r2, [pc, #232]	; (8002fec <MX_LWIP_Init+0x24c>)
 8002f04:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002f06:	4b37      	ldr	r3, [pc, #220]	; (8002fe4 <MX_LWIP_Init+0x244>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	061a      	lsls	r2, r3, #24
 8002f0c:	4b35      	ldr	r3, [pc, #212]	; (8002fe4 <MX_LWIP_Init+0x244>)
 8002f0e:	785b      	ldrb	r3, [r3, #1]
 8002f10:	041b      	lsls	r3, r3, #16
 8002f12:	431a      	orrs	r2, r3
 8002f14:	4b33      	ldr	r3, [pc, #204]	; (8002fe4 <MX_LWIP_Init+0x244>)
 8002f16:	789b      	ldrb	r3, [r3, #2]
 8002f18:	021b      	lsls	r3, r3, #8
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	4a31      	ldr	r2, [pc, #196]	; (8002fe4 <MX_LWIP_Init+0x244>)
 8002f1e:	78d2      	ldrb	r2, [r2, #3]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	061a      	lsls	r2, r3, #24
 8002f24:	4b2f      	ldr	r3, [pc, #188]	; (8002fe4 <MX_LWIP_Init+0x244>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	0619      	lsls	r1, r3, #24
 8002f2a:	4b2e      	ldr	r3, [pc, #184]	; (8002fe4 <MX_LWIP_Init+0x244>)
 8002f2c:	785b      	ldrb	r3, [r3, #1]
 8002f2e:	041b      	lsls	r3, r3, #16
 8002f30:	4319      	orrs	r1, r3
 8002f32:	4b2c      	ldr	r3, [pc, #176]	; (8002fe4 <MX_LWIP_Init+0x244>)
 8002f34:	789b      	ldrb	r3, [r3, #2]
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	492a      	ldr	r1, [pc, #168]	; (8002fe4 <MX_LWIP_Init+0x244>)
 8002f3c:	78c9      	ldrb	r1, [r1, #3]
 8002f3e:	430b      	orrs	r3, r1
 8002f40:	021b      	lsls	r3, r3, #8
 8002f42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002f46:	431a      	orrs	r2, r3
 8002f48:	4b26      	ldr	r3, [pc, #152]	; (8002fe4 <MX_LWIP_Init+0x244>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	0619      	lsls	r1, r3, #24
 8002f4e:	4b25      	ldr	r3, [pc, #148]	; (8002fe4 <MX_LWIP_Init+0x244>)
 8002f50:	785b      	ldrb	r3, [r3, #1]
 8002f52:	041b      	lsls	r3, r3, #16
 8002f54:	4319      	orrs	r1, r3
 8002f56:	4b23      	ldr	r3, [pc, #140]	; (8002fe4 <MX_LWIP_Init+0x244>)
 8002f58:	789b      	ldrb	r3, [r3, #2]
 8002f5a:	021b      	lsls	r3, r3, #8
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	4921      	ldr	r1, [pc, #132]	; (8002fe4 <MX_LWIP_Init+0x244>)
 8002f60:	78c9      	ldrb	r1, [r1, #3]
 8002f62:	430b      	orrs	r3, r1
 8002f64:	0a1b      	lsrs	r3, r3, #8
 8002f66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <MX_LWIP_Init+0x244>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	0619      	lsls	r1, r3, #24
 8002f72:	4b1c      	ldr	r3, [pc, #112]	; (8002fe4 <MX_LWIP_Init+0x244>)
 8002f74:	785b      	ldrb	r3, [r3, #1]
 8002f76:	041b      	lsls	r3, r3, #16
 8002f78:	4319      	orrs	r1, r3
 8002f7a:	4b1a      	ldr	r3, [pc, #104]	; (8002fe4 <MX_LWIP_Init+0x244>)
 8002f7c:	789b      	ldrb	r3, [r3, #2]
 8002f7e:	021b      	lsls	r3, r3, #8
 8002f80:	430b      	orrs	r3, r1
 8002f82:	4918      	ldr	r1, [pc, #96]	; (8002fe4 <MX_LWIP_Init+0x244>)
 8002f84:	78c9      	ldrb	r1, [r1, #3]
 8002f86:	430b      	orrs	r3, r1
 8002f88:	0e1b      	lsrs	r3, r3, #24
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	4a18      	ldr	r2, [pc, #96]	; (8002ff0 <MX_LWIP_Init+0x250>)
 8002f8e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8002f90:	4b18      	ldr	r3, [pc, #96]	; (8002ff4 <MX_LWIP_Init+0x254>)
 8002f92:	9302      	str	r3, [sp, #8]
 8002f94:	4b18      	ldr	r3, [pc, #96]	; (8002ff8 <MX_LWIP_Init+0x258>)
 8002f96:	9301      	str	r3, [sp, #4]
 8002f98:	2300      	movs	r3, #0
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	4b14      	ldr	r3, [pc, #80]	; (8002ff0 <MX_LWIP_Init+0x250>)
 8002f9e:	4a13      	ldr	r2, [pc, #76]	; (8002fec <MX_LWIP_Init+0x24c>)
 8002fa0:	4911      	ldr	r1, [pc, #68]	; (8002fe8 <MX_LWIP_Init+0x248>)
 8002fa2:	4816      	ldr	r0, [pc, #88]	; (8002ffc <MX_LWIP_Init+0x25c>)
 8002fa4:	f001 f926 	bl	80041f4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8002fa8:	4814      	ldr	r0, [pc, #80]	; (8002ffc <MX_LWIP_Init+0x25c>)
 8002faa:	f001 fad5 	bl	8004558 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8002fae:	4b13      	ldr	r3, [pc, #76]	; (8002ffc <MX_LWIP_Init+0x25c>)
 8002fb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002fb4:	089b      	lsrs	r3, r3, #2
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8002fc0:	480e      	ldr	r0, [pc, #56]	; (8002ffc <MX_LWIP_Init+0x25c>)
 8002fc2:	f001 fad9 	bl	8004578 <netif_set_up>
 8002fc6:	e002      	b.n	8002fce <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8002fc8:	480c      	ldr	r0, [pc, #48]	; (8002ffc <MX_LWIP_Init+0x25c>)
 8002fca:	f001 fb41 	bl	8004650 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8002fce:	490c      	ldr	r1, [pc, #48]	; (8003000 <MX_LWIP_Init+0x260>)
 8002fd0:	480a      	ldr	r0, [pc, #40]	; (8002ffc <MX_LWIP_Init+0x25c>)
 8002fd2:	f001 fbd3 	bl	800477c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8002fd6:	bf00      	nop
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20000234 	.word	0x20000234
 8002fe0:	20000238 	.word	0x20000238
 8002fe4:	2000023c 	.word	0x2000023c
 8002fe8:	20000228 	.word	0x20000228
 8002fec:	2000022c 	.word	0x2000022c
 8002ff0:	20000230 	.word	0x20000230
 8002ff4:	0800d039 	.word	0x0800d039
 8002ff8:	08003319 	.word	0x08003319
 8002ffc:	200001f4 	.word	0x200001f4
 8003000:	08003005 	.word	0x08003005

08003004 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <SCB_InvalidateDCache_by_Addr>:
{
 8003018:	b480      	push	{r7}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800302a:	2320      	movs	r3, #32
 800302c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800302e:	f3bf 8f4f 	dsb	sy
}
 8003032:	bf00      	nop
    while (op_size > 0) {
 8003034:	e00b      	b.n	800304e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8003036:	4a0d      	ldr	r2, [pc, #52]	; (800306c <SCB_InvalidateDCache_by_Addr+0x54>)
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4413      	add	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2b00      	cmp	r3, #0
 8003052:	dcf0      	bgt.n	8003036 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003054:	f3bf 8f4f 	dsb	sy
}
 8003058:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800305a:	f3bf 8f6f 	isb	sy
}
 800305e:	bf00      	nop
}
 8003060:	bf00      	nop
 8003062:	371c      	adds	r7, #28
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800307c:	4b40      	ldr	r3, [pc, #256]	; (8003180 <low_level_init+0x110>)
 800307e:	4a41      	ldr	r2, [pc, #260]	; (8003184 <low_level_init+0x114>)
 8003080:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003082:	2300      	movs	r3, #0
 8003084:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800308a:	23e1      	movs	r3, #225	; 0xe1
 800308c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800308e:	2300      	movs	r3, #0
 8003090:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003092:	2300      	movs	r3, #0
 8003094:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003096:	2300      	movs	r3, #0
 8003098:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800309a:	4a39      	ldr	r2, [pc, #228]	; (8003180 <low_level_init+0x110>)
 800309c:	f107 0308 	add.w	r3, r7, #8
 80030a0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80030a2:	4b37      	ldr	r3, [pc, #220]	; (8003180 <low_level_init+0x110>)
 80030a4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80030a8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80030aa:	4b35      	ldr	r3, [pc, #212]	; (8003180 <low_level_init+0x110>)
 80030ac:	4a36      	ldr	r2, [pc, #216]	; (8003188 <low_level_init+0x118>)
 80030ae:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80030b0:	4b33      	ldr	r3, [pc, #204]	; (8003180 <low_level_init+0x110>)
 80030b2:	4a36      	ldr	r2, [pc, #216]	; (800318c <low_level_init+0x11c>)
 80030b4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80030b6:	4b32      	ldr	r3, [pc, #200]	; (8003180 <low_level_init+0x110>)
 80030b8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80030bc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80030be:	4830      	ldr	r0, [pc, #192]	; (8003180 <low_level_init+0x110>)
 80030c0:	f7fd ff2e 	bl	8000f20 <HAL_ETH_Init>
 80030c4:	4603      	mov	r3, r0
 80030c6:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80030c8:	2238      	movs	r2, #56	; 0x38
 80030ca:	2100      	movs	r1, #0
 80030cc:	4830      	ldr	r0, [pc, #192]	; (8003190 <low_level_init+0x120>)
 80030ce:	f00a f8cb 	bl	800d268 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80030d2:	4b2f      	ldr	r3, [pc, #188]	; (8003190 <low_level_init+0x120>)
 80030d4:	2221      	movs	r2, #33	; 0x21
 80030d6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80030d8:	4b2d      	ldr	r3, [pc, #180]	; (8003190 <low_level_init+0x120>)
 80030da:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80030de:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80030e0:	4b2b      	ldr	r3, [pc, #172]	; (8003190 <low_level_init+0x120>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80030e6:	482b      	ldr	r0, [pc, #172]	; (8003194 <low_level_init+0x124>)
 80030e8:	f000 ff4c 	bl	8003f84 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2206      	movs	r2, #6
 80030f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80030f4:	4b22      	ldr	r3, [pc, #136]	; (8003180 <low_level_init+0x110>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	781a      	ldrb	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003100:	4b1f      	ldr	r3, [pc, #124]	; (8003180 <low_level_init+0x110>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	785a      	ldrb	r2, [r3, #1]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800310c:	4b1c      	ldr	r3, [pc, #112]	; (8003180 <low_level_init+0x110>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	789a      	ldrb	r2, [r3, #2]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003118:	4b19      	ldr	r3, [pc, #100]	; (8003180 <low_level_init+0x110>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	78da      	ldrb	r2, [r3, #3]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003124:	4b16      	ldr	r3, [pc, #88]	; (8003180 <low_level_init+0x110>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	791a      	ldrb	r2, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003130:	4b13      	ldr	r3, [pc, #76]	; (8003180 <low_level_init+0x110>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	795a      	ldrb	r2, [r3, #5]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003142:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800314a:	f043 030a 	orr.w	r3, r3, #10
 800314e:	b2da      	uxtb	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003156:	4910      	ldr	r1, [pc, #64]	; (8003198 <low_level_init+0x128>)
 8003158:	4810      	ldr	r0, [pc, #64]	; (800319c <low_level_init+0x12c>)
 800315a:	f7fd fc48 	bl	80009ee <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800315e:	480f      	ldr	r0, [pc, #60]	; (800319c <low_level_init+0x12c>)
 8003160:	f7fd fc77 	bl	8000a52 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d103      	bne.n	8003172 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fa2a 	bl	80035c4 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003170:	e001      	b.n	8003176 <low_level_init+0x106>
    Error_Handler();
 8003172:	f7fd fad5 	bl	8000720 <Error_Handler>
}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20004bcc 	.word	0x20004bcc
 8003184:	40028000 	.word	0x40028000
 8003188:	20000130 	.word	0x20000130
 800318c:	20000090 	.word	0x20000090
 8003190:	20004c7c 	.word	0x20004c7c
 8003194:	08010d20 	.word	0x08010d20
 8003198:	2000000c 	.word	0x2000000c
 800319c:	20004cb4 	.word	0x20004cb4

080031a0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b092      	sub	sp, #72	; 0x48
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80031b8:	f107 030c 	add.w	r3, r7, #12
 80031bc:	2230      	movs	r2, #48	; 0x30
 80031be:	2100      	movs	r1, #0
 80031c0:	4618      	mov	r0, r3
 80031c2:	f00a f851 	bl	800d268 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80031c6:	f107 030c 	add.w	r3, r7, #12
 80031ca:	2230      	movs	r2, #48	; 0x30
 80031cc:	2100      	movs	r1, #0
 80031ce:	4618      	mov	r0, r3
 80031d0:	f00a f84a 	bl	800d268 <memset>

  for(q = p; q != NULL; q = q->next)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	643b      	str	r3, [r7, #64]	; 0x40
 80031d8:	e045      	b.n	8003266 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80031da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d902      	bls.n	80031e6 <low_level_output+0x46>
      return ERR_IF;
 80031e0:	f06f 030b 	mvn.w	r3, #11
 80031e4:	e055      	b.n	8003292 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80031e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e8:	6859      	ldr	r1, [r3, #4]
 80031ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031ec:	4613      	mov	r3, r2
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	3348      	adds	r3, #72	; 0x48
 80031f6:	443b      	add	r3, r7
 80031f8:	3b3c      	subs	r3, #60	; 0x3c
 80031fa:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80031fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031fe:	895b      	ldrh	r3, [r3, #10]
 8003200:	4619      	mov	r1, r3
 8003202:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003204:	4613      	mov	r3, r2
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	3348      	adds	r3, #72	; 0x48
 800320e:	443b      	add	r3, r7
 8003210:	3b38      	subs	r3, #56	; 0x38
 8003212:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003216:	2b00      	cmp	r3, #0
 8003218:	d011      	beq.n	800323e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800321a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800321c:	1e5a      	subs	r2, r3, #1
 800321e:	f107 000c 	add.w	r0, r7, #12
 8003222:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003224:	460b      	mov	r3, r1
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	440b      	add	r3, r1
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	18c1      	adds	r1, r0, r3
 800322e:	4613      	mov	r3, r2
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	3348      	adds	r3, #72	; 0x48
 8003238:	443b      	add	r3, r7
 800323a:	3b34      	subs	r3, #52	; 0x34
 800323c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800323e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8003246:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003248:	4613      	mov	r3, r2
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	3348      	adds	r3, #72	; 0x48
 8003252:	443b      	add	r3, r7
 8003254:	3b34      	subs	r3, #52	; 0x34
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]
    }

    i++;
 800325a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800325c:	3301      	adds	r3, #1
 800325e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8003260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	643b      	str	r3, [r7, #64]	; 0x40
 8003266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1b6      	bne.n	80031da <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	891b      	ldrh	r3, [r3, #8]
 8003270:	461a      	mov	r2, r3
 8003272:	4b0a      	ldr	r3, [pc, #40]	; (800329c <low_level_output+0xfc>)
 8003274:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8003276:	4a09      	ldr	r2, [pc, #36]	; (800329c <low_level_output+0xfc>)
 8003278:	f107 030c 	add.w	r3, r7, #12
 800327c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800327e:	4a07      	ldr	r2, [pc, #28]	; (800329c <low_level_output+0xfc>)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8003284:	2214      	movs	r2, #20
 8003286:	4905      	ldr	r1, [pc, #20]	; (800329c <low_level_output+0xfc>)
 8003288:	4805      	ldr	r0, [pc, #20]	; (80032a0 <low_level_output+0x100>)
 800328a:	f7fd ff9b 	bl	80011c4 <HAL_ETH_Transmit>

  return errval;
 800328e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8003292:	4618      	mov	r0, r3
 8003294:	3748      	adds	r7, #72	; 0x48
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	20004c7c 	.word	0x20004c7c
 80032a0:	20004bcc 	.word	0x20004bcc

080032a4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80032ac:	2300      	movs	r3, #0
 80032ae:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80032b0:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <low_level_input+0x2c>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d105      	bne.n	80032c4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80032b8:	f107 030c 	add.w	r3, r7, #12
 80032bc:	4619      	mov	r1, r3
 80032be:	4805      	ldr	r0, [pc, #20]	; (80032d4 <low_level_input+0x30>)
 80032c0:	f7fe f814 	bl	80012ec <HAL_ETH_ReadData>
  }

  return p;
 80032c4:	68fb      	ldr	r3, [r7, #12]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20004bc8 	.word	0x20004bc8
 80032d4:	20004bcc 	.word	0x20004bcc

080032d8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff ffdd 	bl	80032a4 <low_level_input>
 80032ea:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	4798      	blx	r3
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f001 fdba 	bl	8004e7c <pbuf_free>
      }
    }
  } while(p!=NULL);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1ea      	bne.n	80032e4 <ethernetif_input+0xc>
}
 800330e:	bf00      	nop
 8003310:	bf00      	nop
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <ethernetif_init+0x1c>
 8003326:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <ethernetif_init+0x48>)
 8003328:	f240 127b 	movw	r2, #379	; 0x17b
 800332c:	490d      	ldr	r1, [pc, #52]	; (8003364 <ethernetif_init+0x4c>)
 800332e:	480e      	ldr	r0, [pc, #56]	; (8003368 <ethernetif_init+0x50>)
 8003330:	f009 ffa2 	bl	800d278 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2273      	movs	r2, #115	; 0x73
 8003338:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2274      	movs	r2, #116	; 0x74
 8003340:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a09      	ldr	r2, [pc, #36]	; (800336c <ethernetif_init+0x54>)
 8003348:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a08      	ldr	r2, [pc, #32]	; (8003370 <ethernetif_init+0x58>)
 800334e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7ff fe8d 	bl	8003070 <low_level_init>

  return ERR_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	0800e330 	.word	0x0800e330
 8003364:	0800e34c 	.word	0x0800e34c
 8003368:	0800e35c 	.word	0x0800e35c
 800336c:	0800b4f1 	.word	0x0800b4f1
 8003370:	080031a1 	.word	0x080031a1

08003374 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003380:	68f9      	ldr	r1, [r7, #12]
 8003382:	4807      	ldr	r0, [pc, #28]	; (80033a0 <pbuf_free_custom+0x2c>)
 8003384:	f000 fee0 	bl	8004148 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <pbuf_free_custom+0x30>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d102      	bne.n	8003396 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8003390:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <pbuf_free_custom+0x30>)
 8003392:	2200      	movs	r2, #0
 8003394:	701a      	strb	r2, [r3, #0]
  }
}
 8003396:	bf00      	nop
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	08010d20 	.word	0x08010d20
 80033a4:	20004bc8 	.word	0x20004bc8

080033a8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80033ac:	f7fd fc76 	bl	8000c9c <HAL_GetTick>
 80033b0:	4603      	mov	r3, r0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08e      	sub	sp, #56	; 0x38
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a4e      	ldr	r2, [pc, #312]	; (8003510 <HAL_ETH_MspInit+0x158>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	f040 8096 	bne.w	8003508 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80033dc:	4b4d      	ldr	r3, [pc, #308]	; (8003514 <HAL_ETH_MspInit+0x15c>)
 80033de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e0:	4a4c      	ldr	r2, [pc, #304]	; (8003514 <HAL_ETH_MspInit+0x15c>)
 80033e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033e6:	6313      	str	r3, [r2, #48]	; 0x30
 80033e8:	4b4a      	ldr	r3, [pc, #296]	; (8003514 <HAL_ETH_MspInit+0x15c>)
 80033ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f0:	623b      	str	r3, [r7, #32]
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	4b47      	ldr	r3, [pc, #284]	; (8003514 <HAL_ETH_MspInit+0x15c>)
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	4a46      	ldr	r2, [pc, #280]	; (8003514 <HAL_ETH_MspInit+0x15c>)
 80033fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033fe:	6313      	str	r3, [r2, #48]	; 0x30
 8003400:	4b44      	ldr	r3, [pc, #272]	; (8003514 <HAL_ETH_MspInit+0x15c>)
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003408:	61fb      	str	r3, [r7, #28]
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	4b41      	ldr	r3, [pc, #260]	; (8003514 <HAL_ETH_MspInit+0x15c>)
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	4a40      	ldr	r2, [pc, #256]	; (8003514 <HAL_ETH_MspInit+0x15c>)
 8003412:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003416:	6313      	str	r3, [r2, #48]	; 0x30
 8003418:	4b3e      	ldr	r3, [pc, #248]	; (8003514 <HAL_ETH_MspInit+0x15c>)
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003420:	61bb      	str	r3, [r7, #24]
 8003422:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003424:	4b3b      	ldr	r3, [pc, #236]	; (8003514 <HAL_ETH_MspInit+0x15c>)
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	4a3a      	ldr	r2, [pc, #232]	; (8003514 <HAL_ETH_MspInit+0x15c>)
 800342a:	f043 0304 	orr.w	r3, r3, #4
 800342e:	6313      	str	r3, [r2, #48]	; 0x30
 8003430:	4b38      	ldr	r3, [pc, #224]	; (8003514 <HAL_ETH_MspInit+0x15c>)
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	617b      	str	r3, [r7, #20]
 800343a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800343c:	4b35      	ldr	r3, [pc, #212]	; (8003514 <HAL_ETH_MspInit+0x15c>)
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	4a34      	ldr	r2, [pc, #208]	; (8003514 <HAL_ETH_MspInit+0x15c>)
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	6313      	str	r3, [r2, #48]	; 0x30
 8003448:	4b32      	ldr	r3, [pc, #200]	; (8003514 <HAL_ETH_MspInit+0x15c>)
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003454:	4b2f      	ldr	r3, [pc, #188]	; (8003514 <HAL_ETH_MspInit+0x15c>)
 8003456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003458:	4a2e      	ldr	r2, [pc, #184]	; (8003514 <HAL_ETH_MspInit+0x15c>)
 800345a:	f043 0302 	orr.w	r3, r3, #2
 800345e:	6313      	str	r3, [r2, #48]	; 0x30
 8003460:	4b2c      	ldr	r3, [pc, #176]	; (8003514 <HAL_ETH_MspInit+0x15c>)
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800346c:	4b29      	ldr	r3, [pc, #164]	; (8003514 <HAL_ETH_MspInit+0x15c>)
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003470:	4a28      	ldr	r2, [pc, #160]	; (8003514 <HAL_ETH_MspInit+0x15c>)
 8003472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003476:	6313      	str	r3, [r2, #48]	; 0x30
 8003478:	4b26      	ldr	r3, [pc, #152]	; (8003514 <HAL_ETH_MspInit+0x15c>)
 800347a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003484:	2332      	movs	r3, #50	; 0x32
 8003486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003488:	2302      	movs	r3, #2
 800348a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348c:	2300      	movs	r3, #0
 800348e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003490:	2303      	movs	r3, #3
 8003492:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003494:	230b      	movs	r3, #11
 8003496:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800349c:	4619      	mov	r1, r3
 800349e:	481e      	ldr	r0, [pc, #120]	; (8003518 <HAL_ETH_MspInit+0x160>)
 80034a0:	f7fe fe70 	bl	8002184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80034a4:	2386      	movs	r3, #134	; 0x86
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a8:	2302      	movs	r3, #2
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b0:	2303      	movs	r3, #3
 80034b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034b4:	230b      	movs	r3, #11
 80034b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034bc:	4619      	mov	r1, r3
 80034be:	4817      	ldr	r0, [pc, #92]	; (800351c <HAL_ETH_MspInit+0x164>)
 80034c0:	f7fe fe60 	bl	8002184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80034c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ca:	2302      	movs	r3, #2
 80034cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d2:	2303      	movs	r3, #3
 80034d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034d6:	230b      	movs	r3, #11
 80034d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034de:	4619      	mov	r1, r3
 80034e0:	480f      	ldr	r0, [pc, #60]	; (8003520 <HAL_ETH_MspInit+0x168>)
 80034e2:	f7fe fe4f 	bl	8002184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80034e6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80034ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ec:	2302      	movs	r3, #2
 80034ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f4:	2303      	movs	r3, #3
 80034f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034f8:	230b      	movs	r3, #11
 80034fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003500:	4619      	mov	r1, r3
 8003502:	4808      	ldr	r0, [pc, #32]	; (8003524 <HAL_ETH_MspInit+0x16c>)
 8003504:	f7fe fe3e 	bl	8002184 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003508:	bf00      	nop
 800350a:	3738      	adds	r7, #56	; 0x38
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40028000 	.word	0x40028000
 8003514:	40023800 	.word	0x40023800
 8003518:	40020800 	.word	0x40020800
 800351c:	40020000 	.word	0x40020000
 8003520:	40020400 	.word	0x40020400
 8003524:	40021800 	.word	0x40021800

08003528 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800352c:	4802      	ldr	r0, [pc, #8]	; (8003538 <ETH_PHY_IO_Init+0x10>)
 800352e:	f7fe f9c7 	bl	80018c0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20004bcc 	.word	0x20004bcc

0800353c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  return 0;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	68f9      	ldr	r1, [r7, #12]
 800355e:	4807      	ldr	r0, [pc, #28]	; (800357c <ETH_PHY_IO_ReadReg+0x30>)
 8003560:	f7fe f808 	bl	8001574 <HAL_ETH_ReadPHYRegister>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800356a:	f04f 33ff 	mov.w	r3, #4294967295
 800356e:	e000      	b.n	8003572 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20004bcc 	.word	0x20004bcc

08003580 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	68f9      	ldr	r1, [r7, #12]
 8003592:	4807      	ldr	r0, [pc, #28]	; (80035b0 <ETH_PHY_IO_WriteReg+0x30>)
 8003594:	f7fe f839 	bl	800160a <HAL_ETH_WritePHYRegister>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800359e:	f04f 33ff 	mov.w	r3, #4294967295
 80035a2:	e000      	b.n	80035a6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	20004bcc 	.word	0x20004bcc

080035b4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80035b8:	f7fd fb70 	bl	8000c9c <HAL_GetTick>
 80035bc:	4603      	mov	r3, r0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b0a0      	sub	sp, #128	; 0x80
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80035cc:	f107 030c 	add.w	r3, r7, #12
 80035d0:	2264      	movs	r2, #100	; 0x64
 80035d2:	2100      	movs	r1, #0
 80035d4:	4618      	mov	r0, r3
 80035d6:	f009 fe47 	bl	800d268 <memset>
  int32_t PHYLinkState = 0;
 80035da:	2300      	movs	r3, #0
 80035dc:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80035e2:	2300      	movs	r3, #0
 80035e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80035e6:	2300      	movs	r3, #0
 80035e8:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80035ea:	483a      	ldr	r0, [pc, #232]	; (80036d4 <ethernet_link_check_state+0x110>)
 80035ec:	f7fd fa7e 	bl	8000aec <LAN8742_GetLinkState>
 80035f0:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80035f8:	089b      	lsrs	r3, r3, #2
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00c      	beq.n	800361e <ethernet_link_check_state+0x5a>
 8003604:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003606:	2b01      	cmp	r3, #1
 8003608:	dc09      	bgt.n	800361e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800360a:	4833      	ldr	r0, [pc, #204]	; (80036d8 <ethernet_link_check_state+0x114>)
 800360c:	f7fd fd81 	bl	8001112 <HAL_ETH_Stop>
    netif_set_down(netif);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f001 f81d 	bl	8004650 <netif_set_down>
    netif_set_link_down(netif);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f001 f880 	bl	800471c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800361c:	e055      	b.n	80036ca <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d14e      	bne.n	80036ca <ethernet_link_check_state+0x106>
 800362c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800362e:	2b01      	cmp	r3, #1
 8003630:	dd4b      	ble.n	80036ca <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8003632:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003634:	3b02      	subs	r3, #2
 8003636:	2b03      	cmp	r3, #3
 8003638:	d82a      	bhi.n	8003690 <ethernet_link_check_state+0xcc>
 800363a:	a201      	add	r2, pc, #4	; (adr r2, 8003640 <ethernet_link_check_state+0x7c>)
 800363c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003640:	08003651 	.word	0x08003651
 8003644:	08003663 	.word	0x08003663
 8003648:	08003673 	.word	0x08003673
 800364c:	08003683 	.word	0x08003683
      duplex = ETH_FULLDUPLEX_MODE;
 8003650:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003654:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8003656:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800365a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800365c:	2301      	movs	r3, #1
 800365e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003660:	e017      	b.n	8003692 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003662:	2300      	movs	r3, #0
 8003664:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8003666:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800366a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800366c:	2301      	movs	r3, #1
 800366e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003670:	e00f      	b.n	8003692 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8003672:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003676:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8003678:	2300      	movs	r3, #0
 800367a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800367c:	2301      	movs	r3, #1
 800367e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003680:	e007      	b.n	8003692 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003682:	2300      	movs	r3, #0
 8003684:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8003686:	2300      	movs	r3, #0
 8003688:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800368a:	2301      	movs	r3, #1
 800368c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800368e:	e000      	b.n	8003692 <ethernet_link_check_state+0xce>
      break;
 8003690:	bf00      	nop
    if(linkchanged)
 8003692:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003694:	2b00      	cmp	r3, #0
 8003696:	d018      	beq.n	80036ca <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003698:	f107 030c 	add.w	r3, r7, #12
 800369c:	4619      	mov	r1, r3
 800369e:	480e      	ldr	r0, [pc, #56]	; (80036d8 <ethernet_link_check_state+0x114>)
 80036a0:	f7fd fffc 	bl	800169c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80036a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80036a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036aa:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80036ac:	f107 030c 	add.w	r3, r7, #12
 80036b0:	4619      	mov	r1, r3
 80036b2:	4809      	ldr	r0, [pc, #36]	; (80036d8 <ethernet_link_check_state+0x114>)
 80036b4:	f7fe f8e9 	bl	800188a <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80036b8:	4807      	ldr	r0, [pc, #28]	; (80036d8 <ethernet_link_check_state+0x114>)
 80036ba:	f7fd fccb 	bl	8001054 <HAL_ETH_Start>
      netif_set_up(netif);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 ff5a 	bl	8004578 <netif_set_up>
      netif_set_link_up(netif);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fff5 	bl	80046b4 <netif_set_link_up>
}
 80036ca:	bf00      	nop
 80036cc:	3780      	adds	r7, #128	; 0x80
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20004cb4 	.word	0x20004cb4
 80036d8:	20004bcc 	.word	0x20004bcc

080036dc <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80036e4:	4812      	ldr	r0, [pc, #72]	; (8003730 <HAL_ETH_RxAllocateCallback+0x54>)
 80036e6:	f000 fcc1 	bl	800406c <memp_malloc_pool>
 80036ea:	60f8      	str	r0, [r7, #12]
  if (p)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d014      	beq.n	800371c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f103 0220 	add.w	r2, r3, #32
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4a0d      	ldr	r2, [pc, #52]	; (8003734 <HAL_ETH_RxAllocateCallback+0x58>)
 8003700:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800370a:	9201      	str	r2, [sp, #4]
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2241      	movs	r2, #65	; 0x41
 8003712:	2100      	movs	r1, #0
 8003714:	2000      	movs	r0, #0
 8003716:	f001 f9f7 	bl	8004b08 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800371a:	e005      	b.n	8003728 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800371c:	4b06      	ldr	r3, [pc, #24]	; (8003738 <HAL_ETH_RxAllocateCallback+0x5c>)
 800371e:	2201      	movs	r2, #1
 8003720:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
}
 8003728:	bf00      	nop
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	08010d20 	.word	0x08010d20
 8003734:	08003375 	.word	0x08003375
 8003738:	20004bc8 	.word	0x20004bc8

0800373c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3b20      	subs	r3, #32
 800375a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	2200      	movs	r2, #0
 8003766:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	887a      	ldrh	r2, [r7, #2]
 800376c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d103      	bne.n	800377e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	69fa      	ldr	r2, [r7, #28]
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	e003      	b.n	8003786 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69fa      	ldr	r2, [r7, #28]
 8003784:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	69fa      	ldr	r2, [r7, #28]
 800378a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	61fb      	str	r3, [r7, #28]
 8003792:	e009      	b.n	80037a8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	891a      	ldrh	r2, [r3, #8]
 8003798:	887b      	ldrh	r3, [r7, #2]
 800379a:	4413      	add	r3, r2
 800379c:	b29a      	uxth	r2, r3
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	61fb      	str	r3, [r7, #28]
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f2      	bne.n	8003794 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80037ae:	887b      	ldrh	r3, [r7, #2]
 80037b0:	4619      	mov	r1, r3
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff fc30 	bl	8003018 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 80037b8:	bf00      	nop
 80037ba:	3720      	adds	r7, #32
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80037ca:	88fb      	ldrh	r3, [r7, #6]
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	b21a      	sxth	r2, r3
 80037d0:	88fb      	ldrh	r3, [r7, #6]
 80037d2:	0a1b      	lsrs	r3, r3, #8
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	b21b      	sxth	r3, r3
 80037d8:	4313      	orrs	r3, r2
 80037da:	b21b      	sxth	r3, r3
 80037dc:	b29b      	uxth	r3, r3
}
 80037de:	4618      	mov	r0, r3
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	061a      	lsls	r2, r3, #24
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	021b      	lsls	r3, r3, #8
 80037fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	0a1b      	lsrs	r3, r3, #8
 8003804:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	0e1b      	lsrs	r3, r3, #24
 800380e:	4313      	orrs	r3, r2
}
 8003810:	4618      	mov	r0, r3
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003822:	2300      	movs	r3, #0
 8003824:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003826:	f000 f8d5 	bl	80039d4 <mem_init>
  memp_init();
 800382a:	f000 fbdb 	bl	8003fe4 <memp_init>
  pbuf_init();
  netif_init();
 800382e:	f000 fcd9 	bl	80041e4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003832:	f007 f857 	bl	800a8e4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003836:	f001 fdaf 	bl	8005398 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800383a:	f006 ffc9 	bl	800a7d0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8003852:	4b05      	ldr	r3, [pc, #20]	; (8003868 <ptr_to_mem+0x20>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	88fb      	ldrh	r3, [r7, #6]
 8003858:	4413      	add	r3, r2
}
 800385a:	4618      	mov	r0, r3
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20008500 	.word	0x20008500

0800386c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <mem_to_ptr+0x20>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	b29b      	uxth	r3, r3
}
 800387e:	4618      	mov	r0, r3
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	20008500 	.word	0x20008500

08003890 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003890:	b590      	push	{r4, r7, lr}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003898:	4b45      	ldr	r3, [pc, #276]	; (80039b0 <plug_holes+0x120>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d206      	bcs.n	80038b0 <plug_holes+0x20>
 80038a2:	4b44      	ldr	r3, [pc, #272]	; (80039b4 <plug_holes+0x124>)
 80038a4:	f240 12df 	movw	r2, #479	; 0x1df
 80038a8:	4943      	ldr	r1, [pc, #268]	; (80039b8 <plug_holes+0x128>)
 80038aa:	4844      	ldr	r0, [pc, #272]	; (80039bc <plug_holes+0x12c>)
 80038ac:	f009 fce4 	bl	800d278 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80038b0:	4b43      	ldr	r3, [pc, #268]	; (80039c0 <plug_holes+0x130>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d306      	bcc.n	80038c8 <plug_holes+0x38>
 80038ba:	4b3e      	ldr	r3, [pc, #248]	; (80039b4 <plug_holes+0x124>)
 80038bc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80038c0:	4940      	ldr	r1, [pc, #256]	; (80039c4 <plug_holes+0x134>)
 80038c2:	483e      	ldr	r0, [pc, #248]	; (80039bc <plug_holes+0x12c>)
 80038c4:	f009 fcd8 	bl	800d278 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	791b      	ldrb	r3, [r3, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d006      	beq.n	80038de <plug_holes+0x4e>
 80038d0:	4b38      	ldr	r3, [pc, #224]	; (80039b4 <plug_holes+0x124>)
 80038d2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80038d6:	493c      	ldr	r1, [pc, #240]	; (80039c8 <plug_holes+0x138>)
 80038d8:	4838      	ldr	r0, [pc, #224]	; (80039bc <plug_holes+0x12c>)
 80038da:	f009 fccd 	bl	800d278 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 80038e6:	d906      	bls.n	80038f6 <plug_holes+0x66>
 80038e8:	4b32      	ldr	r3, [pc, #200]	; (80039b4 <plug_holes+0x124>)
 80038ea:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80038ee:	4937      	ldr	r1, [pc, #220]	; (80039cc <plug_holes+0x13c>)
 80038f0:	4832      	ldr	r0, [pc, #200]	; (80039bc <plug_holes+0x12c>)
 80038f2:	f009 fcc1 	bl	800d278 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff ffa4 	bl	8003848 <ptr_to_mem>
 8003900:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	429a      	cmp	r2, r3
 8003908:	d024      	beq.n	8003954 <plug_holes+0xc4>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	791b      	ldrb	r3, [r3, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d120      	bne.n	8003954 <plug_holes+0xc4>
 8003912:	4b2b      	ldr	r3, [pc, #172]	; (80039c0 <plug_holes+0x130>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	429a      	cmp	r2, r3
 800391a:	d01b      	beq.n	8003954 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800391c:	4b2c      	ldr	r3, [pc, #176]	; (80039d0 <plug_holes+0x140>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	429a      	cmp	r2, r3
 8003924:	d102      	bne.n	800392c <plug_holes+0x9c>
      lfree = mem;
 8003926:	4a2a      	ldr	r2, [pc, #168]	; (80039d0 <plug_holes+0x140>)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	881a      	ldrh	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 800393c:	d00a      	beq.n	8003954 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff ff80 	bl	8003848 <ptr_to_mem>
 8003948:	4604      	mov	r4, r0
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7ff ff8e 	bl	800386c <mem_to_ptr>
 8003950:	4603      	mov	r3, r0
 8003952:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	885b      	ldrh	r3, [r3, #2]
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff ff75 	bl	8003848 <ptr_to_mem>
 800395e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	429a      	cmp	r2, r3
 8003966:	d01f      	beq.n	80039a8 <plug_holes+0x118>
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	791b      	ldrb	r3, [r3, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d11b      	bne.n	80039a8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003970:	4b17      	ldr	r3, [pc, #92]	; (80039d0 <plug_holes+0x140>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	429a      	cmp	r2, r3
 8003978:	d102      	bne.n	8003980 <plug_holes+0xf0>
      lfree = pmem;
 800397a:	4a15      	ldr	r2, [pc, #84]	; (80039d0 <plug_holes+0x140>)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	881a      	ldrh	r2, [r3, #0]
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8003990:	d00a      	beq.n	80039a8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff ff56 	bl	8003848 <ptr_to_mem>
 800399c:	4604      	mov	r4, r0
 800399e:	68b8      	ldr	r0, [r7, #8]
 80039a0:	f7ff ff64 	bl	800386c <mem_to_ptr>
 80039a4:	4603      	mov	r3, r0
 80039a6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80039a8:	bf00      	nop
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd90      	pop	{r4, r7, pc}
 80039b0:	20008500 	.word	0x20008500
 80039b4:	0800e384 	.word	0x0800e384
 80039b8:	0800e3b4 	.word	0x0800e3b4
 80039bc:	0800e3cc 	.word	0x0800e3cc
 80039c0:	20008504 	.word	0x20008504
 80039c4:	0800e3f4 	.word	0x0800e3f4
 80039c8:	0800e410 	.word	0x0800e410
 80039cc:	0800e42c 	.word	0x0800e42c
 80039d0:	20008508 	.word	0x20008508

080039d4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80039da:	4b18      	ldr	r3, [pc, #96]	; (8003a3c <mem_init+0x68>)
 80039dc:	3303      	adds	r3, #3
 80039de:	f023 0303 	bic.w	r3, r3, #3
 80039e2:	461a      	mov	r2, r3
 80039e4:	4b16      	ldr	r3, [pc, #88]	; (8003a40 <mem_init+0x6c>)
 80039e6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80039e8:	4b15      	ldr	r3, [pc, #84]	; (8003a40 <mem_init+0x6c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80039f4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8003a02:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8003a06:	f7ff ff1f 	bl	8003848 <ptr_to_mem>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	4a0d      	ldr	r2, [pc, #52]	; (8003a44 <mem_init+0x70>)
 8003a0e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003a10:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <mem_init+0x70>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2201      	movs	r2, #1
 8003a16:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003a18:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <mem_init+0x70>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003a20:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003a22:	4b08      	ldr	r3, [pc, #32]	; (8003a44 <mem_init+0x70>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003a2a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003a2c:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <mem_init+0x6c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a05      	ldr	r2, [pc, #20]	; (8003a48 <mem_init+0x74>)
 8003a32:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003a34:	bf00      	nop
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	20004cec 	.word	0x20004cec
 8003a40:	20008500 	.word	0x20008500
 8003a44:	20008504 	.word	0x20008504
 8003a48:	20008508 	.word	0x20008508

08003a4c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff ff09 	bl	800386c <mem_to_ptr>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff fef0 	bl	8003848 <ptr_to_mem>
 8003a68:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	885b      	ldrh	r3, [r3, #2]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff feea 	bl	8003848 <ptr_to_mem>
 8003a74:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8003a7e:	d818      	bhi.n	8003ab2 <mem_link_valid+0x66>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	885b      	ldrh	r3, [r3, #2]
 8003a84:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8003a88:	d813      	bhi.n	8003ab2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003a8e:	8afa      	ldrh	r2, [r7, #22]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d004      	beq.n	8003a9e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	8afa      	ldrh	r2, [r7, #22]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d109      	bne.n	8003ab2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003a9e:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <mem_link_valid+0x74>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d006      	beq.n	8003ab6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	885b      	ldrh	r3, [r3, #2]
 8003aac:	8afa      	ldrh	r2, [r7, #22]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d001      	beq.n	8003ab6 <mem_link_valid+0x6a>
    return 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	e000      	b.n	8003ab8 <mem_link_valid+0x6c>
  }
  return 1;
 8003ab6:	2301      	movs	r3, #1
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20008504 	.word	0x20008504

08003ac4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d04c      	beq.n	8003b6c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f003 0303 	and.w	r3, r3, #3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d007      	beq.n	8003aec <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8003adc:	4b25      	ldr	r3, [pc, #148]	; (8003b74 <mem_free+0xb0>)
 8003ade:	f240 2273 	movw	r2, #627	; 0x273
 8003ae2:	4925      	ldr	r1, [pc, #148]	; (8003b78 <mem_free+0xb4>)
 8003ae4:	4825      	ldr	r0, [pc, #148]	; (8003b7c <mem_free+0xb8>)
 8003ae6:	f009 fbc7 	bl	800d278 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003aea:	e040      	b.n	8003b6e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3b08      	subs	r3, #8
 8003af0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8003af2:	4b23      	ldr	r3, [pc, #140]	; (8003b80 <mem_free+0xbc>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d306      	bcc.n	8003b0a <mem_free+0x46>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f103 020c 	add.w	r2, r3, #12
 8003b02:	4b20      	ldr	r3, [pc, #128]	; (8003b84 <mem_free+0xc0>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d907      	bls.n	8003b1a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8003b0a:	4b1a      	ldr	r3, [pc, #104]	; (8003b74 <mem_free+0xb0>)
 8003b0c:	f240 227f 	movw	r2, #639	; 0x27f
 8003b10:	491d      	ldr	r1, [pc, #116]	; (8003b88 <mem_free+0xc4>)
 8003b12:	481a      	ldr	r0, [pc, #104]	; (8003b7c <mem_free+0xb8>)
 8003b14:	f009 fbb0 	bl	800d278 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003b18:	e029      	b.n	8003b6e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	791b      	ldrb	r3, [r3, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d107      	bne.n	8003b32 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8003b22:	4b14      	ldr	r3, [pc, #80]	; (8003b74 <mem_free+0xb0>)
 8003b24:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8003b28:	4918      	ldr	r1, [pc, #96]	; (8003b8c <mem_free+0xc8>)
 8003b2a:	4814      	ldr	r0, [pc, #80]	; (8003b7c <mem_free+0xb8>)
 8003b2c:	f009 fba4 	bl	800d278 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003b30:	e01d      	b.n	8003b6e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f7ff ff8a 	bl	8003a4c <mem_link_valid>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d107      	bne.n	8003b4e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8003b3e:	4b0d      	ldr	r3, [pc, #52]	; (8003b74 <mem_free+0xb0>)
 8003b40:	f240 2295 	movw	r2, #661	; 0x295
 8003b44:	4912      	ldr	r1, [pc, #72]	; (8003b90 <mem_free+0xcc>)
 8003b46:	480d      	ldr	r0, [pc, #52]	; (8003b7c <mem_free+0xb8>)
 8003b48:	f009 fb96 	bl	800d278 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003b4c:	e00f      	b.n	8003b6e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003b54:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <mem_free+0xd0>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d202      	bcs.n	8003b64 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003b5e:	4a0d      	ldr	r2, [pc, #52]	; (8003b94 <mem_free+0xd0>)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f7ff fe93 	bl	8003890 <plug_holes>
 8003b6a:	e000      	b.n	8003b6e <mem_free+0xaa>
    return;
 8003b6c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	0800e384 	.word	0x0800e384
 8003b78:	0800e458 	.word	0x0800e458
 8003b7c:	0800e3cc 	.word	0x0800e3cc
 8003b80:	20008500 	.word	0x20008500
 8003b84:	20008504 	.word	0x20008504
 8003b88:	0800e47c 	.word	0x0800e47c
 8003b8c:	0800e498 	.word	0x0800e498
 8003b90:	0800e4c0 	.word	0x0800e4c0
 8003b94:	20008508 	.word	0x20008508

08003b98 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8003ba4:	887b      	ldrh	r3, [r7, #2]
 8003ba6:	3303      	adds	r3, #3
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	f023 0303 	bic.w	r3, r3, #3
 8003bae:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8003bb0:	8bfb      	ldrh	r3, [r7, #30]
 8003bb2:	2b0b      	cmp	r3, #11
 8003bb4:	d801      	bhi.n	8003bba <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8003bb6:	230c      	movs	r3, #12
 8003bb8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8003bba:	8bfb      	ldrh	r3, [r7, #30]
 8003bbc:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8003bc0:	d803      	bhi.n	8003bca <mem_trim+0x32>
 8003bc2:	8bfa      	ldrh	r2, [r7, #30]
 8003bc4:	887b      	ldrh	r3, [r7, #2]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d201      	bcs.n	8003bce <mem_trim+0x36>
    return NULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	e0cc      	b.n	8003d68 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003bce:	4b68      	ldr	r3, [pc, #416]	; (8003d70 <mem_trim+0x1d8>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d304      	bcc.n	8003be2 <mem_trim+0x4a>
 8003bd8:	4b66      	ldr	r3, [pc, #408]	; (8003d74 <mem_trim+0x1dc>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d306      	bcc.n	8003bf0 <mem_trim+0x58>
 8003be2:	4b65      	ldr	r3, [pc, #404]	; (8003d78 <mem_trim+0x1e0>)
 8003be4:	f240 22d1 	movw	r2, #721	; 0x2d1
 8003be8:	4964      	ldr	r1, [pc, #400]	; (8003d7c <mem_trim+0x1e4>)
 8003bea:	4865      	ldr	r0, [pc, #404]	; (8003d80 <mem_trim+0x1e8>)
 8003bec:	f009 fb44 	bl	800d278 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003bf0:	4b5f      	ldr	r3, [pc, #380]	; (8003d70 <mem_trim+0x1d8>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d304      	bcc.n	8003c04 <mem_trim+0x6c>
 8003bfa:	4b5e      	ldr	r3, [pc, #376]	; (8003d74 <mem_trim+0x1dc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d301      	bcc.n	8003c08 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	e0af      	b.n	8003d68 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3b08      	subs	r3, #8
 8003c0c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8003c0e:	69b8      	ldr	r0, [r7, #24]
 8003c10:	f7ff fe2c 	bl	800386c <mem_to_ptr>
 8003c14:	4603      	mov	r3, r0
 8003c16:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	881a      	ldrh	r2, [r3, #0]
 8003c1c:	8afb      	ldrh	r3, [r7, #22]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b08      	subs	r3, #8
 8003c24:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003c26:	8bfa      	ldrh	r2, [r7, #30]
 8003c28:	8abb      	ldrh	r3, [r7, #20]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d906      	bls.n	8003c3c <mem_trim+0xa4>
 8003c2e:	4b52      	ldr	r3, [pc, #328]	; (8003d78 <mem_trim+0x1e0>)
 8003c30:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8003c34:	4953      	ldr	r1, [pc, #332]	; (8003d84 <mem_trim+0x1ec>)
 8003c36:	4852      	ldr	r0, [pc, #328]	; (8003d80 <mem_trim+0x1e8>)
 8003c38:	f009 fb1e 	bl	800d278 <iprintf>
  if (newsize > size) {
 8003c3c:	8bfa      	ldrh	r2, [r7, #30]
 8003c3e:	8abb      	ldrh	r3, [r7, #20]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d901      	bls.n	8003c48 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	e08f      	b.n	8003d68 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8003c48:	8bfa      	ldrh	r2, [r7, #30]
 8003c4a:	8abb      	ldrh	r3, [r7, #20]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d101      	bne.n	8003c54 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	e089      	b.n	8003d68 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff fdf5 	bl	8003848 <ptr_to_mem>
 8003c5e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	791b      	ldrb	r3, [r3, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d13f      	bne.n	8003ce8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8003c70:	d106      	bne.n	8003c80 <mem_trim+0xe8>
 8003c72:	4b41      	ldr	r3, [pc, #260]	; (8003d78 <mem_trim+0x1e0>)
 8003c74:	f240 22f5 	movw	r2, #757	; 0x2f5
 8003c78:	4943      	ldr	r1, [pc, #268]	; (8003d88 <mem_trim+0x1f0>)
 8003c7a:	4841      	ldr	r0, [pc, #260]	; (8003d80 <mem_trim+0x1e8>)
 8003c7c:	f009 fafc 	bl	800d278 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003c86:	8afa      	ldrh	r2, [r7, #22]
 8003c88:	8bfb      	ldrh	r3, [r7, #30]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3308      	adds	r3, #8
 8003c90:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8003c92:	4b3e      	ldr	r3, [pc, #248]	; (8003d8c <mem_trim+0x1f4>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d106      	bne.n	8003caa <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8003c9c:	89fb      	ldrh	r3, [r7, #14]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff fdd2 	bl	8003848 <ptr_to_mem>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	4a39      	ldr	r2, [pc, #228]	; (8003d8c <mem_trim+0x1f4>)
 8003ca8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8003caa:	89fb      	ldrh	r3, [r7, #14]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7ff fdcb 	bl	8003848 <ptr_to_mem>
 8003cb2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	89ba      	ldrh	r2, [r7, #12]
 8003cbe:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	8afa      	ldrh	r2, [r7, #22]
 8003cc4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	89fa      	ldrh	r2, [r7, #14]
 8003cca:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8003cd4:	d047      	beq.n	8003d66 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff fdb4 	bl	8003848 <ptr_to_mem>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	89fb      	ldrh	r3, [r7, #14]
 8003ce4:	8053      	strh	r3, [r2, #2]
 8003ce6:	e03e      	b.n	8003d66 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8003ce8:	8bfb      	ldrh	r3, [r7, #30]
 8003cea:	f103 0214 	add.w	r2, r3, #20
 8003cee:	8abb      	ldrh	r3, [r7, #20]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d838      	bhi.n	8003d66 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003cf4:	8afa      	ldrh	r2, [r7, #22]
 8003cf6:	8bfb      	ldrh	r3, [r7, #30]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3308      	adds	r3, #8
 8003cfe:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8003d08:	d106      	bne.n	8003d18 <mem_trim+0x180>
 8003d0a:	4b1b      	ldr	r3, [pc, #108]	; (8003d78 <mem_trim+0x1e0>)
 8003d0c:	f240 3216 	movw	r2, #790	; 0x316
 8003d10:	491d      	ldr	r1, [pc, #116]	; (8003d88 <mem_trim+0x1f0>)
 8003d12:	481b      	ldr	r0, [pc, #108]	; (8003d80 <mem_trim+0x1e8>)
 8003d14:	f009 fab0 	bl	800d278 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8003d18:	89fb      	ldrh	r3, [r7, #14]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff fd94 	bl	8003848 <ptr_to_mem>
 8003d20:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8003d22:	4b1a      	ldr	r3, [pc, #104]	; (8003d8c <mem_trim+0x1f4>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d202      	bcs.n	8003d32 <mem_trim+0x19a>
      lfree = mem2;
 8003d2c:	4a17      	ldr	r2, [pc, #92]	; (8003d8c <mem_trim+0x1f4>)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	2200      	movs	r2, #0
 8003d36:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	881a      	ldrh	r2, [r3, #0]
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	8afa      	ldrh	r2, [r7, #22]
 8003d44:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	89fa      	ldrh	r2, [r7, #14]
 8003d4a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8003d54:	d007      	beq.n	8003d66 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff fd74 	bl	8003848 <ptr_to_mem>
 8003d60:	4602      	mov	r2, r0
 8003d62:	89fb      	ldrh	r3, [r7, #14]
 8003d64:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8003d66:	687b      	ldr	r3, [r7, #4]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3720      	adds	r7, #32
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20008500 	.word	0x20008500
 8003d74:	20008504 	.word	0x20008504
 8003d78:	0800e384 	.word	0x0800e384
 8003d7c:	0800e4f4 	.word	0x0800e4f4
 8003d80:	0800e3cc 	.word	0x0800e3cc
 8003d84:	0800e50c 	.word	0x0800e50c
 8003d88:	0800e52c 	.word	0x0800e52c
 8003d8c:	20008508 	.word	0x20008508

08003d90 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <mem_malloc+0x14>
    return NULL;
 8003da0:	2300      	movs	r3, #0
 8003da2:	e0d9      	b.n	8003f58 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8003da4:	88fb      	ldrh	r3, [r7, #6]
 8003da6:	3303      	adds	r3, #3
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	f023 0303 	bic.w	r3, r3, #3
 8003dae:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8003db0:	8bbb      	ldrh	r3, [r7, #28]
 8003db2:	2b0b      	cmp	r3, #11
 8003db4:	d801      	bhi.n	8003dba <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8003db6:	230c      	movs	r3, #12
 8003db8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8003dba:	8bbb      	ldrh	r3, [r7, #28]
 8003dbc:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8003dc0:	d803      	bhi.n	8003dca <mem_malloc+0x3a>
 8003dc2:	8bba      	ldrh	r2, [r7, #28]
 8003dc4:	88fb      	ldrh	r3, [r7, #6]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d201      	bcs.n	8003dce <mem_malloc+0x3e>
    return NULL;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	e0c4      	b.n	8003f58 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003dce:	4b64      	ldr	r3, [pc, #400]	; (8003f60 <mem_malloc+0x1d0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff fd4a 	bl	800386c <mem_to_ptr>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	83fb      	strh	r3, [r7, #30]
 8003ddc:	e0b4      	b.n	8003f48 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8003dde:	8bfb      	ldrh	r3, [r7, #30]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff fd31 	bl	8003848 <ptr_to_mem>
 8003de6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	791b      	ldrb	r3, [r3, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f040 80a4 	bne.w	8003f3a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	8bfb      	ldrh	r3, [r7, #30]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	f1a3 0208 	sub.w	r2, r3, #8
 8003e00:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8003e02:	429a      	cmp	r2, r3
 8003e04:	f0c0 8099 	bcc.w	8003f3a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	8bfb      	ldrh	r3, [r7, #30]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	f1a3 0208 	sub.w	r2, r3, #8
 8003e16:	8bbb      	ldrh	r3, [r7, #28]
 8003e18:	3314      	adds	r3, #20
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d333      	bcc.n	8003e86 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8003e1e:	8bfa      	ldrh	r2, [r7, #30]
 8003e20:	8bbb      	ldrh	r3, [r7, #28]
 8003e22:	4413      	add	r3, r2
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	3308      	adds	r3, #8
 8003e28:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8003e2a:	8a7b      	ldrh	r3, [r7, #18]
 8003e2c:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8003e30:	d106      	bne.n	8003e40 <mem_malloc+0xb0>
 8003e32:	4b4c      	ldr	r3, [pc, #304]	; (8003f64 <mem_malloc+0x1d4>)
 8003e34:	f240 3287 	movw	r2, #903	; 0x387
 8003e38:	494b      	ldr	r1, [pc, #300]	; (8003f68 <mem_malloc+0x1d8>)
 8003e3a:	484c      	ldr	r0, [pc, #304]	; (8003f6c <mem_malloc+0x1dc>)
 8003e3c:	f009 fa1c 	bl	800d278 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8003e40:	8a7b      	ldrh	r3, [r7, #18]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff fd00 	bl	8003848 <ptr_to_mem>
 8003e48:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	881a      	ldrh	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8bfa      	ldrh	r2, [r7, #30]
 8003e5c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	8a7a      	ldrh	r2, [r7, #18]
 8003e62:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	2201      	movs	r2, #1
 8003e68:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8003e72:	d00b      	beq.n	8003e8c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff fce5 	bl	8003848 <ptr_to_mem>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	8a7b      	ldrh	r3, [r7, #18]
 8003e82:	8053      	strh	r3, [r2, #2]
 8003e84:	e002      	b.n	8003e8c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8003e8c:	4b34      	ldr	r3, [pc, #208]	; (8003f60 <mem_malloc+0x1d0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d127      	bne.n	8003ee6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8003e96:	4b32      	ldr	r3, [pc, #200]	; (8003f60 <mem_malloc+0x1d0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8003e9c:	e005      	b.n	8003eaa <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff fcd0 	bl	8003848 <ptr_to_mem>
 8003ea8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	791b      	ldrb	r3, [r3, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d004      	beq.n	8003ebc <mem_malloc+0x12c>
 8003eb2:	4b2f      	ldr	r3, [pc, #188]	; (8003f70 <mem_malloc+0x1e0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d1f0      	bne.n	8003e9e <mem_malloc+0x10e>
          }
          lfree = cur;
 8003ebc:	4a28      	ldr	r2, [pc, #160]	; (8003f60 <mem_malloc+0x1d0>)
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003ec2:	4b27      	ldr	r3, [pc, #156]	; (8003f60 <mem_malloc+0x1d0>)
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	4b2a      	ldr	r3, [pc, #168]	; (8003f70 <mem_malloc+0x1e0>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d00b      	beq.n	8003ee6 <mem_malloc+0x156>
 8003ece:	4b24      	ldr	r3, [pc, #144]	; (8003f60 <mem_malloc+0x1d0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	791b      	ldrb	r3, [r3, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d006      	beq.n	8003ee6 <mem_malloc+0x156>
 8003ed8:	4b22      	ldr	r3, [pc, #136]	; (8003f64 <mem_malloc+0x1d4>)
 8003eda:	f240 32b5 	movw	r2, #949	; 0x3b5
 8003ede:	4925      	ldr	r1, [pc, #148]	; (8003f74 <mem_malloc+0x1e4>)
 8003ee0:	4822      	ldr	r0, [pc, #136]	; (8003f6c <mem_malloc+0x1dc>)
 8003ee2:	f009 f9c9 	bl	800d278 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8003ee6:	8bba      	ldrh	r2, [r7, #28]
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	4413      	add	r3, r2
 8003eec:	3308      	adds	r3, #8
 8003eee:	4a20      	ldr	r2, [pc, #128]	; (8003f70 <mem_malloc+0x1e0>)
 8003ef0:	6812      	ldr	r2, [r2, #0]
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d906      	bls.n	8003f04 <mem_malloc+0x174>
 8003ef6:	4b1b      	ldr	r3, [pc, #108]	; (8003f64 <mem_malloc+0x1d4>)
 8003ef8:	f240 32b9 	movw	r2, #953	; 0x3b9
 8003efc:	491e      	ldr	r1, [pc, #120]	; (8003f78 <mem_malloc+0x1e8>)
 8003efe:	481b      	ldr	r0, [pc, #108]	; (8003f6c <mem_malloc+0x1dc>)
 8003f00:	f009 f9ba 	bl	800d278 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d006      	beq.n	8003f1c <mem_malloc+0x18c>
 8003f0e:	4b15      	ldr	r3, [pc, #84]	; (8003f64 <mem_malloc+0x1d4>)
 8003f10:	f240 32bb 	movw	r2, #955	; 0x3bb
 8003f14:	4919      	ldr	r1, [pc, #100]	; (8003f7c <mem_malloc+0x1ec>)
 8003f16:	4815      	ldr	r0, [pc, #84]	; (8003f6c <mem_malloc+0x1dc>)
 8003f18:	f009 f9ae 	bl	800d278 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d006      	beq.n	8003f34 <mem_malloc+0x1a4>
 8003f26:	4b0f      	ldr	r3, [pc, #60]	; (8003f64 <mem_malloc+0x1d4>)
 8003f28:	f240 32bd 	movw	r2, #957	; 0x3bd
 8003f2c:	4914      	ldr	r1, [pc, #80]	; (8003f80 <mem_malloc+0x1f0>)
 8003f2e:	480f      	ldr	r0, [pc, #60]	; (8003f6c <mem_malloc+0x1dc>)
 8003f30:	f009 f9a2 	bl	800d278 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	3308      	adds	r3, #8
 8003f38:	e00e      	b.n	8003f58 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8003f3a:	8bfb      	ldrh	r3, [r7, #30]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff fc83 	bl	8003848 <ptr_to_mem>
 8003f42:	4603      	mov	r3, r0
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003f48:	8bfa      	ldrh	r2, [r7, #30]
 8003f4a:	8bbb      	ldrh	r3, [r7, #28]
 8003f4c:	f5c3 5360 	rsb	r3, r3, #14336	; 0x3800
 8003f50:	429a      	cmp	r2, r3
 8003f52:	f4ff af44 	bcc.w	8003dde <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3720      	adds	r7, #32
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	20008508 	.word	0x20008508
 8003f64:	0800e384 	.word	0x0800e384
 8003f68:	0800e52c 	.word	0x0800e52c
 8003f6c:	0800e3cc 	.word	0x0800e3cc
 8003f70:	20008504 	.word	0x20008504
 8003f74:	0800e540 	.word	0x0800e540
 8003f78:	0800e55c 	.word	0x0800e55c
 8003f7c:	0800e58c 	.word	0x0800e58c
 8003f80:	0800e5bc 	.word	0x0800e5bc

08003f84 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	3303      	adds	r3, #3
 8003f9a:	f023 0303 	bic.w	r3, r3, #3
 8003f9e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	e011      	b.n	8003fca <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	885b      	ldrh	r3, [r3, #2]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	dbe7      	blt.n	8003fa6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8003fd6:	bf00      	nop
 8003fd8:	bf00      	nop
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003fea:	2300      	movs	r3, #0
 8003fec:	80fb      	strh	r3, [r7, #6]
 8003fee:	e009      	b.n	8004004 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8003ff0:	88fb      	ldrh	r3, [r7, #6]
 8003ff2:	4a08      	ldr	r2, [pc, #32]	; (8004014 <memp_init+0x30>)
 8003ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff ffc3 	bl	8003f84 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003ffe:	88fb      	ldrh	r3, [r7, #6]
 8004000:	3301      	adds	r3, #1
 8004002:	80fb      	strh	r3, [r7, #6]
 8004004:	88fb      	ldrh	r3, [r7, #6]
 8004006:	2b08      	cmp	r3, #8
 8004008:	d9f2      	bls.n	8003ff0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800400a:	bf00      	nop
 800400c:	bf00      	nop
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	08010d98 	.word	0x08010d98

08004018 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d012      	beq.n	8004054 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	6812      	ldr	r2, [r2, #0]
 8004036:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d006      	beq.n	8004050 <do_memp_malloc_pool+0x38>
 8004042:	4b07      	ldr	r3, [pc, #28]	; (8004060 <do_memp_malloc_pool+0x48>)
 8004044:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004048:	4906      	ldr	r1, [pc, #24]	; (8004064 <do_memp_malloc_pool+0x4c>)
 800404a:	4807      	ldr	r0, [pc, #28]	; (8004068 <do_memp_malloc_pool+0x50>)
 800404c:	f009 f914 	bl	800d278 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	e000      	b.n	8004056 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	0800e5e0 	.word	0x0800e5e0
 8004064:	0800e610 	.word	0x0800e610
 8004068:	0800e634 	.word	0x0800e634

0800406c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <memp_malloc_pool+0x1c>
 800407a:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <memp_malloc_pool+0x38>)
 800407c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8004080:	4909      	ldr	r1, [pc, #36]	; (80040a8 <memp_malloc_pool+0x3c>)
 8004082:	480a      	ldr	r0, [pc, #40]	; (80040ac <memp_malloc_pool+0x40>)
 8004084:	f009 f8f8 	bl	800d278 <iprintf>
  if (desc == NULL) {
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <memp_malloc_pool+0x26>
    return NULL;
 800408e:	2300      	movs	r3, #0
 8004090:	e003      	b.n	800409a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7ff ffc0 	bl	8004018 <do_memp_malloc_pool>
 8004098:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	0800e5e0 	.word	0x0800e5e0
 80040a8:	0800e65c 	.word	0x0800e65c
 80040ac:	0800e634 	.word	0x0800e634

080040b0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	4603      	mov	r3, r0
 80040b8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80040ba:	79fb      	ldrb	r3, [r7, #7]
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d908      	bls.n	80040d2 <memp_malloc+0x22>
 80040c0:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <memp_malloc+0x3c>)
 80040c2:	f240 1257 	movw	r2, #343	; 0x157
 80040c6:	490a      	ldr	r1, [pc, #40]	; (80040f0 <memp_malloc+0x40>)
 80040c8:	480a      	ldr	r0, [pc, #40]	; (80040f4 <memp_malloc+0x44>)
 80040ca:	f009 f8d5 	bl	800d278 <iprintf>
 80040ce:	2300      	movs	r3, #0
 80040d0:	e008      	b.n	80040e4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80040d2:	79fb      	ldrb	r3, [r7, #7]
 80040d4:	4a08      	ldr	r2, [pc, #32]	; (80040f8 <memp_malloc+0x48>)
 80040d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff ff9c 	bl	8004018 <do_memp_malloc_pool>
 80040e0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80040e2:	68fb      	ldr	r3, [r7, #12]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	0800e5e0 	.word	0x0800e5e0
 80040f0:	0800e670 	.word	0x0800e670
 80040f4:	0800e634 	.word	0x0800e634
 80040f8:	08010d98 	.word	0x08010d98

080040fc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	f003 0303 	and.w	r3, r3, #3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d006      	beq.n	800411e <do_memp_free_pool+0x22>
 8004110:	4b0a      	ldr	r3, [pc, #40]	; (800413c <do_memp_free_pool+0x40>)
 8004112:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8004116:	490a      	ldr	r1, [pc, #40]	; (8004140 <do_memp_free_pool+0x44>)
 8004118:	480a      	ldr	r0, [pc, #40]	; (8004144 <do_memp_free_pool+0x48>)
 800411a:	f009 f8ad 	bl	800d278 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004134:	bf00      	nop
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	0800e5e0 	.word	0x0800e5e0
 8004140:	0800e690 	.word	0x0800e690
 8004144:	0800e634 	.word	0x0800e634

08004148 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d106      	bne.n	8004166 <memp_free_pool+0x1e>
 8004158:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <memp_free_pool+0x3c>)
 800415a:	f240 1295 	movw	r2, #405	; 0x195
 800415e:	490a      	ldr	r1, [pc, #40]	; (8004188 <memp_free_pool+0x40>)
 8004160:	480a      	ldr	r0, [pc, #40]	; (800418c <memp_free_pool+0x44>)
 8004162:	f009 f889 	bl	800d278 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d007      	beq.n	800417c <memp_free_pool+0x34>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d004      	beq.n	800417c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8004172:	6839      	ldr	r1, [r7, #0]
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7ff ffc1 	bl	80040fc <do_memp_free_pool>
 800417a:	e000      	b.n	800417e <memp_free_pool+0x36>
    return;
 800417c:	bf00      	nop
}
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	0800e5e0 	.word	0x0800e5e0
 8004188:	0800e65c 	.word	0x0800e65c
 800418c:	0800e634 	.word	0x0800e634

08004190 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	4603      	mov	r3, r0
 8004198:	6039      	str	r1, [r7, #0]
 800419a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800419c:	79fb      	ldrb	r3, [r7, #7]
 800419e:	2b08      	cmp	r3, #8
 80041a0:	d907      	bls.n	80041b2 <memp_free+0x22>
 80041a2:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <memp_free+0x44>)
 80041a4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80041a8:	490b      	ldr	r1, [pc, #44]	; (80041d8 <memp_free+0x48>)
 80041aa:	480c      	ldr	r0, [pc, #48]	; (80041dc <memp_free+0x4c>)
 80041ac:	f009 f864 	bl	800d278 <iprintf>
 80041b0:	e00c      	b.n	80041cc <memp_free+0x3c>

  if (mem == NULL) {
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80041b8:	79fb      	ldrb	r3, [r7, #7]
 80041ba:	4a09      	ldr	r2, [pc, #36]	; (80041e0 <memp_free+0x50>)
 80041bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041c0:	6839      	ldr	r1, [r7, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff ff9a 	bl	80040fc <do_memp_free_pool>
 80041c8:	e000      	b.n	80041cc <memp_free+0x3c>
    return;
 80041ca:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	0800e5e0 	.word	0x0800e5e0
 80041d8:	0800e6b0 	.word	0x0800e6b0
 80041dc:	0800e634 	.word	0x0800e634
 80041e0:	08010d98 	.word	0x08010d98

080041e4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80041e8:	bf00      	nop
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
	...

080041f4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
 8004200:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d108      	bne.n	800421a <netif_add+0x26>
 8004208:	4b57      	ldr	r3, [pc, #348]	; (8004368 <netif_add+0x174>)
 800420a:	f240 1227 	movw	r2, #295	; 0x127
 800420e:	4957      	ldr	r1, [pc, #348]	; (800436c <netif_add+0x178>)
 8004210:	4857      	ldr	r0, [pc, #348]	; (8004370 <netif_add+0x17c>)
 8004212:	f009 f831 	bl	800d278 <iprintf>
 8004216:	2300      	movs	r3, #0
 8004218:	e0a2      	b.n	8004360 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	2b00      	cmp	r3, #0
 800421e:	d108      	bne.n	8004232 <netif_add+0x3e>
 8004220:	4b51      	ldr	r3, [pc, #324]	; (8004368 <netif_add+0x174>)
 8004222:	f44f 7294 	mov.w	r2, #296	; 0x128
 8004226:	4953      	ldr	r1, [pc, #332]	; (8004374 <netif_add+0x180>)
 8004228:	4851      	ldr	r0, [pc, #324]	; (8004370 <netif_add+0x17c>)
 800422a:	f009 f825 	bl	800d278 <iprintf>
 800422e:	2300      	movs	r3, #0
 8004230:	e096      	b.n	8004360 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8004238:	4b4f      	ldr	r3, [pc, #316]	; (8004378 <netif_add+0x184>)
 800423a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8004242:	4b4d      	ldr	r3, [pc, #308]	; (8004378 <netif_add+0x184>)
 8004244:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800424c:	4b4a      	ldr	r3, [pc, #296]	; (8004378 <netif_add+0x184>)
 800424e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4a45      	ldr	r2, [pc, #276]	; (800437c <netif_add+0x188>)
 8004266:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a3a      	ldr	r2, [r7, #32]
 8004280:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8004282:	4b3f      	ldr	r3, [pc, #252]	; (8004380 <netif_add+0x18c>)
 8004284:	781a      	ldrb	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004290:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	68b9      	ldr	r1, [r7, #8]
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f913 	bl	80044c4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	4798      	blx	r3
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <netif_add+0xba>
    return NULL;
 80042aa:	2300      	movs	r3, #0
 80042ac:	e058      	b.n	8004360 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042b4:	2bff      	cmp	r3, #255	; 0xff
 80042b6:	d103      	bne.n	80042c0 <netif_add+0xcc>
        netif->num = 0;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80042c4:	4b2f      	ldr	r3, [pc, #188]	; (8004384 <netif_add+0x190>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	e02b      	b.n	8004324 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d106      	bne.n	80042e2 <netif_add+0xee>
 80042d4:	4b24      	ldr	r3, [pc, #144]	; (8004368 <netif_add+0x174>)
 80042d6:	f240 128b 	movw	r2, #395	; 0x18b
 80042da:	492b      	ldr	r1, [pc, #172]	; (8004388 <netif_add+0x194>)
 80042dc:	4824      	ldr	r0, [pc, #144]	; (8004370 <netif_add+0x17c>)
 80042de:	f008 ffcb 	bl	800d278 <iprintf>
        num_netifs++;
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	3301      	adds	r3, #1
 80042e6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	2bff      	cmp	r3, #255	; 0xff
 80042ec:	dd06      	ble.n	80042fc <netif_add+0x108>
 80042ee:	4b1e      	ldr	r3, [pc, #120]	; (8004368 <netif_add+0x174>)
 80042f0:	f240 128d 	movw	r2, #397	; 0x18d
 80042f4:	4925      	ldr	r1, [pc, #148]	; (800438c <netif_add+0x198>)
 80042f6:	481e      	ldr	r0, [pc, #120]	; (8004370 <netif_add+0x17c>)
 80042f8:	f008 ffbe 	bl	800d278 <iprintf>
        if (netif2->num == netif->num) {
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004308:	429a      	cmp	r2, r3
 800430a:	d108      	bne.n	800431e <netif_add+0x12a>
          netif->num++;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004312:	3301      	adds	r3, #1
 8004314:	b2da      	uxtb	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800431c:	e005      	b.n	800432a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1d0      	bne.n	80042cc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1be      	bne.n	80042ae <netif_add+0xba>
  }
  if (netif->num == 254) {
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004336:	2bfe      	cmp	r3, #254	; 0xfe
 8004338:	d103      	bne.n	8004342 <netif_add+0x14e>
    netif_num = 0;
 800433a:	4b11      	ldr	r3, [pc, #68]	; (8004380 <netif_add+0x18c>)
 800433c:	2200      	movs	r2, #0
 800433e:	701a      	strb	r2, [r3, #0]
 8004340:	e006      	b.n	8004350 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004348:	3301      	adds	r3, #1
 800434a:	b2da      	uxtb	r2, r3
 800434c:	4b0c      	ldr	r3, [pc, #48]	; (8004380 <netif_add+0x18c>)
 800434e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004350:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <netif_add+0x190>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004358:	4a0a      	ldr	r2, [pc, #40]	; (8004384 <netif_add+0x190>)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800435e:	68fb      	ldr	r3, [r7, #12]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3718      	adds	r7, #24
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	0800e6cc 	.word	0x0800e6cc
 800436c:	0800e760 	.word	0x0800e760
 8004370:	0800e71c 	.word	0x0800e71c
 8004374:	0800e77c 	.word	0x0800e77c
 8004378:	08010dfc 	.word	0x08010dfc
 800437c:	0800479f 	.word	0x0800479f
 8004380:	2000b400 	.word	0x2000b400
 8004384:	2000b3f8 	.word	0x2000b3f8
 8004388:	0800e7a0 	.word	0x0800e7a0
 800438c:	0800e7b4 	.word	0x0800e7b4

08004390 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800439a:	6839      	ldr	r1, [r7, #0]
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f002 fb43 	bl	8006a28 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80043a2:	6839      	ldr	r1, [r7, #0]
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f006 fc27 	bl	800abf8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80043aa:	bf00      	nop
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d106      	bne.n	80043d4 <netif_do_set_ipaddr+0x20>
 80043c6:	4b1d      	ldr	r3, [pc, #116]	; (800443c <netif_do_set_ipaddr+0x88>)
 80043c8:	f240 12cb 	movw	r2, #459	; 0x1cb
 80043cc:	491c      	ldr	r1, [pc, #112]	; (8004440 <netif_do_set_ipaddr+0x8c>)
 80043ce:	481d      	ldr	r0, [pc, #116]	; (8004444 <netif_do_set_ipaddr+0x90>)
 80043d0:	f008 ff52 	bl	800d278 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d106      	bne.n	80043e8 <netif_do_set_ipaddr+0x34>
 80043da:	4b18      	ldr	r3, [pc, #96]	; (800443c <netif_do_set_ipaddr+0x88>)
 80043dc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80043e0:	4917      	ldr	r1, [pc, #92]	; (8004440 <netif_do_set_ipaddr+0x8c>)
 80043e2:	4818      	ldr	r0, [pc, #96]	; (8004444 <netif_do_set_ipaddr+0x90>)
 80043e4:	f008 ff48 	bl	800d278 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	3304      	adds	r3, #4
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d01c      	beq.n	8004430 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	3304      	adds	r3, #4
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8004406:	f107 0314 	add.w	r3, r7, #20
 800440a:	4619      	mov	r1, r3
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7ff ffbf 	bl	8004390 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <netif_do_set_ipaddr+0x6a>
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	e000      	b.n	8004420 <netif_do_set_ipaddr+0x6c>
 800441e:	2300      	movs	r3, #0
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004424:	2101      	movs	r1, #1
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 f8d2 	bl	80045d0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800442c:	2301      	movs	r3, #1
 800442e:	e000      	b.n	8004432 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	0800e6cc 	.word	0x0800e6cc
 8004440:	0800e7e4 	.word	0x0800e7e4
 8004444:	0800e71c 	.word	0x0800e71c

08004448 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	3308      	adds	r3, #8
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d00a      	beq.n	8004478 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <netif_do_set_netmask+0x26>
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	e000      	b.n	8004470 <netif_do_set_netmask+0x28>
 800446e:	2300      	movs	r3, #0
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004474:	2301      	movs	r3, #1
 8004476:	e000      	b.n	800447a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8004486:	b480      	push	{r7}
 8004488:	b085      	sub	sp, #20
 800448a:	af00      	add	r7, sp, #0
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	330c      	adds	r3, #12
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	d00a      	beq.n	80044b6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <netif_do_set_gw+0x26>
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	e000      	b.n	80044ae <netif_do_set_gw+0x28>
 80044ac:	2300      	movs	r3, #0
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
 80044d0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80044e0:	4b1c      	ldr	r3, [pc, #112]	; (8004554 <netif_set_addr+0x90>)
 80044e2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80044ea:	4b1a      	ldr	r3, [pc, #104]	; (8004554 <netif_set_addr+0x90>)
 80044ec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80044f4:	4b17      	ldr	r3, [pc, #92]	; (8004554 <netif_set_addr+0x90>)
 80044f6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <netif_set_addr+0x42>
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <netif_set_addr+0x46>
 8004506:	2301      	movs	r3, #1
 8004508:	e000      	b.n	800450c <netif_set_addr+0x48>
 800450a:	2300      	movs	r3, #0
 800450c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d006      	beq.n	8004522 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004514:	f107 0310 	add.w	r3, r7, #16
 8004518:	461a      	mov	r2, r3
 800451a:	68b9      	ldr	r1, [r7, #8]
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f7ff ff49 	bl	80043b4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8004522:	69fa      	ldr	r2, [r7, #28]
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f7ff ff8e 	bl	8004448 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	6839      	ldr	r1, [r7, #0]
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f7ff ffa8 	bl	8004486 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d106      	bne.n	800454a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800453c:	f107 0310 	add.w	r3, r7, #16
 8004540:	461a      	mov	r2, r3
 8004542:	68b9      	ldr	r1, [r7, #8]
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f7ff ff35 	bl	80043b4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800454a:	bf00      	nop
 800454c:	3720      	adds	r7, #32
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	08010dfc 	.word	0x08010dfc

08004558 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004560:	4a04      	ldr	r2, [pc, #16]	; (8004574 <netif_set_default+0x1c>)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	2000b3fc 	.word	0x2000b3fc

08004578 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d107      	bne.n	8004596 <netif_set_up+0x1e>
 8004586:	4b0f      	ldr	r3, [pc, #60]	; (80045c4 <netif_set_up+0x4c>)
 8004588:	f44f 7254 	mov.w	r2, #848	; 0x350
 800458c:	490e      	ldr	r1, [pc, #56]	; (80045c8 <netif_set_up+0x50>)
 800458e:	480f      	ldr	r0, [pc, #60]	; (80045cc <netif_set_up+0x54>)
 8004590:	f008 fe72 	bl	800d278 <iprintf>
 8004594:	e013      	b.n	80045be <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10c      	bne.n	80045be <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80045aa:	f043 0301 	orr.w	r3, r3, #1
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80045b6:	2103      	movs	r1, #3
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f809 	bl	80045d0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80045be:	3708      	adds	r7, #8
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	0800e6cc 	.word	0x0800e6cc
 80045c8:	0800e854 	.word	0x0800e854
 80045cc:	0800e71c 	.word	0x0800e71c

080045d0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <netif_issue_reports+0x20>
 80045e2:	4b18      	ldr	r3, [pc, #96]	; (8004644 <netif_issue_reports+0x74>)
 80045e4:	f240 326d 	movw	r2, #877	; 0x36d
 80045e8:	4917      	ldr	r1, [pc, #92]	; (8004648 <netif_issue_reports+0x78>)
 80045ea:	4818      	ldr	r0, [pc, #96]	; (800464c <netif_issue_reports+0x7c>)
 80045ec:	f008 fe44 	bl	800d278 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d01e      	beq.n	800463c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004604:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004608:	2b00      	cmp	r3, #0
 800460a:	d017      	beq.n	800463c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800460c:	78fb      	ldrb	r3, [r7, #3]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d013      	beq.n	800463e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3304      	adds	r3, #4
 800461a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00e      	beq.n	800463e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b00      	cmp	r3, #0
 800462c:	d007      	beq.n	800463e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	3304      	adds	r3, #4
 8004632:	4619      	mov	r1, r3
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f007 fa49 	bl	800bacc <etharp_request>
 800463a:	e000      	b.n	800463e <netif_issue_reports+0x6e>
    return;
 800463c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	0800e6cc 	.word	0x0800e6cc
 8004648:	0800e870 	.word	0x0800e870
 800464c:	0800e71c 	.word	0x0800e71c

08004650 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d107      	bne.n	800466e <netif_set_down+0x1e>
 800465e:	4b12      	ldr	r3, [pc, #72]	; (80046a8 <netif_set_down+0x58>)
 8004660:	f240 329b 	movw	r2, #923	; 0x39b
 8004664:	4911      	ldr	r1, [pc, #68]	; (80046ac <netif_set_down+0x5c>)
 8004666:	4812      	ldr	r0, [pc, #72]	; (80046b0 <netif_set_down+0x60>)
 8004668:	f008 fe06 	bl	800d278 <iprintf>
 800466c:	e019      	b.n	80046a2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d012      	beq.n	80046a2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004682:	f023 0301 	bic.w	r3, r3, #1
 8004686:	b2da      	uxtb	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004694:	f003 0308 	and.w	r3, r3, #8
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f006 fdd3 	bl	800b248 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	0800e6cc 	.word	0x0800e6cc
 80046ac:	0800e894 	.word	0x0800e894
 80046b0:	0800e71c 	.word	0x0800e71c

080046b4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d107      	bne.n	80046d2 <netif_set_link_up+0x1e>
 80046c2:	4b13      	ldr	r3, [pc, #76]	; (8004710 <netif_set_link_up+0x5c>)
 80046c4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80046c8:	4912      	ldr	r1, [pc, #72]	; (8004714 <netif_set_link_up+0x60>)
 80046ca:	4813      	ldr	r0, [pc, #76]	; (8004718 <netif_set_link_up+0x64>)
 80046cc:	f008 fdd4 	bl	800d278 <iprintf>
 80046d0:	e01b      	b.n	800470a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80046d8:	f003 0304 	and.w	r3, r3, #4
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d114      	bne.n	800470a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80046e6:	f043 0304 	orr.w	r3, r3, #4
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80046f2:	2103      	movs	r1, #3
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7ff ff6b 	bl	80045d0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <netif_set_link_up+0x56>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	0800e6cc 	.word	0x0800e6cc
 8004714:	0800e8b4 	.word	0x0800e8b4
 8004718:	0800e71c 	.word	0x0800e71c

0800471c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d107      	bne.n	800473a <netif_set_link_down+0x1e>
 800472a:	4b11      	ldr	r3, [pc, #68]	; (8004770 <netif_set_link_down+0x54>)
 800472c:	f240 4206 	movw	r2, #1030	; 0x406
 8004730:	4910      	ldr	r1, [pc, #64]	; (8004774 <netif_set_link_down+0x58>)
 8004732:	4811      	ldr	r0, [pc, #68]	; (8004778 <netif_set_link_down+0x5c>)
 8004734:	f008 fda0 	bl	800d278 <iprintf>
 8004738:	e017      	b.n	800476a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	d010      	beq.n	800476a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800474e:	f023 0304 	bic.w	r3, r3, #4
 8004752:	b2da      	uxtb	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <netif_set_link_down+0x4e>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	0800e6cc 	.word	0x0800e6cc
 8004774:	0800e8d8 	.word	0x0800e8d8
 8004778:	0800e71c 	.word	0x0800e71c

0800477c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	61da      	str	r2, [r3, #28]
  }
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800479e:	b480      	push	{r7}
 80047a0:	b085      	sub	sp, #20
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	60f8      	str	r0, [r7, #12]
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80047aa:	f06f 030b 	mvn.w	r3, #11
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
	...

080047bc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	4603      	mov	r3, r0
 80047c4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80047c6:	79fb      	ldrb	r3, [r7, #7]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d013      	beq.n	80047f4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80047cc:	4b0d      	ldr	r3, [pc, #52]	; (8004804 <netif_get_by_index+0x48>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	e00c      	b.n	80047ee <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047da:	3301      	adds	r3, #1
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	79fa      	ldrb	r2, [r7, #7]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d101      	bne.n	80047e8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	e006      	b.n	80047f6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1ef      	bne.n	80047d4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	2000b3f8 	.word	0x2000b3f8

08004808 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800480e:	4b0c      	ldr	r3, [pc, #48]	; (8004840 <pbuf_free_ooseq+0x38>)
 8004810:	2200      	movs	r2, #0
 8004812:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004814:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <pbuf_free_ooseq+0x3c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	607b      	str	r3, [r7, #4]
 800481a:	e00a      	b.n	8004832 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f002 f93d 	bl	8006aa4 <tcp_free_ooseq>
      return;
 800482a:	e005      	b.n	8004838 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	607b      	str	r3, [r7, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1f1      	bne.n	800481c <pbuf_free_ooseq+0x14>
    }
  }
}
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	2000b401 	.word	0x2000b401
 8004844:	2000b410 	.word	0x2000b410

08004848 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800484c:	4b03      	ldr	r3, [pc, #12]	; (800485c <pbuf_pool_is_empty+0x14>)
 800484e:	2201      	movs	r2, #1
 8004850:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004852:	bf00      	nop
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	2000b401 	.word	0x2000b401

08004860 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	4611      	mov	r1, r2
 800486c:	461a      	mov	r2, r3
 800486e:	460b      	mov	r3, r1
 8004870:	80fb      	strh	r3, [r7, #6]
 8004872:	4613      	mov	r3, r2
 8004874:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	88fa      	ldrh	r2, [r7, #6]
 8004886:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	88ba      	ldrh	r2, [r7, #4]
 800488c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800488e:	8b3b      	ldrh	r3, [r7, #24]
 8004890:	b2da      	uxtb	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	7f3a      	ldrb	r2, [r7, #28]
 800489a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2201      	movs	r2, #1
 80048a0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	73da      	strb	r2, [r3, #15]
}
 80048a8:	bf00      	nop
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08c      	sub	sp, #48	; 0x30
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	4603      	mov	r3, r0
 80048bc:	71fb      	strb	r3, [r7, #7]
 80048be:	460b      	mov	r3, r1
 80048c0:	80bb      	strh	r3, [r7, #4]
 80048c2:	4613      	mov	r3, r2
 80048c4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80048c6:	79fb      	ldrb	r3, [r7, #7]
 80048c8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80048ca:	887b      	ldrh	r3, [r7, #2]
 80048cc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80048d0:	d07f      	beq.n	80049d2 <pbuf_alloc+0x11e>
 80048d2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80048d6:	f300 80c8 	bgt.w	8004a6a <pbuf_alloc+0x1b6>
 80048da:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80048de:	d010      	beq.n	8004902 <pbuf_alloc+0x4e>
 80048e0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80048e4:	f300 80c1 	bgt.w	8004a6a <pbuf_alloc+0x1b6>
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d002      	beq.n	80048f2 <pbuf_alloc+0x3e>
 80048ec:	2b41      	cmp	r3, #65	; 0x41
 80048ee:	f040 80bc 	bne.w	8004a6a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80048f2:	887a      	ldrh	r2, [r7, #2]
 80048f4:	88bb      	ldrh	r3, [r7, #4]
 80048f6:	4619      	mov	r1, r3
 80048f8:	2000      	movs	r0, #0
 80048fa:	f000 f8d1 	bl	8004aa0 <pbuf_alloc_reference>
 80048fe:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8004900:	e0bd      	b.n	8004a7e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8004902:	2300      	movs	r3, #0
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8004906:	2300      	movs	r3, #0
 8004908:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800490a:	88bb      	ldrh	r3, [r7, #4]
 800490c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800490e:	2008      	movs	r0, #8
 8004910:	f7ff fbce 	bl	80040b0 <memp_malloc>
 8004914:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d109      	bne.n	8004930 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800491c:	f7ff ff94 	bl	8004848 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	2b00      	cmp	r3, #0
 8004924:	d002      	beq.n	800492c <pbuf_alloc+0x78>
            pbuf_free(p);
 8004926:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004928:	f000 faa8 	bl	8004e7c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800492c:	2300      	movs	r3, #0
 800492e:	e0a7      	b.n	8004a80 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004930:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004932:	3303      	adds	r3, #3
 8004934:	b29b      	uxth	r3, r3
 8004936:	f023 0303 	bic.w	r3, r3, #3
 800493a:	b29b      	uxth	r3, r3
 800493c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8004940:	b29b      	uxth	r3, r3
 8004942:	8b7a      	ldrh	r2, [r7, #26]
 8004944:	4293      	cmp	r3, r2
 8004946:	bf28      	it	cs
 8004948:	4613      	movcs	r3, r2
 800494a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800494c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800494e:	3310      	adds	r3, #16
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	4413      	add	r3, r2
 8004954:	3303      	adds	r3, #3
 8004956:	f023 0303 	bic.w	r3, r3, #3
 800495a:	4618      	mov	r0, r3
 800495c:	89f9      	ldrh	r1, [r7, #14]
 800495e:	8b7a      	ldrh	r2, [r7, #26]
 8004960:	2300      	movs	r3, #0
 8004962:	9301      	str	r3, [sp, #4]
 8004964:	887b      	ldrh	r3, [r7, #2]
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	460b      	mov	r3, r1
 800496a:	4601      	mov	r1, r0
 800496c:	6938      	ldr	r0, [r7, #16]
 800496e:	f7ff ff77 	bl	8004860 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d006      	beq.n	800498c <pbuf_alloc+0xd8>
 800497e:	4b42      	ldr	r3, [pc, #264]	; (8004a88 <pbuf_alloc+0x1d4>)
 8004980:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004984:	4941      	ldr	r1, [pc, #260]	; (8004a8c <pbuf_alloc+0x1d8>)
 8004986:	4842      	ldr	r0, [pc, #264]	; (8004a90 <pbuf_alloc+0x1dc>)
 8004988:	f008 fc76 	bl	800d278 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800498c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800498e:	3303      	adds	r3, #3
 8004990:	f023 0303 	bic.w	r3, r3, #3
 8004994:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8004998:	d106      	bne.n	80049a8 <pbuf_alloc+0xf4>
 800499a:	4b3b      	ldr	r3, [pc, #236]	; (8004a88 <pbuf_alloc+0x1d4>)
 800499c:	f44f 7281 	mov.w	r2, #258	; 0x102
 80049a0:	493c      	ldr	r1, [pc, #240]	; (8004a94 <pbuf_alloc+0x1e0>)
 80049a2:	483b      	ldr	r0, [pc, #236]	; (8004a90 <pbuf_alloc+0x1dc>)
 80049a4:	f008 fc68 	bl	800d278 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d102      	bne.n	80049b4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
 80049b2:	e002      	b.n	80049ba <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80049be:	8b7a      	ldrh	r2, [r7, #26]
 80049c0:	89fb      	ldrh	r3, [r7, #14]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80049c6:	2300      	movs	r3, #0
 80049c8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80049ca:	8b7b      	ldrh	r3, [r7, #26]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d19e      	bne.n	800490e <pbuf_alloc+0x5a>
      break;
 80049d0:	e055      	b.n	8004a7e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80049d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049d4:	3303      	adds	r3, #3
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	f023 0303 	bic.w	r3, r3, #3
 80049dc:	b29a      	uxth	r2, r3
 80049de:	88bb      	ldrh	r3, [r7, #4]
 80049e0:	3303      	adds	r3, #3
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	f023 0303 	bic.w	r3, r3, #3
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	4413      	add	r3, r2
 80049ec:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80049ee:	8b3b      	ldrh	r3, [r7, #24]
 80049f0:	3310      	adds	r3, #16
 80049f2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80049f4:	8b3a      	ldrh	r2, [r7, #24]
 80049f6:	88bb      	ldrh	r3, [r7, #4]
 80049f8:	3303      	adds	r3, #3
 80049fa:	f023 0303 	bic.w	r3, r3, #3
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d306      	bcc.n	8004a10 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8004a02:	8afa      	ldrh	r2, [r7, #22]
 8004a04:	88bb      	ldrh	r3, [r7, #4]
 8004a06:	3303      	adds	r3, #3
 8004a08:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d201      	bcs.n	8004a14 <pbuf_alloc+0x160>
        return NULL;
 8004a10:	2300      	movs	r3, #0
 8004a12:	e035      	b.n	8004a80 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8004a14:	8afb      	ldrh	r3, [r7, #22]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7ff f9ba 	bl	8003d90 <mem_malloc>
 8004a1c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <pbuf_alloc+0x174>
        return NULL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	e02b      	b.n	8004a80 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8004a28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a2a:	3310      	adds	r3, #16
 8004a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a2e:	4413      	add	r3, r2
 8004a30:	3303      	adds	r3, #3
 8004a32:	f023 0303 	bic.w	r3, r3, #3
 8004a36:	4618      	mov	r0, r3
 8004a38:	88b9      	ldrh	r1, [r7, #4]
 8004a3a:	88ba      	ldrh	r2, [r7, #4]
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	9301      	str	r3, [sp, #4]
 8004a40:	887b      	ldrh	r3, [r7, #2]
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	460b      	mov	r3, r1
 8004a46:	4601      	mov	r1, r0
 8004a48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a4a:	f7ff ff09 	bl	8004860 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d010      	beq.n	8004a7c <pbuf_alloc+0x1c8>
 8004a5a:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <pbuf_alloc+0x1d4>)
 8004a5c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8004a60:	490d      	ldr	r1, [pc, #52]	; (8004a98 <pbuf_alloc+0x1e4>)
 8004a62:	480b      	ldr	r0, [pc, #44]	; (8004a90 <pbuf_alloc+0x1dc>)
 8004a64:	f008 fc08 	bl	800d278 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8004a68:	e008      	b.n	8004a7c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004a6a:	4b07      	ldr	r3, [pc, #28]	; (8004a88 <pbuf_alloc+0x1d4>)
 8004a6c:	f240 1227 	movw	r2, #295	; 0x127
 8004a70:	490a      	ldr	r1, [pc, #40]	; (8004a9c <pbuf_alloc+0x1e8>)
 8004a72:	4807      	ldr	r0, [pc, #28]	; (8004a90 <pbuf_alloc+0x1dc>)
 8004a74:	f008 fc00 	bl	800d278 <iprintf>
      return NULL;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	e001      	b.n	8004a80 <pbuf_alloc+0x1cc>
      break;
 8004a7c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3728      	adds	r7, #40	; 0x28
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	0800e8fc 	.word	0x0800e8fc
 8004a8c:	0800e92c 	.word	0x0800e92c
 8004a90:	0800e95c 	.word	0x0800e95c
 8004a94:	0800e984 	.word	0x0800e984
 8004a98:	0800e9b8 	.word	0x0800e9b8
 8004a9c:	0800e9e4 	.word	0x0800e9e4

08004aa0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af02      	add	r7, sp, #8
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	807b      	strh	r3, [r7, #2]
 8004aac:	4613      	mov	r3, r2
 8004aae:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8004ab0:	883b      	ldrh	r3, [r7, #0]
 8004ab2:	2b41      	cmp	r3, #65	; 0x41
 8004ab4:	d009      	beq.n	8004aca <pbuf_alloc_reference+0x2a>
 8004ab6:	883b      	ldrh	r3, [r7, #0]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d006      	beq.n	8004aca <pbuf_alloc_reference+0x2a>
 8004abc:	4b0f      	ldr	r3, [pc, #60]	; (8004afc <pbuf_alloc_reference+0x5c>)
 8004abe:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8004ac2:	490f      	ldr	r1, [pc, #60]	; (8004b00 <pbuf_alloc_reference+0x60>)
 8004ac4:	480f      	ldr	r0, [pc, #60]	; (8004b04 <pbuf_alloc_reference+0x64>)
 8004ac6:	f008 fbd7 	bl	800d278 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004aca:	2007      	movs	r0, #7
 8004acc:	f7ff faf0 	bl	80040b0 <memp_malloc>
 8004ad0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	e00b      	b.n	8004af4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8004adc:	8879      	ldrh	r1, [r7, #2]
 8004ade:	887a      	ldrh	r2, [r7, #2]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	9301      	str	r3, [sp, #4]
 8004ae4:	883b      	ldrh	r3, [r7, #0]
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	6879      	ldr	r1, [r7, #4]
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f7ff feb7 	bl	8004860 <pbuf_init_alloced_pbuf>
  return p;
 8004af2:	68fb      	ldr	r3, [r7, #12]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	0800e8fc 	.word	0x0800e8fc
 8004b00:	0800ea00 	.word	0x0800ea00
 8004b04:	0800e95c 	.word	0x0800e95c

08004b08 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	607b      	str	r3, [r7, #4]
 8004b10:	4603      	mov	r3, r0
 8004b12:	73fb      	strb	r3, [r7, #15]
 8004b14:	460b      	mov	r3, r1
 8004b16:	81bb      	strh	r3, [r7, #12]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004b20:	8a7b      	ldrh	r3, [r7, #18]
 8004b22:	3303      	adds	r3, #3
 8004b24:	f023 0203 	bic.w	r2, r3, #3
 8004b28:	89bb      	ldrh	r3, [r7, #12]
 8004b2a:	441a      	add	r2, r3
 8004b2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d901      	bls.n	8004b36 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	e018      	b.n	8004b68 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8004b36:	6a3b      	ldr	r3, [r7, #32]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d007      	beq.n	8004b4c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004b3c:	8a7b      	ldrh	r3, [r7, #18]
 8004b3e:	3303      	adds	r3, #3
 8004b40:	f023 0303 	bic.w	r3, r3, #3
 8004b44:	6a3a      	ldr	r2, [r7, #32]
 8004b46:	4413      	add	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]
 8004b4a:	e001      	b.n	8004b50 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	89b9      	ldrh	r1, [r7, #12]
 8004b54:	89ba      	ldrh	r2, [r7, #12]
 8004b56:	2302      	movs	r3, #2
 8004b58:	9301      	str	r3, [sp, #4]
 8004b5a:	897b      	ldrh	r3, [r7, #10]
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	460b      	mov	r3, r1
 8004b60:	6979      	ldr	r1, [r7, #20]
 8004b62:	f7ff fe7d 	bl	8004860 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8004b66:	687b      	ldr	r3, [r7, #4]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d106      	bne.n	8004b90 <pbuf_realloc+0x20>
 8004b82:	4b3a      	ldr	r3, [pc, #232]	; (8004c6c <pbuf_realloc+0xfc>)
 8004b84:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8004b88:	4939      	ldr	r1, [pc, #228]	; (8004c70 <pbuf_realloc+0x100>)
 8004b8a:	483a      	ldr	r0, [pc, #232]	; (8004c74 <pbuf_realloc+0x104>)
 8004b8c:	f008 fb74 	bl	800d278 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	891b      	ldrh	r3, [r3, #8]
 8004b94:	887a      	ldrh	r2, [r7, #2]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d263      	bcs.n	8004c62 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	891a      	ldrh	r2, [r3, #8]
 8004b9e:	887b      	ldrh	r3, [r7, #2]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004ba4:	887b      	ldrh	r3, [r7, #2]
 8004ba6:	817b      	strh	r3, [r7, #10]
  q = p;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004bac:	e018      	b.n	8004be0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	895b      	ldrh	r3, [r3, #10]
 8004bb2:	897a      	ldrh	r2, [r7, #10]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	891a      	ldrh	r2, [r3, #8]
 8004bbc:	893b      	ldrh	r3, [r7, #8]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d106      	bne.n	8004be0 <pbuf_realloc+0x70>
 8004bd2:	4b26      	ldr	r3, [pc, #152]	; (8004c6c <pbuf_realloc+0xfc>)
 8004bd4:	f240 12af 	movw	r2, #431	; 0x1af
 8004bd8:	4927      	ldr	r1, [pc, #156]	; (8004c78 <pbuf_realloc+0x108>)
 8004bda:	4826      	ldr	r0, [pc, #152]	; (8004c74 <pbuf_realloc+0x104>)
 8004bdc:	f008 fb4c 	bl	800d278 <iprintf>
  while (rem_len > q->len) {
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	895b      	ldrh	r3, [r3, #10]
 8004be4:	897a      	ldrh	r2, [r7, #10]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d8e1      	bhi.n	8004bae <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	7b1b      	ldrb	r3, [r3, #12]
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d121      	bne.n	8004c3a <pbuf_realloc+0xca>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	895b      	ldrh	r3, [r3, #10]
 8004bfa:	897a      	ldrh	r2, [r7, #10]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d01c      	beq.n	8004c3a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	7b5b      	ldrb	r3, [r3, #13]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d116      	bne.n	8004c3a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	897b      	ldrh	r3, [r7, #10]
 8004c18:	4413      	add	r3, r2
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f7fe ffba 	bl	8003b98 <mem_trim>
 8004c24:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d106      	bne.n	8004c3a <pbuf_realloc+0xca>
 8004c2c:	4b0f      	ldr	r3, [pc, #60]	; (8004c6c <pbuf_realloc+0xfc>)
 8004c2e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8004c32:	4912      	ldr	r1, [pc, #72]	; (8004c7c <pbuf_realloc+0x10c>)
 8004c34:	480f      	ldr	r0, [pc, #60]	; (8004c74 <pbuf_realloc+0x104>)
 8004c36:	f008 fb1f 	bl	800d278 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	897a      	ldrh	r2, [r7, #10]
 8004c3e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	895a      	ldrh	r2, [r3, #10]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d004      	beq.n	8004c5a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 f911 	bl	8004e7c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	e000      	b.n	8004c64 <pbuf_realloc+0xf4>
    return;
 8004c62:	bf00      	nop

}
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	0800e8fc 	.word	0x0800e8fc
 8004c70:	0800ea14 	.word	0x0800ea14
 8004c74:	0800e95c 	.word	0x0800e95c
 8004c78:	0800ea2c 	.word	0x0800ea2c
 8004c7c:	0800ea44 	.word	0x0800ea44

08004c80 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d106      	bne.n	8004ca2 <pbuf_add_header_impl+0x22>
 8004c94:	4b2b      	ldr	r3, [pc, #172]	; (8004d44 <pbuf_add_header_impl+0xc4>)
 8004c96:	f240 12df 	movw	r2, #479	; 0x1df
 8004c9a:	492b      	ldr	r1, [pc, #172]	; (8004d48 <pbuf_add_header_impl+0xc8>)
 8004c9c:	482b      	ldr	r0, [pc, #172]	; (8004d4c <pbuf_add_header_impl+0xcc>)
 8004c9e:	f008 faeb 	bl	800d278 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d003      	beq.n	8004cb0 <pbuf_add_header_impl+0x30>
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cae:	d301      	bcc.n	8004cb4 <pbuf_add_header_impl+0x34>
    return 1;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e043      	b.n	8004d3c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <pbuf_add_header_impl+0x3e>
    return 0;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	e03e      	b.n	8004d3c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	891a      	ldrh	r2, [r3, #8]
 8004cc6:	8a7b      	ldrh	r3, [r7, #18]
 8004cc8:	4413      	add	r3, r2
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	8a7a      	ldrh	r2, [r7, #18]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d901      	bls.n	8004cd6 <pbuf_add_header_impl+0x56>
    return 1;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e032      	b.n	8004d3c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	7b1b      	ldrb	r3, [r3, #12]
 8004cda:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8004cdc:	8a3b      	ldrh	r3, [r7, #16]
 8004cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00c      	beq.n	8004d00 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	425b      	negs	r3, r3
 8004cee:	4413      	add	r3, r2
 8004cf0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3310      	adds	r3, #16
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d20d      	bcs.n	8004d18 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e01d      	b.n	8004d3c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8004d00:	79fb      	ldrb	r3, [r7, #7]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d006      	beq.n	8004d14 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	425b      	negs	r3, r3
 8004d0e:	4413      	add	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]
 8004d12:	e001      	b.n	8004d18 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e011      	b.n	8004d3c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	895a      	ldrh	r2, [r3, #10]
 8004d22:	8a7b      	ldrh	r3, [r7, #18]
 8004d24:	4413      	add	r3, r2
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	891a      	ldrh	r2, [r3, #8]
 8004d30:	8a7b      	ldrh	r3, [r7, #18]
 8004d32:	4413      	add	r3, r2
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	811a      	strh	r2, [r3, #8]


  return 0;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	0800e8fc 	.word	0x0800e8fc
 8004d48:	0800ea60 	.word	0x0800ea60
 8004d4c:	0800e95c 	.word	0x0800e95c

08004d50 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	6839      	ldr	r1, [r7, #0]
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7ff ff8e 	bl	8004c80 <pbuf_add_header_impl>
 8004d64:	4603      	mov	r3, r0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d106      	bne.n	8004d8e <pbuf_remove_header+0x1e>
 8004d80:	4b20      	ldr	r3, [pc, #128]	; (8004e04 <pbuf_remove_header+0x94>)
 8004d82:	f240 224b 	movw	r2, #587	; 0x24b
 8004d86:	4920      	ldr	r1, [pc, #128]	; (8004e08 <pbuf_remove_header+0x98>)
 8004d88:	4820      	ldr	r0, [pc, #128]	; (8004e0c <pbuf_remove_header+0x9c>)
 8004d8a:	f008 fa75 	bl	800d278 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <pbuf_remove_header+0x2c>
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d9a:	d301      	bcc.n	8004da0 <pbuf_remove_header+0x30>
    return 1;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e02c      	b.n	8004dfa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <pbuf_remove_header+0x3a>
    return 0;
 8004da6:	2300      	movs	r3, #0
 8004da8:	e027      	b.n	8004dfa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	895b      	ldrh	r3, [r3, #10]
 8004db2:	89fa      	ldrh	r2, [r7, #14]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d908      	bls.n	8004dca <pbuf_remove_header+0x5a>
 8004db8:	4b12      	ldr	r3, [pc, #72]	; (8004e04 <pbuf_remove_header+0x94>)
 8004dba:	f240 2255 	movw	r2, #597	; 0x255
 8004dbe:	4914      	ldr	r1, [pc, #80]	; (8004e10 <pbuf_remove_header+0xa0>)
 8004dc0:	4812      	ldr	r0, [pc, #72]	; (8004e0c <pbuf_remove_header+0x9c>)
 8004dc2:	f008 fa59 	bl	800d278 <iprintf>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e017      	b.n	8004dfa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	441a      	add	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	895a      	ldrh	r2, [r3, #10]
 8004de0:	89fb      	ldrh	r3, [r7, #14]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	891a      	ldrh	r2, [r3, #8]
 8004dee:	89fb      	ldrh	r3, [r7, #14]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	0800e8fc 	.word	0x0800e8fc
 8004e08:	0800ea60 	.word	0x0800ea60
 8004e0c:	0800e95c 	.word	0x0800e95c
 8004e10:	0800ea6c 	.word	0x0800ea6c

08004e14 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	807b      	strh	r3, [r7, #2]
 8004e20:	4613      	mov	r3, r2
 8004e22:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8004e24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	da08      	bge.n	8004e3e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8004e2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e30:	425b      	negs	r3, r3
 8004e32:	4619      	mov	r1, r3
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff ff9b 	bl	8004d70 <pbuf_remove_header>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	e007      	b.n	8004e4e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8004e3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e42:	787a      	ldrb	r2, [r7, #1]
 8004e44:	4619      	mov	r1, r3
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7ff ff1a 	bl	8004c80 <pbuf_add_header_impl>
 8004e4c:	4603      	mov	r3, r0
  }
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b082      	sub	sp, #8
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8004e62:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e66:	2201      	movs	r2, #1
 8004e68:	4619      	mov	r1, r3
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7ff ffd2 	bl	8004e14 <pbuf_header_impl>
 8004e70:	4603      	mov	r3, r0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10b      	bne.n	8004ea2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d106      	bne.n	8004e9e <pbuf_free+0x22>
 8004e90:	4b38      	ldr	r3, [pc, #224]	; (8004f74 <pbuf_free+0xf8>)
 8004e92:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8004e96:	4938      	ldr	r1, [pc, #224]	; (8004f78 <pbuf_free+0xfc>)
 8004e98:	4838      	ldr	r0, [pc, #224]	; (8004f7c <pbuf_free+0x100>)
 8004e9a:	f008 f9ed 	bl	800d278 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e063      	b.n	8004f6a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8004ea6:	e05c      	b.n	8004f62 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	7b9b      	ldrb	r3, [r3, #14]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d106      	bne.n	8004ebe <pbuf_free+0x42>
 8004eb0:	4b30      	ldr	r3, [pc, #192]	; (8004f74 <pbuf_free+0xf8>)
 8004eb2:	f240 22f1 	movw	r2, #753	; 0x2f1
 8004eb6:	4932      	ldr	r1, [pc, #200]	; (8004f80 <pbuf_free+0x104>)
 8004eb8:	4830      	ldr	r0, [pc, #192]	; (8004f7c <pbuf_free+0x100>)
 8004eba:	f008 f9dd 	bl	800d278 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	7b9b      	ldrb	r3, [r3, #14]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	739a      	strb	r2, [r3, #14]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	7b9b      	ldrb	r3, [r3, #14]
 8004ece:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8004ed0:	7dbb      	ldrb	r3, [r7, #22]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d143      	bne.n	8004f5e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	7b1b      	ldrb	r3, [r3, #12]
 8004ee0:	f003 030f 	and.w	r3, r3, #15
 8004ee4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	7b5b      	ldrb	r3, [r3, #13]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d011      	beq.n	8004f16 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d106      	bne.n	8004f0c <pbuf_free+0x90>
 8004efe:	4b1d      	ldr	r3, [pc, #116]	; (8004f74 <pbuf_free+0xf8>)
 8004f00:	f240 22ff 	movw	r2, #767	; 0x2ff
 8004f04:	491f      	ldr	r1, [pc, #124]	; (8004f84 <pbuf_free+0x108>)
 8004f06:	481d      	ldr	r0, [pc, #116]	; (8004f7c <pbuf_free+0x100>)
 8004f08:	f008 f9b6 	bl	800d278 <iprintf>
        pc->custom_free_function(p);
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	4798      	blx	r3
 8004f14:	e01d      	b.n	8004f52 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d104      	bne.n	8004f26 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	2008      	movs	r0, #8
 8004f20:	f7ff f936 	bl	8004190 <memp_free>
 8004f24:	e015      	b.n	8004f52 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8004f26:	7bfb      	ldrb	r3, [r7, #15]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d104      	bne.n	8004f36 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	2007      	movs	r0, #7
 8004f30:	f7ff f92e 	bl	8004190 <memp_free>
 8004f34:	e00d      	b.n	8004f52 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8004f36:	7bfb      	ldrb	r3, [r7, #15]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d103      	bne.n	8004f44 <pbuf_free+0xc8>
          mem_free(p);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7fe fdc1 	bl	8003ac4 <mem_free>
 8004f42:	e006      	b.n	8004f52 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8004f44:	4b0b      	ldr	r3, [pc, #44]	; (8004f74 <pbuf_free+0xf8>)
 8004f46:	f240 320f 	movw	r2, #783	; 0x30f
 8004f4a:	490f      	ldr	r1, [pc, #60]	; (8004f88 <pbuf_free+0x10c>)
 8004f4c:	480b      	ldr	r0, [pc, #44]	; (8004f7c <pbuf_free+0x100>)
 8004f4e:	f008 f993 	bl	800d278 <iprintf>
        }
      }
      count++;
 8004f52:	7dfb      	ldrb	r3, [r7, #23]
 8004f54:	3301      	adds	r3, #1
 8004f56:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	607b      	str	r3, [r7, #4]
 8004f5c:	e001      	b.n	8004f62 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d19f      	bne.n	8004ea8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8004f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	0800e8fc 	.word	0x0800e8fc
 8004f78:	0800ea60 	.word	0x0800ea60
 8004f7c:	0800e95c 	.word	0x0800e95c
 8004f80:	0800ea8c 	.word	0x0800ea8c
 8004f84:	0800eaa4 	.word	0x0800eaa4
 8004f88:	0800eac8 	.word	0x0800eac8

08004f8c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8004f94:	2300      	movs	r3, #0
 8004f96:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8004f98:	e005      	b.n	8004fa6 <pbuf_clen+0x1a>
    ++len;
 8004f9a:	89fb      	ldrh	r3, [r7, #14]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1f6      	bne.n	8004f9a <pbuf_clen+0xe>
  }
  return len;
 8004fac:	89fb      	ldrh	r3, [r7, #14]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
	...

08004fbc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d010      	beq.n	8004fec <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	7b9b      	ldrb	r3, [r3, #14]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	7b9b      	ldrb	r3, [r3, #14]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d106      	bne.n	8004fec <pbuf_ref+0x30>
 8004fde:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <pbuf_ref+0x38>)
 8004fe0:	f240 3242 	movw	r2, #834	; 0x342
 8004fe4:	4904      	ldr	r1, [pc, #16]	; (8004ff8 <pbuf_ref+0x3c>)
 8004fe6:	4805      	ldr	r0, [pc, #20]	; (8004ffc <pbuf_ref+0x40>)
 8004fe8:	f008 f946 	bl	800d278 <iprintf>
  }
}
 8004fec:	bf00      	nop
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	0800e8fc 	.word	0x0800e8fc
 8004ff8:	0800eadc 	.word	0x0800eadc
 8004ffc:	0800e95c 	.word	0x0800e95c

08005000 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <pbuf_cat+0x16>
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d107      	bne.n	8005026 <pbuf_cat+0x26>
 8005016:	4b20      	ldr	r3, [pc, #128]	; (8005098 <pbuf_cat+0x98>)
 8005018:	f240 3259 	movw	r2, #857	; 0x359
 800501c:	491f      	ldr	r1, [pc, #124]	; (800509c <pbuf_cat+0x9c>)
 800501e:	4820      	ldr	r0, [pc, #128]	; (80050a0 <pbuf_cat+0xa0>)
 8005020:	f008 f92a 	bl	800d278 <iprintf>
 8005024:	e034      	b.n	8005090 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	60fb      	str	r3, [r7, #12]
 800502a:	e00a      	b.n	8005042 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	891a      	ldrh	r2, [r3, #8]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	891b      	ldrh	r3, [r3, #8]
 8005034:	4413      	add	r3, r2
 8005036:	b29a      	uxth	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1f0      	bne.n	800502c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	891a      	ldrh	r2, [r3, #8]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	895b      	ldrh	r3, [r3, #10]
 8005052:	429a      	cmp	r2, r3
 8005054:	d006      	beq.n	8005064 <pbuf_cat+0x64>
 8005056:	4b10      	ldr	r3, [pc, #64]	; (8005098 <pbuf_cat+0x98>)
 8005058:	f240 3262 	movw	r2, #866	; 0x362
 800505c:	4911      	ldr	r1, [pc, #68]	; (80050a4 <pbuf_cat+0xa4>)
 800505e:	4810      	ldr	r0, [pc, #64]	; (80050a0 <pbuf_cat+0xa0>)
 8005060:	f008 f90a 	bl	800d278 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d006      	beq.n	800507a <pbuf_cat+0x7a>
 800506c:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <pbuf_cat+0x98>)
 800506e:	f240 3263 	movw	r2, #867	; 0x363
 8005072:	490d      	ldr	r1, [pc, #52]	; (80050a8 <pbuf_cat+0xa8>)
 8005074:	480a      	ldr	r0, [pc, #40]	; (80050a0 <pbuf_cat+0xa0>)
 8005076:	f008 f8ff 	bl	800d278 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	891a      	ldrh	r2, [r3, #8]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	891b      	ldrh	r3, [r3, #8]
 8005082:	4413      	add	r3, r2
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	683a      	ldr	r2, [r7, #0]
 800508e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	0800e8fc 	.word	0x0800e8fc
 800509c:	0800eaf0 	.word	0x0800eaf0
 80050a0:	0800e95c 	.word	0x0800e95c
 80050a4:	0800eb28 	.word	0x0800eb28
 80050a8:	0800eb58 	.word	0x0800eb58

080050ac <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	2300      	movs	r3, #0
 80050bc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d008      	beq.n	80050d6 <pbuf_copy+0x2a>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d005      	beq.n	80050d6 <pbuf_copy+0x2a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	891a      	ldrh	r2, [r3, #8]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	891b      	ldrh	r3, [r3, #8]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d209      	bcs.n	80050ea <pbuf_copy+0x3e>
 80050d6:	4b57      	ldr	r3, [pc, #348]	; (8005234 <pbuf_copy+0x188>)
 80050d8:	f240 32c9 	movw	r2, #969	; 0x3c9
 80050dc:	4956      	ldr	r1, [pc, #344]	; (8005238 <pbuf_copy+0x18c>)
 80050de:	4857      	ldr	r0, [pc, #348]	; (800523c <pbuf_copy+0x190>)
 80050e0:	f008 f8ca 	bl	800d278 <iprintf>
 80050e4:	f06f 030f 	mvn.w	r3, #15
 80050e8:	e09f      	b.n	800522a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	895b      	ldrh	r3, [r3, #10]
 80050ee:	461a      	mov	r2, r3
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	1ad2      	subs	r2, r2, r3
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	895b      	ldrh	r3, [r3, #10]
 80050f8:	4619      	mov	r1, r3
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1acb      	subs	r3, r1, r3
 80050fe:	429a      	cmp	r2, r3
 8005100:	d306      	bcc.n	8005110 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	895b      	ldrh	r3, [r3, #10]
 8005106:	461a      	mov	r2, r3
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	e005      	b.n	800511c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	895b      	ldrh	r3, [r3, #10]
 8005114:	461a      	mov	r2, r3
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	18d0      	adds	r0, r2, r3
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	4413      	add	r3, r2
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4619      	mov	r1, r3
 8005130:	f008 f88c 	bl	800d24c <memcpy>
    offset_to += len;
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4413      	add	r3, r2
 800513a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4413      	add	r3, r2
 8005142:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	895b      	ldrh	r3, [r3, #10]
 8005148:	461a      	mov	r2, r3
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	4293      	cmp	r3, r2
 800514e:	d906      	bls.n	800515e <pbuf_copy+0xb2>
 8005150:	4b38      	ldr	r3, [pc, #224]	; (8005234 <pbuf_copy+0x188>)
 8005152:	f240 32d9 	movw	r2, #985	; 0x3d9
 8005156:	493a      	ldr	r1, [pc, #232]	; (8005240 <pbuf_copy+0x194>)
 8005158:	4838      	ldr	r0, [pc, #224]	; (800523c <pbuf_copy+0x190>)
 800515a:	f008 f88d 	bl	800d278 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	895b      	ldrh	r3, [r3, #10]
 8005162:	461a      	mov	r2, r3
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	4293      	cmp	r3, r2
 8005168:	d906      	bls.n	8005178 <pbuf_copy+0xcc>
 800516a:	4b32      	ldr	r3, [pc, #200]	; (8005234 <pbuf_copy+0x188>)
 800516c:	f240 32da 	movw	r2, #986	; 0x3da
 8005170:	4934      	ldr	r1, [pc, #208]	; (8005244 <pbuf_copy+0x198>)
 8005172:	4832      	ldr	r0, [pc, #200]	; (800523c <pbuf_copy+0x190>)
 8005174:	f008 f880 	bl	800d278 <iprintf>
    if (offset_from >= p_from->len) {
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	895b      	ldrh	r3, [r3, #10]
 800517c:	461a      	mov	r2, r3
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	4293      	cmp	r3, r2
 8005182:	d304      	bcc.n	800518e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005184:	2300      	movs	r3, #0
 8005186:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	895b      	ldrh	r3, [r3, #10]
 8005192:	461a      	mov	r2, r3
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	4293      	cmp	r3, r2
 8005198:	d114      	bne.n	80051c4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800519a:	2300      	movs	r3, #0
 800519c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10c      	bne.n	80051c4 <pbuf_copy+0x118>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d009      	beq.n	80051c4 <pbuf_copy+0x118>
 80051b0:	4b20      	ldr	r3, [pc, #128]	; (8005234 <pbuf_copy+0x188>)
 80051b2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80051b6:	4924      	ldr	r1, [pc, #144]	; (8005248 <pbuf_copy+0x19c>)
 80051b8:	4820      	ldr	r0, [pc, #128]	; (800523c <pbuf_copy+0x190>)
 80051ba:	f008 f85d 	bl	800d278 <iprintf>
 80051be:	f06f 030f 	mvn.w	r3, #15
 80051c2:	e032      	b.n	800522a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d013      	beq.n	80051f2 <pbuf_copy+0x146>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	895a      	ldrh	r2, [r3, #10]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	891b      	ldrh	r3, [r3, #8]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d10d      	bne.n	80051f2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d009      	beq.n	80051f2 <pbuf_copy+0x146>
 80051de:	4b15      	ldr	r3, [pc, #84]	; (8005234 <pbuf_copy+0x188>)
 80051e0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80051e4:	4919      	ldr	r1, [pc, #100]	; (800524c <pbuf_copy+0x1a0>)
 80051e6:	4815      	ldr	r0, [pc, #84]	; (800523c <pbuf_copy+0x190>)
 80051e8:	f008 f846 	bl	800d278 <iprintf>
 80051ec:	f06f 0305 	mvn.w	r3, #5
 80051f0:	e01b      	b.n	800522a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d013      	beq.n	8005220 <pbuf_copy+0x174>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	895a      	ldrh	r2, [r3, #10]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	891b      	ldrh	r3, [r3, #8]
 8005200:	429a      	cmp	r2, r3
 8005202:	d10d      	bne.n	8005220 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d009      	beq.n	8005220 <pbuf_copy+0x174>
 800520c:	4b09      	ldr	r3, [pc, #36]	; (8005234 <pbuf_copy+0x188>)
 800520e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8005212:	490e      	ldr	r1, [pc, #56]	; (800524c <pbuf_copy+0x1a0>)
 8005214:	4809      	ldr	r0, [pc, #36]	; (800523c <pbuf_copy+0x190>)
 8005216:	f008 f82f 	bl	800d278 <iprintf>
 800521a:	f06f 0305 	mvn.w	r3, #5
 800521e:	e004      	b.n	800522a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	f47f af61 	bne.w	80050ea <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	0800e8fc 	.word	0x0800e8fc
 8005238:	0800eba4 	.word	0x0800eba4
 800523c:	0800e95c 	.word	0x0800e95c
 8005240:	0800ebd4 	.word	0x0800ebd4
 8005244:	0800ebec 	.word	0x0800ebec
 8005248:	0800ec08 	.word	0x0800ec08
 800524c:	0800ec18 	.word	0x0800ec18

08005250 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	4611      	mov	r1, r2
 800525c:	461a      	mov	r2, r3
 800525e:	460b      	mov	r3, r1
 8005260:	80fb      	strh	r3, [r7, #6]
 8005262:	4613      	mov	r3, r2
 8005264:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005266:	2300      	movs	r3, #0
 8005268:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800526a:	2300      	movs	r3, #0
 800526c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d108      	bne.n	8005286 <pbuf_copy_partial+0x36>
 8005274:	4b2b      	ldr	r3, [pc, #172]	; (8005324 <pbuf_copy_partial+0xd4>)
 8005276:	f240 420a 	movw	r2, #1034	; 0x40a
 800527a:	492b      	ldr	r1, [pc, #172]	; (8005328 <pbuf_copy_partial+0xd8>)
 800527c:	482b      	ldr	r0, [pc, #172]	; (800532c <pbuf_copy_partial+0xdc>)
 800527e:	f007 fffb 	bl	800d278 <iprintf>
 8005282:	2300      	movs	r3, #0
 8005284:	e04a      	b.n	800531c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d108      	bne.n	800529e <pbuf_copy_partial+0x4e>
 800528c:	4b25      	ldr	r3, [pc, #148]	; (8005324 <pbuf_copy_partial+0xd4>)
 800528e:	f240 420b 	movw	r2, #1035	; 0x40b
 8005292:	4927      	ldr	r1, [pc, #156]	; (8005330 <pbuf_copy_partial+0xe0>)
 8005294:	4825      	ldr	r0, [pc, #148]	; (800532c <pbuf_copy_partial+0xdc>)
 8005296:	f007 ffef 	bl	800d278 <iprintf>
 800529a:	2300      	movs	r3, #0
 800529c:	e03e      	b.n	800531c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	61fb      	str	r3, [r7, #28]
 80052a2:	e034      	b.n	800530e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80052a4:	88bb      	ldrh	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <pbuf_copy_partial+0x70>
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	895b      	ldrh	r3, [r3, #10]
 80052ae:	88ba      	ldrh	r2, [r7, #4]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d305      	bcc.n	80052c0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	895b      	ldrh	r3, [r3, #10]
 80052b8:	88ba      	ldrh	r2, [r7, #4]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	80bb      	strh	r3, [r7, #4]
 80052be:	e023      	b.n	8005308 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	895a      	ldrh	r2, [r3, #10]
 80052c4:	88bb      	ldrh	r3, [r7, #4]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80052ca:	8b3a      	ldrh	r2, [r7, #24]
 80052cc:	88fb      	ldrh	r3, [r7, #6]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d901      	bls.n	80052d6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80052d2:	88fb      	ldrh	r3, [r7, #6]
 80052d4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80052d6:	8b7b      	ldrh	r3, [r7, #26]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	18d0      	adds	r0, r2, r3
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	88bb      	ldrh	r3, [r7, #4]
 80052e2:	4413      	add	r3, r2
 80052e4:	8b3a      	ldrh	r2, [r7, #24]
 80052e6:	4619      	mov	r1, r3
 80052e8:	f007 ffb0 	bl	800d24c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80052ec:	8afa      	ldrh	r2, [r7, #22]
 80052ee:	8b3b      	ldrh	r3, [r7, #24]
 80052f0:	4413      	add	r3, r2
 80052f2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80052f4:	8b7a      	ldrh	r2, [r7, #26]
 80052f6:	8b3b      	ldrh	r3, [r7, #24]
 80052f8:	4413      	add	r3, r2
 80052fa:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80052fc:	88fa      	ldrh	r2, [r7, #6]
 80052fe:	8b3b      	ldrh	r3, [r7, #24]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005304:	2300      	movs	r3, #0
 8005306:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	61fb      	str	r3, [r7, #28]
 800530e:	88fb      	ldrh	r3, [r7, #6]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <pbuf_copy_partial+0xca>
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1c4      	bne.n	80052a4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800531a:	8afb      	ldrh	r3, [r7, #22]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3720      	adds	r7, #32
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	0800e8fc 	.word	0x0800e8fc
 8005328:	0800ec44 	.word	0x0800ec44
 800532c:	0800e95c 	.word	0x0800e95c
 8005330:	0800ec64 	.word	0x0800ec64

08005334 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	4603      	mov	r3, r0
 800533c:	603a      	str	r2, [r7, #0]
 800533e:	71fb      	strb	r3, [r7, #7]
 8005340:	460b      	mov	r3, r1
 8005342:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	8919      	ldrh	r1, [r3, #8]
 8005348:	88ba      	ldrh	r2, [r7, #4]
 800534a:	79fb      	ldrb	r3, [r7, #7]
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff fab1 	bl	80048b4 <pbuf_alloc>
 8005352:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <pbuf_clone+0x2a>
    return NULL;
 800535a:	2300      	movs	r3, #0
 800535c:	e011      	b.n	8005382 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800535e:	6839      	ldr	r1, [r7, #0]
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f7ff fea3 	bl	80050ac <pbuf_copy>
 8005366:	4603      	mov	r3, r0
 8005368:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800536a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d006      	beq.n	8005380 <pbuf_clone+0x4c>
 8005372:	4b06      	ldr	r3, [pc, #24]	; (800538c <pbuf_clone+0x58>)
 8005374:	f240 5224 	movw	r2, #1316	; 0x524
 8005378:	4905      	ldr	r1, [pc, #20]	; (8005390 <pbuf_clone+0x5c>)
 800537a:	4806      	ldr	r0, [pc, #24]	; (8005394 <pbuf_clone+0x60>)
 800537c:	f007 ff7c 	bl	800d278 <iprintf>
  return q;
 8005380:	68fb      	ldr	r3, [r7, #12]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	0800e8fc 	.word	0x0800e8fc
 8005390:	0800ed70 	.word	0x0800ed70
 8005394:	0800e95c 	.word	0x0800e95c

08005398 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800539c:	f007 ff84 	bl	800d2a8 <rand>
 80053a0:	4603      	mov	r3, r0
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	4b01      	ldr	r3, [pc, #4]	; (80053b8 <tcp_init+0x20>)
 80053b2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80053b4:	bf00      	nop
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	20000020 	.word	0x20000020

080053bc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	7d1b      	ldrb	r3, [r3, #20]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d105      	bne.n	80053d8 <tcp_free+0x1c>
 80053cc:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <tcp_free+0x2c>)
 80053ce:	22d4      	movs	r2, #212	; 0xd4
 80053d0:	4906      	ldr	r1, [pc, #24]	; (80053ec <tcp_free+0x30>)
 80053d2:	4807      	ldr	r0, [pc, #28]	; (80053f0 <tcp_free+0x34>)
 80053d4:	f007 ff50 	bl	800d278 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80053d8:	6879      	ldr	r1, [r7, #4]
 80053da:	2001      	movs	r0, #1
 80053dc:	f7fe fed8 	bl	8004190 <memp_free>
}
 80053e0:	bf00      	nop
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	0800edfc 	.word	0x0800edfc
 80053ec:	0800ee2c 	.word	0x0800ee2c
 80053f0:	0800ee40 	.word	0x0800ee40

080053f4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	7d1b      	ldrb	r3, [r3, #20]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d105      	bne.n	8005410 <tcp_free_listen+0x1c>
 8005404:	4b06      	ldr	r3, [pc, #24]	; (8005420 <tcp_free_listen+0x2c>)
 8005406:	22df      	movs	r2, #223	; 0xdf
 8005408:	4906      	ldr	r1, [pc, #24]	; (8005424 <tcp_free_listen+0x30>)
 800540a:	4807      	ldr	r0, [pc, #28]	; (8005428 <tcp_free_listen+0x34>)
 800540c:	f007 ff34 	bl	800d278 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	2002      	movs	r0, #2
 8005414:	f7fe febc 	bl	8004190 <memp_free>
}
 8005418:	bf00      	nop
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	0800edfc 	.word	0x0800edfc
 8005424:	0800ee68 	.word	0x0800ee68
 8005428:	0800ee40 	.word	0x0800ee40

0800542c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005430:	f000 fea2 	bl	8006178 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005434:	4b07      	ldr	r3, [pc, #28]	; (8005454 <tcp_tmr+0x28>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	3301      	adds	r3, #1
 800543a:	b2da      	uxtb	r2, r3
 800543c:	4b05      	ldr	r3, [pc, #20]	; (8005454 <tcp_tmr+0x28>)
 800543e:	701a      	strb	r2, [r3, #0]
 8005440:	4b04      	ldr	r3, [pc, #16]	; (8005454 <tcp_tmr+0x28>)
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800544c:	f000 fb54 	bl	8005af8 <tcp_slowtmr>
  }
}
 8005450:	bf00      	nop
 8005452:	bd80      	pop	{r7, pc}
 8005454:	2000b419 	.word	0x2000b419

08005458 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d105      	bne.n	8005474 <tcp_remove_listener+0x1c>
 8005468:	4b0d      	ldr	r3, [pc, #52]	; (80054a0 <tcp_remove_listener+0x48>)
 800546a:	22ff      	movs	r2, #255	; 0xff
 800546c:	490d      	ldr	r1, [pc, #52]	; (80054a4 <tcp_remove_listener+0x4c>)
 800546e:	480e      	ldr	r0, [pc, #56]	; (80054a8 <tcp_remove_listener+0x50>)
 8005470:	f007 ff02 	bl	800d278 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	e00a      	b.n	8005490 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	429a      	cmp	r2, r3
 8005482:	d102      	bne.n	800548a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1f1      	bne.n	800547a <tcp_remove_listener+0x22>
    }
  }
}
 8005496:	bf00      	nop
 8005498:	bf00      	nop
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	0800edfc 	.word	0x0800edfc
 80054a4:	0800ee84 	.word	0x0800ee84
 80054a8:	0800ee40 	.word	0x0800ee40

080054ac <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d106      	bne.n	80054c8 <tcp_listen_closed+0x1c>
 80054ba:	4b14      	ldr	r3, [pc, #80]	; (800550c <tcp_listen_closed+0x60>)
 80054bc:	f240 1211 	movw	r2, #273	; 0x111
 80054c0:	4913      	ldr	r1, [pc, #76]	; (8005510 <tcp_listen_closed+0x64>)
 80054c2:	4814      	ldr	r0, [pc, #80]	; (8005514 <tcp_listen_closed+0x68>)
 80054c4:	f007 fed8 	bl	800d278 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	7d1b      	ldrb	r3, [r3, #20]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d006      	beq.n	80054de <tcp_listen_closed+0x32>
 80054d0:	4b0e      	ldr	r3, [pc, #56]	; (800550c <tcp_listen_closed+0x60>)
 80054d2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80054d6:	4910      	ldr	r1, [pc, #64]	; (8005518 <tcp_listen_closed+0x6c>)
 80054d8:	480e      	ldr	r0, [pc, #56]	; (8005514 <tcp_listen_closed+0x68>)
 80054da:	f007 fecd 	bl	800d278 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80054de:	2301      	movs	r3, #1
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	e00b      	b.n	80054fc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80054e4:	4a0d      	ldr	r2, [pc, #52]	; (800551c <tcp_listen_closed+0x70>)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6879      	ldr	r1, [r7, #4]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7ff ffb1 	bl	8005458 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	3301      	adds	r3, #1
 80054fa:	60fb      	str	r3, [r7, #12]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b03      	cmp	r3, #3
 8005500:	d9f0      	bls.n	80054e4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005502:	bf00      	nop
 8005504:	bf00      	nop
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	0800edfc 	.word	0x0800edfc
 8005510:	0800eeac 	.word	0x0800eeac
 8005514:	0800ee40 	.word	0x0800ee40
 8005518:	0800eeb8 	.word	0x0800eeb8
 800551c:	08010dd4 	.word	0x08010dd4

08005520 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005520:	b5b0      	push	{r4, r5, r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af04      	add	r7, sp, #16
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	460b      	mov	r3, r1
 800552a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d106      	bne.n	8005540 <tcp_close_shutdown+0x20>
 8005532:	4b63      	ldr	r3, [pc, #396]	; (80056c0 <tcp_close_shutdown+0x1a0>)
 8005534:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005538:	4962      	ldr	r1, [pc, #392]	; (80056c4 <tcp_close_shutdown+0x1a4>)
 800553a:	4863      	ldr	r0, [pc, #396]	; (80056c8 <tcp_close_shutdown+0x1a8>)
 800553c:	f007 fe9c 	bl	800d278 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d066      	beq.n	8005614 <tcp_close_shutdown+0xf4>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	7d1b      	ldrb	r3, [r3, #20]
 800554a:	2b04      	cmp	r3, #4
 800554c:	d003      	beq.n	8005556 <tcp_close_shutdown+0x36>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	7d1b      	ldrb	r3, [r3, #20]
 8005552:	2b07      	cmp	r3, #7
 8005554:	d15e      	bne.n	8005614 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800555a:	2b00      	cmp	r3, #0
 800555c:	d104      	bne.n	8005568 <tcp_close_shutdown+0x48>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005562:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005566:	d055      	beq.n	8005614 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	8b5b      	ldrh	r3, [r3, #26]
 800556c:	f003 0310 	and.w	r3, r3, #16
 8005570:	2b00      	cmp	r3, #0
 8005572:	d106      	bne.n	8005582 <tcp_close_shutdown+0x62>
 8005574:	4b52      	ldr	r3, [pc, #328]	; (80056c0 <tcp_close_shutdown+0x1a0>)
 8005576:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800557a:	4954      	ldr	r1, [pc, #336]	; (80056cc <tcp_close_shutdown+0x1ac>)
 800557c:	4852      	ldr	r0, [pc, #328]	; (80056c8 <tcp_close_shutdown+0x1a8>)
 800557e:	f007 fe7b 	bl	800d278 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800558a:	687d      	ldr	r5, [r7, #4]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3304      	adds	r3, #4
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	8ad2      	ldrh	r2, [r2, #22]
 8005594:	6879      	ldr	r1, [r7, #4]
 8005596:	8b09      	ldrh	r1, [r1, #24]
 8005598:	9102      	str	r1, [sp, #8]
 800559a:	9201      	str	r2, [sp, #4]
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	462b      	mov	r3, r5
 80055a0:	4622      	mov	r2, r4
 80055a2:	4601      	mov	r1, r0
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f004 fe91 	bl	800a2cc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f001 f8c6 	bl	800673c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80055b0:	4b47      	ldr	r3, [pc, #284]	; (80056d0 <tcp_close_shutdown+0x1b0>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d105      	bne.n	80055c6 <tcp_close_shutdown+0xa6>
 80055ba:	4b45      	ldr	r3, [pc, #276]	; (80056d0 <tcp_close_shutdown+0x1b0>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	4a43      	ldr	r2, [pc, #268]	; (80056d0 <tcp_close_shutdown+0x1b0>)
 80055c2:	6013      	str	r3, [r2, #0]
 80055c4:	e013      	b.n	80055ee <tcp_close_shutdown+0xce>
 80055c6:	4b42      	ldr	r3, [pc, #264]	; (80056d0 <tcp_close_shutdown+0x1b0>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	e00c      	b.n	80055e8 <tcp_close_shutdown+0xc8>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d104      	bne.n	80055e2 <tcp_close_shutdown+0xc2>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68da      	ldr	r2, [r3, #12]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	60da      	str	r2, [r3, #12]
 80055e0:	e005      	b.n	80055ee <tcp_close_shutdown+0xce>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	60fb      	str	r3, [r7, #12]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1ef      	bne.n	80055ce <tcp_close_shutdown+0xae>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	60da      	str	r2, [r3, #12]
 80055f4:	4b37      	ldr	r3, [pc, #220]	; (80056d4 <tcp_close_shutdown+0x1b4>)
 80055f6:	2201      	movs	r2, #1
 80055f8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80055fa:	4b37      	ldr	r3, [pc, #220]	; (80056d8 <tcp_close_shutdown+0x1b8>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	429a      	cmp	r2, r3
 8005602:	d102      	bne.n	800560a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8005604:	f003 fd5e 	bl	80090c4 <tcp_trigger_input_pcb_close>
 8005608:	e002      	b.n	8005610 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7ff fed6 	bl	80053bc <tcp_free>
      }
      return ERR_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	e050      	b.n	80056b6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	7d1b      	ldrb	r3, [r3, #20]
 8005618:	2b02      	cmp	r3, #2
 800561a:	d03b      	beq.n	8005694 <tcp_close_shutdown+0x174>
 800561c:	2b02      	cmp	r3, #2
 800561e:	dc44      	bgt.n	80056aa <tcp_close_shutdown+0x18a>
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <tcp_close_shutdown+0x10a>
 8005624:	2b01      	cmp	r3, #1
 8005626:	d02a      	beq.n	800567e <tcp_close_shutdown+0x15e>
 8005628:	e03f      	b.n	80056aa <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	8adb      	ldrh	r3, [r3, #22]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d021      	beq.n	8005676 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005632:	4b2a      	ldr	r3, [pc, #168]	; (80056dc <tcp_close_shutdown+0x1bc>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	429a      	cmp	r2, r3
 800563a:	d105      	bne.n	8005648 <tcp_close_shutdown+0x128>
 800563c:	4b27      	ldr	r3, [pc, #156]	; (80056dc <tcp_close_shutdown+0x1bc>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	4a26      	ldr	r2, [pc, #152]	; (80056dc <tcp_close_shutdown+0x1bc>)
 8005644:	6013      	str	r3, [r2, #0]
 8005646:	e013      	b.n	8005670 <tcp_close_shutdown+0x150>
 8005648:	4b24      	ldr	r3, [pc, #144]	; (80056dc <tcp_close_shutdown+0x1bc>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	60bb      	str	r3, [r7, #8]
 800564e:	e00c      	b.n	800566a <tcp_close_shutdown+0x14a>
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	429a      	cmp	r2, r3
 8005658:	d104      	bne.n	8005664 <tcp_close_shutdown+0x144>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	60da      	str	r2, [r3, #12]
 8005662:	e005      	b.n	8005670 <tcp_close_shutdown+0x150>
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	60bb      	str	r3, [r7, #8]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1ef      	bne.n	8005650 <tcp_close_shutdown+0x130>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7ff fea0 	bl	80053bc <tcp_free>
      break;
 800567c:	e01a      	b.n	80056b4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7ff ff14 	bl	80054ac <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	4816      	ldr	r0, [pc, #88]	; (80056e0 <tcp_close_shutdown+0x1c0>)
 8005688:	f001 f8a8 	bl	80067dc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7ff feb1 	bl	80053f4 <tcp_free_listen>
      break;
 8005692:	e00f      	b.n	80056b4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005694:	6879      	ldr	r1, [r7, #4]
 8005696:	480e      	ldr	r0, [pc, #56]	; (80056d0 <tcp_close_shutdown+0x1b0>)
 8005698:	f001 f8a0 	bl	80067dc <tcp_pcb_remove>
 800569c:	4b0d      	ldr	r3, [pc, #52]	; (80056d4 <tcp_close_shutdown+0x1b4>)
 800569e:	2201      	movs	r2, #1
 80056a0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7ff fe8a 	bl	80053bc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80056a8:	e004      	b.n	80056b4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f81a 	bl	80056e4 <tcp_close_shutdown_fin>
 80056b0:	4603      	mov	r3, r0
 80056b2:	e000      	b.n	80056b6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bdb0      	pop	{r4, r5, r7, pc}
 80056be:	bf00      	nop
 80056c0:	0800edfc 	.word	0x0800edfc
 80056c4:	0800eed0 	.word	0x0800eed0
 80056c8:	0800ee40 	.word	0x0800ee40
 80056cc:	0800eef0 	.word	0x0800eef0
 80056d0:	2000b410 	.word	0x2000b410
 80056d4:	2000b418 	.word	0x2000b418
 80056d8:	2000b450 	.word	0x2000b450
 80056dc:	2000b408 	.word	0x2000b408
 80056e0:	2000b40c 	.word	0x2000b40c

080056e4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d106      	bne.n	8005700 <tcp_close_shutdown_fin+0x1c>
 80056f2:	4b2e      	ldr	r3, [pc, #184]	; (80057ac <tcp_close_shutdown_fin+0xc8>)
 80056f4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80056f8:	492d      	ldr	r1, [pc, #180]	; (80057b0 <tcp_close_shutdown_fin+0xcc>)
 80056fa:	482e      	ldr	r0, [pc, #184]	; (80057b4 <tcp_close_shutdown_fin+0xd0>)
 80056fc:	f007 fdbc 	bl	800d278 <iprintf>

  switch (pcb->state) {
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	7d1b      	ldrb	r3, [r3, #20]
 8005704:	2b07      	cmp	r3, #7
 8005706:	d020      	beq.n	800574a <tcp_close_shutdown_fin+0x66>
 8005708:	2b07      	cmp	r3, #7
 800570a:	dc2b      	bgt.n	8005764 <tcp_close_shutdown_fin+0x80>
 800570c:	2b03      	cmp	r3, #3
 800570e:	d002      	beq.n	8005716 <tcp_close_shutdown_fin+0x32>
 8005710:	2b04      	cmp	r3, #4
 8005712:	d00d      	beq.n	8005730 <tcp_close_shutdown_fin+0x4c>
 8005714:	e026      	b.n	8005764 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f003 fee6 	bl	80094e8 <tcp_send_fin>
 800571c:	4603      	mov	r3, r0
 800571e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d11f      	bne.n	8005768 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2205      	movs	r2, #5
 800572c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800572e:	e01b      	b.n	8005768 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f003 fed9 	bl	80094e8 <tcp_send_fin>
 8005736:	4603      	mov	r3, r0
 8005738:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800573a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d114      	bne.n	800576c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2205      	movs	r2, #5
 8005746:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005748:	e010      	b.n	800576c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f003 fecc 	bl	80094e8 <tcp_send_fin>
 8005750:	4603      	mov	r3, r0
 8005752:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d109      	bne.n	8005770 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2209      	movs	r2, #9
 8005760:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005762:	e005      	b.n	8005770 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005764:	2300      	movs	r3, #0
 8005766:	e01c      	b.n	80057a2 <tcp_close_shutdown_fin+0xbe>
      break;
 8005768:	bf00      	nop
 800576a:	e002      	b.n	8005772 <tcp_close_shutdown_fin+0x8e>
      break;
 800576c:	bf00      	nop
 800576e:	e000      	b.n	8005772 <tcp_close_shutdown_fin+0x8e>
      break;
 8005770:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d103      	bne.n	8005782 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f003 fff2 	bl	8009764 <tcp_output>
 8005780:	e00d      	b.n	800579e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8005782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578a:	d108      	bne.n	800579e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	8b5b      	ldrh	r3, [r3, #26]
 8005790:	f043 0308 	orr.w	r3, r3, #8
 8005794:	b29a      	uxth	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	e001      	b.n	80057a2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800579e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	0800edfc 	.word	0x0800edfc
 80057b0:	0800eeac 	.word	0x0800eeac
 80057b4:	0800ee40 	.word	0x0800ee40

080057b8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d109      	bne.n	80057da <tcp_close+0x22>
 80057c6:	4b0f      	ldr	r3, [pc, #60]	; (8005804 <tcp_close+0x4c>)
 80057c8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80057cc:	490e      	ldr	r1, [pc, #56]	; (8005808 <tcp_close+0x50>)
 80057ce:	480f      	ldr	r0, [pc, #60]	; (800580c <tcp_close+0x54>)
 80057d0:	f007 fd52 	bl	800d278 <iprintf>
 80057d4:	f06f 030f 	mvn.w	r3, #15
 80057d8:	e00f      	b.n	80057fa <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	7d1b      	ldrb	r3, [r3, #20]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d006      	beq.n	80057f0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	8b5b      	ldrh	r3, [r3, #26]
 80057e6:	f043 0310 	orr.w	r3, r3, #16
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80057f0:	2101      	movs	r1, #1
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7ff fe94 	bl	8005520 <tcp_close_shutdown>
 80057f8:	4603      	mov	r3, r0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	0800edfc 	.word	0x0800edfc
 8005808:	0800ef0c 	.word	0x0800ef0c
 800580c:	0800ee40 	.word	0x0800ee40

08005810 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08e      	sub	sp, #56	; 0x38
 8005814:	af04      	add	r7, sp, #16
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d107      	bne.n	8005830 <tcp_abandon+0x20>
 8005820:	4b52      	ldr	r3, [pc, #328]	; (800596c <tcp_abandon+0x15c>)
 8005822:	f240 223d 	movw	r2, #573	; 0x23d
 8005826:	4952      	ldr	r1, [pc, #328]	; (8005970 <tcp_abandon+0x160>)
 8005828:	4852      	ldr	r0, [pc, #328]	; (8005974 <tcp_abandon+0x164>)
 800582a:	f007 fd25 	bl	800d278 <iprintf>
 800582e:	e099      	b.n	8005964 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	7d1b      	ldrb	r3, [r3, #20]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d106      	bne.n	8005846 <tcp_abandon+0x36>
 8005838:	4b4c      	ldr	r3, [pc, #304]	; (800596c <tcp_abandon+0x15c>)
 800583a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800583e:	494e      	ldr	r1, [pc, #312]	; (8005978 <tcp_abandon+0x168>)
 8005840:	484c      	ldr	r0, [pc, #304]	; (8005974 <tcp_abandon+0x164>)
 8005842:	f007 fd19 	bl	800d278 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	7d1b      	ldrb	r3, [r3, #20]
 800584a:	2b0a      	cmp	r3, #10
 800584c:	d107      	bne.n	800585e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800584e:	6879      	ldr	r1, [r7, #4]
 8005850:	484a      	ldr	r0, [pc, #296]	; (800597c <tcp_abandon+0x16c>)
 8005852:	f000 ffc3 	bl	80067dc <tcp_pcb_remove>
    tcp_free(pcb);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7ff fdb0 	bl	80053bc <tcp_free>
 800585c:	e082      	b.n	8005964 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800585e:	2300      	movs	r3, #0
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8005862:	2300      	movs	r3, #0
 8005864:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800586a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005878:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	7d1b      	ldrb	r3, [r3, #20]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d126      	bne.n	80058d6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	8adb      	ldrh	r3, [r3, #22]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d02e      	beq.n	80058ee <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005890:	4b3b      	ldr	r3, [pc, #236]	; (8005980 <tcp_abandon+0x170>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	429a      	cmp	r2, r3
 8005898:	d105      	bne.n	80058a6 <tcp_abandon+0x96>
 800589a:	4b39      	ldr	r3, [pc, #228]	; (8005980 <tcp_abandon+0x170>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	4a37      	ldr	r2, [pc, #220]	; (8005980 <tcp_abandon+0x170>)
 80058a2:	6013      	str	r3, [r2, #0]
 80058a4:	e013      	b.n	80058ce <tcp_abandon+0xbe>
 80058a6:	4b36      	ldr	r3, [pc, #216]	; (8005980 <tcp_abandon+0x170>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	61fb      	str	r3, [r7, #28]
 80058ac:	e00c      	b.n	80058c8 <tcp_abandon+0xb8>
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d104      	bne.n	80058c2 <tcp_abandon+0xb2>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	60da      	str	r2, [r3, #12]
 80058c0:	e005      	b.n	80058ce <tcp_abandon+0xbe>
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	61fb      	str	r3, [r7, #28]
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1ef      	bne.n	80058ae <tcp_abandon+0x9e>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	60da      	str	r2, [r3, #12]
 80058d4:	e00b      	b.n	80058ee <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	8adb      	ldrh	r3, [r3, #22]
 80058de:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80058e0:	6879      	ldr	r1, [r7, #4]
 80058e2:	4828      	ldr	r0, [pc, #160]	; (8005984 <tcp_abandon+0x174>)
 80058e4:	f000 ff7a 	bl	80067dc <tcp_pcb_remove>
 80058e8:	4b27      	ldr	r3, [pc, #156]	; (8005988 <tcp_abandon+0x178>)
 80058ea:	2201      	movs	r2, #1
 80058ec:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d004      	beq.n	8005900 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fd1c 	bl	8006338 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005904:	2b00      	cmp	r3, #0
 8005906:	d004      	beq.n	8005912 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800590c:	4618      	mov	r0, r3
 800590e:	f000 fd13 	bl	8006338 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005916:	2b00      	cmp	r3, #0
 8005918:	d004      	beq.n	8005924 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800591e:	4618      	mov	r0, r3
 8005920:	f000 fd0a 	bl	8006338 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00e      	beq.n	8005948 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800592a:	6879      	ldr	r1, [r7, #4]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	3304      	adds	r3, #4
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	8b12      	ldrh	r2, [r2, #24]
 8005934:	9202      	str	r2, [sp, #8]
 8005936:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005938:	9201      	str	r2, [sp, #4]
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	460b      	mov	r3, r1
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	69b9      	ldr	r1, [r7, #24]
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f004 fcc2 	bl	800a2cc <tcp_rst>
    }
    last_state = pcb->state;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	7d1b      	ldrb	r3, [r3, #20]
 800594c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7ff fd34 	bl	80053bc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d004      	beq.n	8005964 <tcp_abandon+0x154>
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	f06f 010c 	mvn.w	r1, #12
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	4798      	blx	r3
  }
}
 8005964:	3728      	adds	r7, #40	; 0x28
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	0800edfc 	.word	0x0800edfc
 8005970:	0800ef40 	.word	0x0800ef40
 8005974:	0800ee40 	.word	0x0800ee40
 8005978:	0800ef5c 	.word	0x0800ef5c
 800597c:	2000b414 	.word	0x2000b414
 8005980:	2000b408 	.word	0x2000b408
 8005984:	2000b410 	.word	0x2000b410
 8005988:	2000b418 	.word	0x2000b418

0800598c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005994:	2101      	movs	r1, #1
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7ff ff3a 	bl	8005810 <tcp_abandon>
}
 800599c:	bf00      	nop
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d106      	bne.n	80059c0 <tcp_update_rcv_ann_wnd+0x1c>
 80059b2:	4b25      	ldr	r3, [pc, #148]	; (8005a48 <tcp_update_rcv_ann_wnd+0xa4>)
 80059b4:	f240 32a6 	movw	r2, #934	; 0x3a6
 80059b8:	4924      	ldr	r1, [pc, #144]	; (8005a4c <tcp_update_rcv_ann_wnd+0xa8>)
 80059ba:	4825      	ldr	r0, [pc, #148]	; (8005a50 <tcp_update_rcv_ann_wnd+0xac>)
 80059bc:	f007 fc5c 	bl	800d278 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80059c8:	4413      	add	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80059d4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80059d8:	bf28      	it	cs
 80059da:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80059de:	b292      	uxth	r2, r2
 80059e0:	4413      	add	r3, r2
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	db08      	blt.n	80059fc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	e020      	b.n	8005a3e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	dd03      	ble.n	8005a12 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a10:	e014      	b.n	8005a3c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a24:	d306      	bcc.n	8005a34 <tcp_update_rcv_ann_wnd+0x90>
 8005a26:	4b08      	ldr	r3, [pc, #32]	; (8005a48 <tcp_update_rcv_ann_wnd+0xa4>)
 8005a28:	f240 32b6 	movw	r2, #950	; 0x3b6
 8005a2c:	4909      	ldr	r1, [pc, #36]	; (8005a54 <tcp_update_rcv_ann_wnd+0xb0>)
 8005a2e:	4808      	ldr	r0, [pc, #32]	; (8005a50 <tcp_update_rcv_ann_wnd+0xac>)
 8005a30:	f007 fc22 	bl	800d278 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8005a3c:	2300      	movs	r3, #0
  }
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	0800edfc 	.word	0x0800edfc
 8005a4c:	0800f058 	.word	0x0800f058
 8005a50:	0800ee40 	.word	0x0800ee40
 8005a54:	0800f07c 	.word	0x0800f07c

08005a58 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	460b      	mov	r3, r1
 8005a62:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d107      	bne.n	8005a7a <tcp_recved+0x22>
 8005a6a:	4b1f      	ldr	r3, [pc, #124]	; (8005ae8 <tcp_recved+0x90>)
 8005a6c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8005a70:	491e      	ldr	r1, [pc, #120]	; (8005aec <tcp_recved+0x94>)
 8005a72:	481f      	ldr	r0, [pc, #124]	; (8005af0 <tcp_recved+0x98>)
 8005a74:	f007 fc00 	bl	800d278 <iprintf>
 8005a78:	e032      	b.n	8005ae0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	7d1b      	ldrb	r3, [r3, #20]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d106      	bne.n	8005a90 <tcp_recved+0x38>
 8005a82:	4b19      	ldr	r3, [pc, #100]	; (8005ae8 <tcp_recved+0x90>)
 8005a84:	f240 32d2 	movw	r2, #978	; 0x3d2
 8005a88:	491a      	ldr	r1, [pc, #104]	; (8005af4 <tcp_recved+0x9c>)
 8005a8a:	4819      	ldr	r0, [pc, #100]	; (8005af0 <tcp_recved+0x98>)
 8005a8c:	f007 fbf4 	bl	800d278 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005a94:	887b      	ldrh	r3, [r7, #2]
 8005a96:	4413      	add	r3, r2
 8005a98:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8005a9a:	89fb      	ldrh	r3, [r7, #14]
 8005a9c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005aa0:	d804      	bhi.n	8005aac <tcp_recved+0x54>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa6:	89fa      	ldrh	r2, [r7, #14]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d204      	bcs.n	8005ab6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8005ab2:	851a      	strh	r2, [r3, #40]	; 0x28
 8005ab4:	e002      	b.n	8005abc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	89fa      	ldrh	r2, [r7, #14]
 8005aba:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f7ff ff71 	bl	80059a4 <tcp_update_rcv_ann_wnd>
 8005ac2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8005aca:	d309      	bcc.n	8005ae0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	8b5b      	ldrh	r3, [r3, #26]
 8005ad0:	f043 0302 	orr.w	r3, r3, #2
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f003 fe42 	bl	8009764 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	0800edfc 	.word	0x0800edfc
 8005aec:	0800f098 	.word	0x0800f098
 8005af0:	0800ee40 	.word	0x0800ee40
 8005af4:	0800f0b0 	.word	0x0800f0b0

08005af8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8005af8:	b5b0      	push	{r4, r5, r7, lr}
 8005afa:	b090      	sub	sp, #64	; 0x40
 8005afc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8005afe:	2300      	movs	r3, #0
 8005b00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8005b04:	4b94      	ldr	r3, [pc, #592]	; (8005d58 <tcp_slowtmr+0x260>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	4a93      	ldr	r2, [pc, #588]	; (8005d58 <tcp_slowtmr+0x260>)
 8005b0c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8005b0e:	4b93      	ldr	r3, [pc, #588]	; (8005d5c <tcp_slowtmr+0x264>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	3301      	adds	r3, #1
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	4b91      	ldr	r3, [pc, #580]	; (8005d5c <tcp_slowtmr+0x264>)
 8005b18:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8005b1e:	4b90      	ldr	r3, [pc, #576]	; (8005d60 <tcp_slowtmr+0x268>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8005b24:	e29d      	b.n	8006062 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b28:	7d1b      	ldrb	r3, [r3, #20]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d106      	bne.n	8005b3c <tcp_slowtmr+0x44>
 8005b2e:	4b8d      	ldr	r3, [pc, #564]	; (8005d64 <tcp_slowtmr+0x26c>)
 8005b30:	f240 42be 	movw	r2, #1214	; 0x4be
 8005b34:	498c      	ldr	r1, [pc, #560]	; (8005d68 <tcp_slowtmr+0x270>)
 8005b36:	488d      	ldr	r0, [pc, #564]	; (8005d6c <tcp_slowtmr+0x274>)
 8005b38:	f007 fb9e 	bl	800d278 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3e:	7d1b      	ldrb	r3, [r3, #20]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d106      	bne.n	8005b52 <tcp_slowtmr+0x5a>
 8005b44:	4b87      	ldr	r3, [pc, #540]	; (8005d64 <tcp_slowtmr+0x26c>)
 8005b46:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8005b4a:	4989      	ldr	r1, [pc, #548]	; (8005d70 <tcp_slowtmr+0x278>)
 8005b4c:	4887      	ldr	r0, [pc, #540]	; (8005d6c <tcp_slowtmr+0x274>)
 8005b4e:	f007 fb93 	bl	800d278 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b54:	7d1b      	ldrb	r3, [r3, #20]
 8005b56:	2b0a      	cmp	r3, #10
 8005b58:	d106      	bne.n	8005b68 <tcp_slowtmr+0x70>
 8005b5a:	4b82      	ldr	r3, [pc, #520]	; (8005d64 <tcp_slowtmr+0x26c>)
 8005b5c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8005b60:	4984      	ldr	r1, [pc, #528]	; (8005d74 <tcp_slowtmr+0x27c>)
 8005b62:	4882      	ldr	r0, [pc, #520]	; (8005d6c <tcp_slowtmr+0x274>)
 8005b64:	f007 fb88 	bl	800d278 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6a:	7f9a      	ldrb	r2, [r3, #30]
 8005b6c:	4b7b      	ldr	r3, [pc, #492]	; (8005d5c <tcp_slowtmr+0x264>)
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d105      	bne.n	8005b80 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8005b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b76:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8005b7e:	e270      	b.n	8006062 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8005b80:	4b76      	ldr	r3, [pc, #472]	; (8005d5c <tcp_slowtmr+0x264>)
 8005b82:	781a      	ldrb	r2, [r3, #0]
 8005b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b86:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b96:	7d1b      	ldrb	r3, [r3, #20]
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d10a      	bne.n	8005bb2 <tcp_slowtmr+0xba>
 8005b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ba2:	2b05      	cmp	r3, #5
 8005ba4:	d905      	bls.n	8005bb2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8005ba6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005baa:	3301      	adds	r3, #1
 8005bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005bb0:	e11e      	b.n	8005df0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8005bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bb8:	2b0b      	cmp	r3, #11
 8005bba:	d905      	bls.n	8005bc8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8005bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005bc6:	e113      	b.n	8005df0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8005bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d075      	beq.n	8005cbe <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8005bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d006      	beq.n	8005be8 <tcp_slowtmr+0xf0>
 8005bda:	4b62      	ldr	r3, [pc, #392]	; (8005d64 <tcp_slowtmr+0x26c>)
 8005bdc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8005be0:	4965      	ldr	r1, [pc, #404]	; (8005d78 <tcp_slowtmr+0x280>)
 8005be2:	4862      	ldr	r0, [pc, #392]	; (8005d6c <tcp_slowtmr+0x274>)
 8005be4:	f007 fb48 	bl	800d278 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8005be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d106      	bne.n	8005bfe <tcp_slowtmr+0x106>
 8005bf0:	4b5c      	ldr	r3, [pc, #368]	; (8005d64 <tcp_slowtmr+0x26c>)
 8005bf2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8005bf6:	4961      	ldr	r1, [pc, #388]	; (8005d7c <tcp_slowtmr+0x284>)
 8005bf8:	485c      	ldr	r0, [pc, #368]	; (8005d6c <tcp_slowtmr+0x274>)
 8005bfa:	f007 fb3d 	bl	800d278 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8005bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c00:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8005c04:	2b0b      	cmp	r3, #11
 8005c06:	d905      	bls.n	8005c14 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8005c08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005c12:	e0ed      	b.n	8005df0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8005c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c16:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	4a58      	ldr	r2, [pc, #352]	; (8005d80 <tcp_slowtmr+0x288>)
 8005c1e:	5cd3      	ldrb	r3, [r2, r3]
 8005c20:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8005c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c24:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005c28:	7c7a      	ldrb	r2, [r7, #17]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d907      	bls.n	8005c3e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8005c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c30:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005c34:	3301      	adds	r3, #1
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8005c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c40:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005c44:	7c7a      	ldrb	r2, [r7, #17]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	f200 80d2 	bhi.w	8005df0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8005c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d108      	bne.n	8005c6c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8005c5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c5c:	f004 fc2a 	bl	800a4b4 <tcp_zero_window_probe>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d014      	beq.n	8005c90 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8005c66:	2300      	movs	r3, #0
 8005c68:	623b      	str	r3, [r7, #32]
 8005c6a:	e011      	b.n	8005c90 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8005c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005c72:	4619      	mov	r1, r3
 8005c74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c76:	f003 faef 	bl	8009258 <tcp_split_unsent_seg>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d107      	bne.n	8005c90 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8005c80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c82:	f003 fd6f 	bl	8009764 <tcp_output>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 80ac 	beq.w	8005df0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8005c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005ca6:	2b06      	cmp	r3, #6
 8005ca8:	f200 80a2 	bhi.w	8005df0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8005cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8005cbc:	e098      	b.n	8005df0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8005cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	db0f      	blt.n	8005ce8 <tcp_slowtmr+0x1f0>
 8005cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005cce:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d008      	beq.n	8005ce8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8005cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	3301      	adds	r3, #1
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	b21a      	sxth	r2, r3
 8005ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8005ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cea:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8005cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	db7b      	blt.n	8005df0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8005cf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cfa:	f004 f825 	bl	8009d48 <tcp_rexmit_rto_prepare>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d007      	beq.n	8005d14 <tcp_slowtmr+0x21c>
 8005d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d171      	bne.n	8005df0 <tcp_slowtmr+0x2f8>
 8005d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d06d      	beq.n	8005df0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8005d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d16:	7d1b      	ldrb	r3, [r3, #20]
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d03a      	beq.n	8005d92 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8005d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d22:	2b0c      	cmp	r3, #12
 8005d24:	bf28      	it	cs
 8005d26:	230c      	movcs	r3, #12
 8005d28:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8005d30:	10db      	asrs	r3, r3, #3
 8005d32:	b21b      	sxth	r3, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d38:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8005d3c:	4413      	add	r3, r2
 8005d3e:	7efa      	ldrb	r2, [r7, #27]
 8005d40:	4910      	ldr	r1, [pc, #64]	; (8005d84 <tcp_slowtmr+0x28c>)
 8005d42:	5c8a      	ldrb	r2, [r1, r2]
 8005d44:	4093      	lsls	r3, r2
 8005d46:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	dc1a      	bgt.n	8005d88 <tcp_slowtmr+0x290>
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	b21a      	sxth	r2, r3
 8005d56:	e019      	b.n	8005d8c <tcp_slowtmr+0x294>
 8005d58:	2000b404 	.word	0x2000b404
 8005d5c:	2000b41a 	.word	0x2000b41a
 8005d60:	2000b410 	.word	0x2000b410
 8005d64:	0800edfc 	.word	0x0800edfc
 8005d68:	0800f140 	.word	0x0800f140
 8005d6c:	0800ee40 	.word	0x0800ee40
 8005d70:	0800f16c 	.word	0x0800f16c
 8005d74:	0800f198 	.word	0x0800f198
 8005d78:	0800f1c8 	.word	0x0800f1c8
 8005d7c:	0800f1fc 	.word	0x0800f1fc
 8005d80:	08010dcc 	.word	0x08010dcc
 8005d84:	08010dbc 	.word	0x08010dbc
 8005d88:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8005d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d94:	2200      	movs	r2, #0
 8005d96:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8005d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005da4:	4293      	cmp	r3, r2
 8005da6:	bf28      	it	cs
 8005da8:	4613      	movcs	r3, r2
 8005daa:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8005dac:	8a7b      	ldrh	r3, [r7, #18]
 8005dae:	085b      	lsrs	r3, r3, #1
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8005dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005dc2:	005b      	lsls	r3, r3, #1
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d206      	bcs.n	8005dd8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8005dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8005dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dda:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dde:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8005de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de4:	2200      	movs	r2, #0
 8005de6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8005dea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005dec:	f004 f81c 	bl	8009e28 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8005df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df2:	7d1b      	ldrb	r3, [r3, #20]
 8005df4:	2b06      	cmp	r3, #6
 8005df6:	d111      	bne.n	8005e1c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8005df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfa:	8b5b      	ldrh	r3, [r3, #26]
 8005dfc:	f003 0310 	and.w	r3, r3, #16
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00b      	beq.n	8005e1c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005e04:	4b9c      	ldr	r3, [pc, #624]	; (8006078 <tcp_slowtmr+0x580>)
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b28      	cmp	r3, #40	; 0x28
 8005e10:	d904      	bls.n	8005e1c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8005e12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e16:	3301      	adds	r3, #1
 8005e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1e:	7a5b      	ldrb	r3, [r3, #9]
 8005e20:	f003 0308 	and.w	r3, r3, #8
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d04a      	beq.n	8005ebe <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8005e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005e2c:	2b04      	cmp	r3, #4
 8005e2e:	d003      	beq.n	8005e38 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8005e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e32:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8005e34:	2b07      	cmp	r3, #7
 8005e36:	d142      	bne.n	8005ebe <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005e38:	4b8f      	ldr	r3, [pc, #572]	; (8006078 <tcp_slowtmr+0x580>)
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8005e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e44:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8005e48:	4b8c      	ldr	r3, [pc, #560]	; (800607c <tcp_slowtmr+0x584>)
 8005e4a:	440b      	add	r3, r1
 8005e4c:	498c      	ldr	r1, [pc, #560]	; (8006080 <tcp_slowtmr+0x588>)
 8005e4e:	fba1 1303 	umull	r1, r3, r1, r3
 8005e52:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d90a      	bls.n	8005e6e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8005e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8005e62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e66:	3301      	adds	r3, #1
 8005e68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005e6c:	e027      	b.n	8005ebe <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005e6e:	4b82      	ldr	r3, [pc, #520]	; (8006078 <tcp_slowtmr+0x580>)
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8005e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8005e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e80:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8005e84:	4618      	mov	r0, r3
 8005e86:	4b7f      	ldr	r3, [pc, #508]	; (8006084 <tcp_slowtmr+0x58c>)
 8005e88:	fb00 f303 	mul.w	r3, r0, r3
 8005e8c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8005e8e:	497c      	ldr	r1, [pc, #496]	; (8006080 <tcp_slowtmr+0x588>)
 8005e90:	fba1 1303 	umull	r1, r3, r1, r3
 8005e94:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d911      	bls.n	8005ebe <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8005e9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e9c:	f004 faca 	bl	800a434 <tcp_keepalive>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8005ea6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d107      	bne.n	8005ebe <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8005eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eba:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8005ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d011      	beq.n	8005eea <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8005ec6:	4b6c      	ldr	r3, [pc, #432]	; (8006078 <tcp_slowtmr+0x580>)
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	1ad2      	subs	r2, r2, r3
 8005ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	460b      	mov	r3, r1
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	440b      	add	r3, r1
 8005ede:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d302      	bcc.n	8005eea <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8005ee4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ee6:	f000 fddd 	bl	8006aa4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8005eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eec:	7d1b      	ldrb	r3, [r3, #20]
 8005eee:	2b03      	cmp	r3, #3
 8005ef0:	d10b      	bne.n	8005f0a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005ef2:	4b61      	ldr	r3, [pc, #388]	; (8006078 <tcp_slowtmr+0x580>)
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	2b28      	cmp	r3, #40	; 0x28
 8005efe:	d904      	bls.n	8005f0a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8005f00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f04:	3301      	adds	r3, #1
 8005f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8005f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0c:	7d1b      	ldrb	r3, [r3, #20]
 8005f0e:	2b09      	cmp	r3, #9
 8005f10:	d10b      	bne.n	8005f2a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005f12:	4b59      	ldr	r3, [pc, #356]	; (8006078 <tcp_slowtmr+0x580>)
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	2bf0      	cmp	r3, #240	; 0xf0
 8005f1e:	d904      	bls.n	8005f2a <tcp_slowtmr+0x432>
        ++pcb_remove;
 8005f20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f24:	3301      	adds	r3, #1
 8005f26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005f2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d060      	beq.n	8005ff4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8005f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f38:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8005f3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f3c:	f000 fbfe 	bl	800673c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8005f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d010      	beq.n	8005f68 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005f46:	4b50      	ldr	r3, [pc, #320]	; (8006088 <tcp_slowtmr+0x590>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d106      	bne.n	8005f5e <tcp_slowtmr+0x466>
 8005f50:	4b4e      	ldr	r3, [pc, #312]	; (800608c <tcp_slowtmr+0x594>)
 8005f52:	f240 526d 	movw	r2, #1389	; 0x56d
 8005f56:	494e      	ldr	r1, [pc, #312]	; (8006090 <tcp_slowtmr+0x598>)
 8005f58:	484e      	ldr	r0, [pc, #312]	; (8006094 <tcp_slowtmr+0x59c>)
 8005f5a:	f007 f98d 	bl	800d278 <iprintf>
        prev->next = pcb->next;
 8005f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f64:	60da      	str	r2, [r3, #12]
 8005f66:	e00f      	b.n	8005f88 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8005f68:	4b47      	ldr	r3, [pc, #284]	; (8006088 <tcp_slowtmr+0x590>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d006      	beq.n	8005f80 <tcp_slowtmr+0x488>
 8005f72:	4b46      	ldr	r3, [pc, #280]	; (800608c <tcp_slowtmr+0x594>)
 8005f74:	f240 5271 	movw	r2, #1393	; 0x571
 8005f78:	4947      	ldr	r1, [pc, #284]	; (8006098 <tcp_slowtmr+0x5a0>)
 8005f7a:	4846      	ldr	r0, [pc, #280]	; (8006094 <tcp_slowtmr+0x59c>)
 8005f7c:	f007 f97c 	bl	800d278 <iprintf>
        tcp_active_pcbs = pcb->next;
 8005f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	4a40      	ldr	r2, [pc, #256]	; (8006088 <tcp_slowtmr+0x590>)
 8005f86:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8005f88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d013      	beq.n	8005fb8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f92:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f96:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005f98:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8005f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fa0:	8ad2      	ldrh	r2, [r2, #22]
 8005fa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fa4:	8b09      	ldrh	r1, [r1, #24]
 8005fa6:	9102      	str	r1, [sp, #8]
 8005fa8:	9201      	str	r2, [sp, #4]
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	462b      	mov	r3, r5
 8005fae:	4622      	mov	r2, r4
 8005fb0:	4601      	mov	r1, r0
 8005fb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fb4:	f004 f98a 	bl	800a2cc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8005fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8005fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc0:	7d1b      	ldrb	r3, [r3, #20]
 8005fc2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8005fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8005fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8005fce:	6838      	ldr	r0, [r7, #0]
 8005fd0:	f7ff f9f4 	bl	80053bc <tcp_free>

      tcp_active_pcbs_changed = 0;
 8005fd4:	4b31      	ldr	r3, [pc, #196]	; (800609c <tcp_slowtmr+0x5a4>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d004      	beq.n	8005fea <tcp_slowtmr+0x4f2>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f06f 010c 	mvn.w	r1, #12
 8005fe6:	68b8      	ldr	r0, [r7, #8]
 8005fe8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8005fea:	4b2c      	ldr	r3, [pc, #176]	; (800609c <tcp_slowtmr+0x5a4>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d037      	beq.n	8006062 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8005ff2:	e592      	b.n	8005b1a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8005ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8005ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006000:	7f1b      	ldrb	r3, [r3, #28]
 8006002:	3301      	adds	r3, #1
 8006004:	b2da      	uxtb	r2, r3
 8006006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006008:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600c:	7f1a      	ldrb	r2, [r3, #28]
 800600e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006010:	7f5b      	ldrb	r3, [r3, #29]
 8006012:	429a      	cmp	r2, r3
 8006014:	d325      	bcc.n	8006062 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8006016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006018:	2200      	movs	r2, #0
 800601a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800601c:	4b1f      	ldr	r3, [pc, #124]	; (800609c <tcp_slowtmr+0x5a4>)
 800601e:	2200      	movs	r2, #0
 8006020:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00b      	beq.n	8006044 <tcp_slowtmr+0x54c>
 800602c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006034:	6912      	ldr	r2, [r2, #16]
 8006036:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006038:	4610      	mov	r0, r2
 800603a:	4798      	blx	r3
 800603c:	4603      	mov	r3, r0
 800603e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006042:	e002      	b.n	800604a <tcp_slowtmr+0x552>
 8006044:	2300      	movs	r3, #0
 8006046:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800604a:	4b14      	ldr	r3, [pc, #80]	; (800609c <tcp_slowtmr+0x5a4>)
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d000      	beq.n	8006054 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8006052:	e562      	b.n	8005b1a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006054:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006058:	2b00      	cmp	r3, #0
 800605a:	d102      	bne.n	8006062 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800605c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800605e:	f003 fb81 	bl	8009764 <tcp_output>
  while (pcb != NULL) {
 8006062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006064:	2b00      	cmp	r3, #0
 8006066:	f47f ad5e 	bne.w	8005b26 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800606a:	2300      	movs	r3, #0
 800606c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800606e:	4b0c      	ldr	r3, [pc, #48]	; (80060a0 <tcp_slowtmr+0x5a8>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006074:	e069      	b.n	800614a <tcp_slowtmr+0x652>
 8006076:	bf00      	nop
 8006078:	2000b404 	.word	0x2000b404
 800607c:	000a4cb8 	.word	0x000a4cb8
 8006080:	10624dd3 	.word	0x10624dd3
 8006084:	000124f8 	.word	0x000124f8
 8006088:	2000b410 	.word	0x2000b410
 800608c:	0800edfc 	.word	0x0800edfc
 8006090:	0800f234 	.word	0x0800f234
 8006094:	0800ee40 	.word	0x0800ee40
 8006098:	0800f260 	.word	0x0800f260
 800609c:	2000b418 	.word	0x2000b418
 80060a0:	2000b414 	.word	0x2000b414
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80060a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a6:	7d1b      	ldrb	r3, [r3, #20]
 80060a8:	2b0a      	cmp	r3, #10
 80060aa:	d006      	beq.n	80060ba <tcp_slowtmr+0x5c2>
 80060ac:	4b2b      	ldr	r3, [pc, #172]	; (800615c <tcp_slowtmr+0x664>)
 80060ae:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80060b2:	492b      	ldr	r1, [pc, #172]	; (8006160 <tcp_slowtmr+0x668>)
 80060b4:	482b      	ldr	r0, [pc, #172]	; (8006164 <tcp_slowtmr+0x66c>)
 80060b6:	f007 f8df 	bl	800d278 <iprintf>
    pcb_remove = 0;
 80060ba:	2300      	movs	r3, #0
 80060bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80060c0:	4b29      	ldr	r3, [pc, #164]	; (8006168 <tcp_slowtmr+0x670>)
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2bf0      	cmp	r3, #240	; 0xf0
 80060cc:	d904      	bls.n	80060d8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80060ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060d2:	3301      	adds	r3, #1
 80060d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80060d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d02f      	beq.n	8006140 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80060e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060e2:	f000 fb2b 	bl	800673c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d010      	beq.n	800610e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80060ec:	4b1f      	ldr	r3, [pc, #124]	; (800616c <tcp_slowtmr+0x674>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d106      	bne.n	8006104 <tcp_slowtmr+0x60c>
 80060f6:	4b19      	ldr	r3, [pc, #100]	; (800615c <tcp_slowtmr+0x664>)
 80060f8:	f240 52af 	movw	r2, #1455	; 0x5af
 80060fc:	491c      	ldr	r1, [pc, #112]	; (8006170 <tcp_slowtmr+0x678>)
 80060fe:	4819      	ldr	r0, [pc, #100]	; (8006164 <tcp_slowtmr+0x66c>)
 8006100:	f007 f8ba 	bl	800d278 <iprintf>
        prev->next = pcb->next;
 8006104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610a:	60da      	str	r2, [r3, #12]
 800610c:	e00f      	b.n	800612e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800610e:	4b17      	ldr	r3, [pc, #92]	; (800616c <tcp_slowtmr+0x674>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006114:	429a      	cmp	r2, r3
 8006116:	d006      	beq.n	8006126 <tcp_slowtmr+0x62e>
 8006118:	4b10      	ldr	r3, [pc, #64]	; (800615c <tcp_slowtmr+0x664>)
 800611a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800611e:	4915      	ldr	r1, [pc, #84]	; (8006174 <tcp_slowtmr+0x67c>)
 8006120:	4810      	ldr	r0, [pc, #64]	; (8006164 <tcp_slowtmr+0x66c>)
 8006122:	f007 f8a9 	bl	800d278 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	4a10      	ldr	r2, [pc, #64]	; (800616c <tcp_slowtmr+0x674>)
 800612c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800612e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006130:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8006132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006138:	69f8      	ldr	r0, [r7, #28]
 800613a:	f7ff f93f 	bl	80053bc <tcp_free>
 800613e:	e004      	b.n	800614a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8006140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006142:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800614a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1a9      	bne.n	80060a4 <tcp_slowtmr+0x5ac>
    }
  }
}
 8006150:	bf00      	nop
 8006152:	bf00      	nop
 8006154:	3730      	adds	r7, #48	; 0x30
 8006156:	46bd      	mov	sp, r7
 8006158:	bdb0      	pop	{r4, r5, r7, pc}
 800615a:	bf00      	nop
 800615c:	0800edfc 	.word	0x0800edfc
 8006160:	0800f28c 	.word	0x0800f28c
 8006164:	0800ee40 	.word	0x0800ee40
 8006168:	2000b404 	.word	0x2000b404
 800616c:	2000b414 	.word	0x2000b414
 8006170:	0800f2bc 	.word	0x0800f2bc
 8006174:	0800f2e4 	.word	0x0800f2e4

08006178 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800617e:	4b2d      	ldr	r3, [pc, #180]	; (8006234 <tcp_fasttmr+0xbc>)
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	3301      	adds	r3, #1
 8006184:	b2da      	uxtb	r2, r3
 8006186:	4b2b      	ldr	r3, [pc, #172]	; (8006234 <tcp_fasttmr+0xbc>)
 8006188:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800618a:	4b2b      	ldr	r3, [pc, #172]	; (8006238 <tcp_fasttmr+0xc0>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006190:	e048      	b.n	8006224 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	7f9a      	ldrb	r2, [r3, #30]
 8006196:	4b27      	ldr	r3, [pc, #156]	; (8006234 <tcp_fasttmr+0xbc>)
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	429a      	cmp	r2, r3
 800619c:	d03f      	beq.n	800621e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800619e:	4b25      	ldr	r3, [pc, #148]	; (8006234 <tcp_fasttmr+0xbc>)
 80061a0:	781a      	ldrb	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	8b5b      	ldrh	r3, [r3, #26]
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d010      	beq.n	80061d4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	8b5b      	ldrh	r3, [r3, #26]
 80061b6:	f043 0302 	orr.w	r3, r3, #2
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f003 facf 	bl	8009764 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	8b5b      	ldrh	r3, [r3, #26]
 80061ca:	f023 0303 	bic.w	r3, r3, #3
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	8b5b      	ldrh	r3, [r3, #26]
 80061d8:	f003 0308 	and.w	r3, r3, #8
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d009      	beq.n	80061f4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	8b5b      	ldrh	r3, [r3, #26]
 80061e4:	f023 0308 	bic.w	r3, r3, #8
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f7ff fa78 	bl	80056e4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00a      	beq.n	8006218 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006202:	4b0e      	ldr	r3, [pc, #56]	; (800623c <tcp_fasttmr+0xc4>)
 8006204:	2200      	movs	r2, #0
 8006206:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f819 	bl	8006240 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800620e:	4b0b      	ldr	r3, [pc, #44]	; (800623c <tcp_fasttmr+0xc4>)
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d000      	beq.n	8006218 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006216:	e7b8      	b.n	800618a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	607b      	str	r3, [r7, #4]
 800621c:	e002      	b.n	8006224 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1b3      	bne.n	8006192 <tcp_fasttmr+0x1a>
    }
  }
}
 800622a:	bf00      	nop
 800622c:	bf00      	nop
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	2000b41a 	.word	0x2000b41a
 8006238:	2000b410 	.word	0x2000b410
 800623c:	2000b418 	.word	0x2000b418

08006240 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006240:	b590      	push	{r4, r7, lr}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d109      	bne.n	8006262 <tcp_process_refused_data+0x22>
 800624e:	4b37      	ldr	r3, [pc, #220]	; (800632c <tcp_process_refused_data+0xec>)
 8006250:	f240 6209 	movw	r2, #1545	; 0x609
 8006254:	4936      	ldr	r1, [pc, #216]	; (8006330 <tcp_process_refused_data+0xf0>)
 8006256:	4837      	ldr	r0, [pc, #220]	; (8006334 <tcp_process_refused_data+0xf4>)
 8006258:	f007 f80e 	bl	800d278 <iprintf>
 800625c:	f06f 030f 	mvn.w	r3, #15
 8006260:	e060      	b.n	8006324 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006266:	7b5b      	ldrb	r3, [r3, #13]
 8006268:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800626e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00b      	beq.n	8006298 <tcp_process_refused_data+0x58>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6918      	ldr	r0, [r3, #16]
 800628a:	2300      	movs	r3, #0
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	6879      	ldr	r1, [r7, #4]
 8006290:	47a0      	blx	r4
 8006292:	4603      	mov	r3, r0
 8006294:	73fb      	strb	r3, [r7, #15]
 8006296:	e007      	b.n	80062a8 <tcp_process_refused_data+0x68>
 8006298:	2300      	movs	r3, #0
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	6879      	ldr	r1, [r7, #4]
 800629e:	2000      	movs	r0, #0
 80062a0:	f000 f8a4 	bl	80063ec <tcp_recv_null>
 80062a4:	4603      	mov	r3, r0
 80062a6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80062a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d12a      	bne.n	8006306 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80062b0:	7bbb      	ldrb	r3, [r7, #14]
 80062b2:	f003 0320 	and.w	r3, r3, #32
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d033      	beq.n	8006322 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062be:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80062c2:	d005      	beq.n	80062d0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c8:	3301      	adds	r3, #1
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00b      	beq.n	80062f2 <tcp_process_refused_data+0xb2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6918      	ldr	r0, [r3, #16]
 80062e4:	2300      	movs	r3, #0
 80062e6:	2200      	movs	r2, #0
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	47a0      	blx	r4
 80062ec:	4603      	mov	r3, r0
 80062ee:	73fb      	strb	r3, [r7, #15]
 80062f0:	e001      	b.n	80062f6 <tcp_process_refused_data+0xb6>
 80062f2:	2300      	movs	r3, #0
 80062f4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80062f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062fa:	f113 0f0d 	cmn.w	r3, #13
 80062fe:	d110      	bne.n	8006322 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8006300:	f06f 030c 	mvn.w	r3, #12
 8006304:	e00e      	b.n	8006324 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8006306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800630a:	f113 0f0d 	cmn.w	r3, #13
 800630e:	d102      	bne.n	8006316 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006310:	f06f 030c 	mvn.w	r3, #12
 8006314:	e006      	b.n	8006324 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800631c:	f06f 0304 	mvn.w	r3, #4
 8006320:	e000      	b.n	8006324 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	bd90      	pop	{r4, r7, pc}
 800632c:	0800edfc 	.word	0x0800edfc
 8006330:	0800f30c 	.word	0x0800f30c
 8006334:	0800ee40 	.word	0x0800ee40

08006338 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006340:	e007      	b.n	8006352 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 f80a 	bl	8006362 <tcp_seg_free>
    seg = next;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1f4      	bne.n	8006342 <tcp_segs_free+0xa>
  }
}
 8006358:	bf00      	nop
 800635a:	bf00      	nop
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b082      	sub	sp, #8
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00c      	beq.n	800638a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d004      	beq.n	8006382 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	4618      	mov	r0, r3
 800637e:	f7fe fd7d 	bl	8004e7c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006382:	6879      	ldr	r1, [r7, #4]
 8006384:	2003      	movs	r0, #3
 8006386:	f7fd ff03 	bl	8004190 <memp_free>
  }
}
 800638a:	bf00      	nop
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
	...

08006394 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d106      	bne.n	80063b0 <tcp_seg_copy+0x1c>
 80063a2:	4b0f      	ldr	r3, [pc, #60]	; (80063e0 <tcp_seg_copy+0x4c>)
 80063a4:	f240 6282 	movw	r2, #1666	; 0x682
 80063a8:	490e      	ldr	r1, [pc, #56]	; (80063e4 <tcp_seg_copy+0x50>)
 80063aa:	480f      	ldr	r0, [pc, #60]	; (80063e8 <tcp_seg_copy+0x54>)
 80063ac:	f006 ff64 	bl	800d278 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80063b0:	2003      	movs	r0, #3
 80063b2:	f7fd fe7d 	bl	80040b0 <memp_malloc>
 80063b6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <tcp_seg_copy+0x2e>
    return NULL;
 80063be:	2300      	movs	r3, #0
 80063c0:	e00a      	b.n	80063d8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80063c2:	2210      	movs	r2, #16
 80063c4:	6879      	ldr	r1, [r7, #4]
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f006 ff40 	bl	800d24c <memcpy>
  pbuf_ref(cseg->p);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fe fdf3 	bl	8004fbc <pbuf_ref>
  return cseg;
 80063d6:	68fb      	ldr	r3, [r7, #12]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	0800edfc 	.word	0x0800edfc
 80063e4:	0800f350 	.word	0x0800f350
 80063e8:	0800ee40 	.word	0x0800ee40

080063ec <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
 80063f8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d109      	bne.n	8006414 <tcp_recv_null+0x28>
 8006400:	4b12      	ldr	r3, [pc, #72]	; (800644c <tcp_recv_null+0x60>)
 8006402:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8006406:	4912      	ldr	r1, [pc, #72]	; (8006450 <tcp_recv_null+0x64>)
 8006408:	4812      	ldr	r0, [pc, #72]	; (8006454 <tcp_recv_null+0x68>)
 800640a:	f006 ff35 	bl	800d278 <iprintf>
 800640e:	f06f 030f 	mvn.w	r3, #15
 8006412:	e016      	b.n	8006442 <tcp_recv_null+0x56>

  if (p != NULL) {
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d009      	beq.n	800642e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	891b      	ldrh	r3, [r3, #8]
 800641e:	4619      	mov	r1, r3
 8006420:	68b8      	ldr	r0, [r7, #8]
 8006422:	f7ff fb19 	bl	8005a58 <tcp_recved>
    pbuf_free(p);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7fe fd28 	bl	8004e7c <pbuf_free>
 800642c:	e008      	b.n	8006440 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800642e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d104      	bne.n	8006440 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8006436:	68b8      	ldr	r0, [r7, #8]
 8006438:	f7ff f9be 	bl	80057b8 <tcp_close>
 800643c:	4603      	mov	r3, r0
 800643e:	e000      	b.n	8006442 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	0800edfc 	.word	0x0800edfc
 8006450:	0800f36c 	.word	0x0800f36c
 8006454:	0800ee40 	.word	0x0800ee40

08006458 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	4603      	mov	r3, r0
 8006460:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006466:	2b00      	cmp	r3, #0
 8006468:	db01      	blt.n	800646e <tcp_kill_prio+0x16>
 800646a:	79fb      	ldrb	r3, [r7, #7]
 800646c:	e000      	b.n	8006470 <tcp_kill_prio+0x18>
 800646e:	237f      	movs	r3, #127	; 0x7f
 8006470:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8006472:	7afb      	ldrb	r3, [r7, #11]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d034      	beq.n	80064e2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006478:	7afb      	ldrb	r3, [r7, #11]
 800647a:	3b01      	subs	r3, #1
 800647c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800647e:	2300      	movs	r3, #0
 8006480:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006482:	2300      	movs	r3, #0
 8006484:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006486:	4b19      	ldr	r3, [pc, #100]	; (80064ec <tcp_kill_prio+0x94>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	617b      	str	r3, [r7, #20]
 800648c:	e01f      	b.n	80064ce <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	7d5b      	ldrb	r3, [r3, #21]
 8006492:	7afa      	ldrb	r2, [r7, #11]
 8006494:	429a      	cmp	r2, r3
 8006496:	d80c      	bhi.n	80064b2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800649c:	7afa      	ldrb	r2, [r7, #11]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d112      	bne.n	80064c8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80064a2:	4b13      	ldr	r3, [pc, #76]	; (80064f0 <tcp_kill_prio+0x98>)
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d80a      	bhi.n	80064c8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80064b2:	4b0f      	ldr	r3, [pc, #60]	; (80064f0 <tcp_kill_prio+0x98>)
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	7d5b      	ldrb	r3, [r3, #21]
 80064c6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	617b      	str	r3, [r7, #20]
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1dc      	bne.n	800648e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d004      	beq.n	80064e4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80064da:	6938      	ldr	r0, [r7, #16]
 80064dc:	f7ff fa56 	bl	800598c <tcp_abort>
 80064e0:	e000      	b.n	80064e4 <tcp_kill_prio+0x8c>
    return;
 80064e2:	bf00      	nop
  }
}
 80064e4:	3718      	adds	r7, #24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	2000b410 	.word	0x2000b410
 80064f0:	2000b404 	.word	0x2000b404

080064f4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	4603      	mov	r3, r0
 80064fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80064fe:	79fb      	ldrb	r3, [r7, #7]
 8006500:	2b08      	cmp	r3, #8
 8006502:	d009      	beq.n	8006518 <tcp_kill_state+0x24>
 8006504:	79fb      	ldrb	r3, [r7, #7]
 8006506:	2b09      	cmp	r3, #9
 8006508:	d006      	beq.n	8006518 <tcp_kill_state+0x24>
 800650a:	4b1a      	ldr	r3, [pc, #104]	; (8006574 <tcp_kill_state+0x80>)
 800650c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8006510:	4919      	ldr	r1, [pc, #100]	; (8006578 <tcp_kill_state+0x84>)
 8006512:	481a      	ldr	r0, [pc, #104]	; (800657c <tcp_kill_state+0x88>)
 8006514:	f006 feb0 	bl	800d278 <iprintf>

  inactivity = 0;
 8006518:	2300      	movs	r3, #0
 800651a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800651c:	2300      	movs	r3, #0
 800651e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006520:	4b17      	ldr	r3, [pc, #92]	; (8006580 <tcp_kill_state+0x8c>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	617b      	str	r3, [r7, #20]
 8006526:	e017      	b.n	8006558 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	7d1b      	ldrb	r3, [r3, #20]
 800652c:	79fa      	ldrb	r2, [r7, #7]
 800652e:	429a      	cmp	r2, r3
 8006530:	d10f      	bne.n	8006552 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006532:	4b14      	ldr	r3, [pc, #80]	; (8006584 <tcp_kill_state+0x90>)
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	429a      	cmp	r2, r3
 8006540:	d807      	bhi.n	8006552 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006542:	4b10      	ldr	r3, [pc, #64]	; (8006584 <tcp_kill_state+0x90>)
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	617b      	str	r3, [r7, #20]
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1e4      	bne.n	8006528 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d003      	beq.n	800656c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006564:	2100      	movs	r1, #0
 8006566:	6938      	ldr	r0, [r7, #16]
 8006568:	f7ff f952 	bl	8005810 <tcp_abandon>
  }
}
 800656c:	bf00      	nop
 800656e:	3718      	adds	r7, #24
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	0800edfc 	.word	0x0800edfc
 8006578:	0800f388 	.word	0x0800f388
 800657c:	0800ee40 	.word	0x0800ee40
 8006580:	2000b410 	.word	0x2000b410
 8006584:	2000b404 	.word	0x2000b404

08006588 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800658e:	2300      	movs	r3, #0
 8006590:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006592:	2300      	movs	r3, #0
 8006594:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006596:	4b12      	ldr	r3, [pc, #72]	; (80065e0 <tcp_kill_timewait+0x58>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	e012      	b.n	80065c4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800659e:	4b11      	ldr	r3, [pc, #68]	; (80065e4 <tcp_kill_timewait+0x5c>)
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d807      	bhi.n	80065be <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80065ae:	4b0d      	ldr	r3, [pc, #52]	; (80065e4 <tcp_kill_timewait+0x5c>)
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1e9      	bne.n	800659e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80065d0:	68b8      	ldr	r0, [r7, #8]
 80065d2:	f7ff f9db 	bl	800598c <tcp_abort>
  }
}
 80065d6:	bf00      	nop
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	2000b414 	.word	0x2000b414
 80065e4:	2000b404 	.word	0x2000b404

080065e8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80065ee:	4b10      	ldr	r3, [pc, #64]	; (8006630 <tcp_handle_closepend+0x48>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80065f4:	e014      	b.n	8006620 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	8b5b      	ldrh	r3, [r3, #26]
 8006600:	f003 0308 	and.w	r3, r3, #8
 8006604:	2b00      	cmp	r3, #0
 8006606:	d009      	beq.n	800661c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	8b5b      	ldrh	r3, [r3, #26]
 800660c:	f023 0308 	bic.w	r3, r3, #8
 8006610:	b29a      	uxth	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7ff f864 	bl	80056e4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1e7      	bne.n	80065f6 <tcp_handle_closepend+0xe>
  }
}
 8006626:	bf00      	nop
 8006628:	bf00      	nop
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	2000b410 	.word	0x2000b410

08006634 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	4603      	mov	r3, r0
 800663c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800663e:	2001      	movs	r0, #1
 8006640:	f7fd fd36 	bl	80040b0 <memp_malloc>
 8006644:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d126      	bne.n	800669a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800664c:	f7ff ffcc 	bl	80065e8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006650:	f7ff ff9a 	bl	8006588 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006654:	2001      	movs	r0, #1
 8006656:	f7fd fd2b 	bl	80040b0 <memp_malloc>
 800665a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d11b      	bne.n	800669a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006662:	2009      	movs	r0, #9
 8006664:	f7ff ff46 	bl	80064f4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006668:	2001      	movs	r0, #1
 800666a:	f7fd fd21 	bl	80040b0 <memp_malloc>
 800666e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d111      	bne.n	800669a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006676:	2008      	movs	r0, #8
 8006678:	f7ff ff3c 	bl	80064f4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800667c:	2001      	movs	r0, #1
 800667e:	f7fd fd17 	bl	80040b0 <memp_malloc>
 8006682:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d107      	bne.n	800669a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800668a:	79fb      	ldrb	r3, [r7, #7]
 800668c:	4618      	mov	r0, r3
 800668e:	f7ff fee3 	bl	8006458 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006692:	2001      	movs	r0, #1
 8006694:	f7fd fd0c 	bl	80040b0 <memp_malloc>
 8006698:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d03f      	beq.n	8006720 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80066a0:	229c      	movs	r2, #156	; 0x9c
 80066a2:	2100      	movs	r1, #0
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f006 fddf 	bl	800d268 <memset>
    pcb->prio = prio;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	79fa      	ldrb	r2, [r7, #7]
 80066ae:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80066b6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80066c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	22ff      	movs	r2, #255	; 0xff
 80066ce:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80066d6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2206      	movs	r2, #6
 80066dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2206      	movs	r2, #6
 80066e4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066ec:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80066f6:	4b0d      	ldr	r3, [pc, #52]	; (800672c <tcp_alloc+0xf8>)
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80066fe:	4b0c      	ldr	r3, [pc, #48]	; (8006730 <tcp_alloc+0xfc>)
 8006700:	781a      	ldrb	r2, [r3, #0]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800670c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4a08      	ldr	r2, [pc, #32]	; (8006734 <tcp_alloc+0x100>)
 8006714:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4a07      	ldr	r2, [pc, #28]	; (8006738 <tcp_alloc+0x104>)
 800671c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006720:	68fb      	ldr	r3, [r7, #12]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	2000b404 	.word	0x2000b404
 8006730:	2000b41a 	.word	0x2000b41a
 8006734:	080063ed 	.word	0x080063ed
 8006738:	006ddd00 	.word	0x006ddd00

0800673c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d107      	bne.n	800675a <tcp_pcb_purge+0x1e>
 800674a:	4b21      	ldr	r3, [pc, #132]	; (80067d0 <tcp_pcb_purge+0x94>)
 800674c:	f640 0251 	movw	r2, #2129	; 0x851
 8006750:	4920      	ldr	r1, [pc, #128]	; (80067d4 <tcp_pcb_purge+0x98>)
 8006752:	4821      	ldr	r0, [pc, #132]	; (80067d8 <tcp_pcb_purge+0x9c>)
 8006754:	f006 fd90 	bl	800d278 <iprintf>
 8006758:	e037      	b.n	80067ca <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	7d1b      	ldrb	r3, [r3, #20]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d033      	beq.n	80067ca <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8006766:	2b0a      	cmp	r3, #10
 8006768:	d02f      	beq.n	80067ca <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800676e:	2b01      	cmp	r3, #1
 8006770:	d02b      	beq.n	80067ca <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006776:	2b00      	cmp	r3, #0
 8006778:	d007      	beq.n	800678a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800677e:	4618      	mov	r0, r3
 8006780:	f7fe fb7c 	bl	8004e7c <pbuf_free>
      pcb->refused_data = NULL;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800678e:	2b00      	cmp	r3, #0
 8006790:	d002      	beq.n	8006798 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f986 	bl	8006aa4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800679e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7ff fdc7 	bl	8006338 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7ff fdc2 	bl	8006338 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	66da      	str	r2, [r3, #108]	; 0x6c
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80067ca:	3708      	adds	r7, #8
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	0800edfc 	.word	0x0800edfc
 80067d4:	0800f448 	.word	0x0800f448
 80067d8:	0800ee40 	.word	0x0800ee40

080067dc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d106      	bne.n	80067fa <tcp_pcb_remove+0x1e>
 80067ec:	4b3e      	ldr	r3, [pc, #248]	; (80068e8 <tcp_pcb_remove+0x10c>)
 80067ee:	f640 0283 	movw	r2, #2179	; 0x883
 80067f2:	493e      	ldr	r1, [pc, #248]	; (80068ec <tcp_pcb_remove+0x110>)
 80067f4:	483e      	ldr	r0, [pc, #248]	; (80068f0 <tcp_pcb_remove+0x114>)
 80067f6:	f006 fd3f 	bl	800d278 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d106      	bne.n	800680e <tcp_pcb_remove+0x32>
 8006800:	4b39      	ldr	r3, [pc, #228]	; (80068e8 <tcp_pcb_remove+0x10c>)
 8006802:	f640 0284 	movw	r2, #2180	; 0x884
 8006806:	493b      	ldr	r1, [pc, #236]	; (80068f4 <tcp_pcb_remove+0x118>)
 8006808:	4839      	ldr	r0, [pc, #228]	; (80068f0 <tcp_pcb_remove+0x114>)
 800680a:	f006 fd35 	bl	800d278 <iprintf>

  TCP_RMV(pcblist, pcb);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	683a      	ldr	r2, [r7, #0]
 8006814:	429a      	cmp	r2, r3
 8006816:	d105      	bne.n	8006824 <tcp_pcb_remove+0x48>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68da      	ldr	r2, [r3, #12]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	e013      	b.n	800684c <tcp_pcb_remove+0x70>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	60fb      	str	r3, [r7, #12]
 800682a:	e00c      	b.n	8006846 <tcp_pcb_remove+0x6a>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	683a      	ldr	r2, [r7, #0]
 8006832:	429a      	cmp	r2, r3
 8006834:	d104      	bne.n	8006840 <tcp_pcb_remove+0x64>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	68da      	ldr	r2, [r3, #12]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	60da      	str	r2, [r3, #12]
 800683e:	e005      	b.n	800684c <tcp_pcb_remove+0x70>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	60fb      	str	r3, [r7, #12]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1ef      	bne.n	800682c <tcp_pcb_remove+0x50>
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	2200      	movs	r2, #0
 8006850:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8006852:	6838      	ldr	r0, [r7, #0]
 8006854:	f7ff ff72 	bl	800673c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	7d1b      	ldrb	r3, [r3, #20]
 800685c:	2b0a      	cmp	r3, #10
 800685e:	d013      	beq.n	8006888 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8006864:	2b01      	cmp	r3, #1
 8006866:	d00f      	beq.n	8006888 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	8b5b      	ldrh	r3, [r3, #26]
 800686c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8006870:	2b00      	cmp	r3, #0
 8006872:	d009      	beq.n	8006888 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	8b5b      	ldrh	r3, [r3, #26]
 8006878:	f043 0302 	orr.w	r3, r3, #2
 800687c:	b29a      	uxth	r2, r3
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006882:	6838      	ldr	r0, [r7, #0]
 8006884:	f002 ff6e 	bl	8009764 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	7d1b      	ldrb	r3, [r3, #20]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d020      	beq.n	80068d2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006894:	2b00      	cmp	r3, #0
 8006896:	d006      	beq.n	80068a6 <tcp_pcb_remove+0xca>
 8006898:	4b13      	ldr	r3, [pc, #76]	; (80068e8 <tcp_pcb_remove+0x10c>)
 800689a:	f640 0293 	movw	r2, #2195	; 0x893
 800689e:	4916      	ldr	r1, [pc, #88]	; (80068f8 <tcp_pcb_remove+0x11c>)
 80068a0:	4813      	ldr	r0, [pc, #76]	; (80068f0 <tcp_pcb_remove+0x114>)
 80068a2:	f006 fce9 	bl	800d278 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d006      	beq.n	80068bc <tcp_pcb_remove+0xe0>
 80068ae:	4b0e      	ldr	r3, [pc, #56]	; (80068e8 <tcp_pcb_remove+0x10c>)
 80068b0:	f640 0294 	movw	r2, #2196	; 0x894
 80068b4:	4911      	ldr	r1, [pc, #68]	; (80068fc <tcp_pcb_remove+0x120>)
 80068b6:	480e      	ldr	r0, [pc, #56]	; (80068f0 <tcp_pcb_remove+0x114>)
 80068b8:	f006 fcde 	bl	800d278 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d006      	beq.n	80068d2 <tcp_pcb_remove+0xf6>
 80068c4:	4b08      	ldr	r3, [pc, #32]	; (80068e8 <tcp_pcb_remove+0x10c>)
 80068c6:	f640 0296 	movw	r2, #2198	; 0x896
 80068ca:	490d      	ldr	r1, [pc, #52]	; (8006900 <tcp_pcb_remove+0x124>)
 80068cc:	4808      	ldr	r0, [pc, #32]	; (80068f0 <tcp_pcb_remove+0x114>)
 80068ce:	f006 fcd3 	bl	800d278 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2200      	movs	r2, #0
 80068d6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	2200      	movs	r2, #0
 80068dc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80068de:	bf00      	nop
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	0800edfc 	.word	0x0800edfc
 80068ec:	0800f464 	.word	0x0800f464
 80068f0:	0800ee40 	.word	0x0800ee40
 80068f4:	0800f480 	.word	0x0800f480
 80068f8:	0800f4a0 	.word	0x0800f4a0
 80068fc:	0800f4b8 	.word	0x0800f4b8
 8006900:	0800f4d4 	.word	0x0800f4d4

08006904 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d106      	bne.n	8006920 <tcp_next_iss+0x1c>
 8006912:	4b0a      	ldr	r3, [pc, #40]	; (800693c <tcp_next_iss+0x38>)
 8006914:	f640 02af 	movw	r2, #2223	; 0x8af
 8006918:	4909      	ldr	r1, [pc, #36]	; (8006940 <tcp_next_iss+0x3c>)
 800691a:	480a      	ldr	r0, [pc, #40]	; (8006944 <tcp_next_iss+0x40>)
 800691c:	f006 fcac 	bl	800d278 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8006920:	4b09      	ldr	r3, [pc, #36]	; (8006948 <tcp_next_iss+0x44>)
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	4b09      	ldr	r3, [pc, #36]	; (800694c <tcp_next_iss+0x48>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4413      	add	r3, r2
 800692a:	4a07      	ldr	r2, [pc, #28]	; (8006948 <tcp_next_iss+0x44>)
 800692c:	6013      	str	r3, [r2, #0]
  return iss;
 800692e:	4b06      	ldr	r3, [pc, #24]	; (8006948 <tcp_next_iss+0x44>)
 8006930:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8006932:	4618      	mov	r0, r3
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	0800edfc 	.word	0x0800edfc
 8006940:	0800f4ec 	.word	0x0800f4ec
 8006944:	0800ee40 	.word	0x0800ee40
 8006948:	20000024 	.word	0x20000024
 800694c:	2000b404 	.word	0x2000b404

08006950 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	4603      	mov	r3, r0
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d106      	bne.n	8006972 <tcp_eff_send_mss_netif+0x22>
 8006964:	4b14      	ldr	r3, [pc, #80]	; (80069b8 <tcp_eff_send_mss_netif+0x68>)
 8006966:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800696a:	4914      	ldr	r1, [pc, #80]	; (80069bc <tcp_eff_send_mss_netif+0x6c>)
 800696c:	4814      	ldr	r0, [pc, #80]	; (80069c0 <tcp_eff_send_mss_netif+0x70>)
 800696e:	f006 fc83 	bl	800d278 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8006978:	89fb      	ldrh	r3, [r7, #14]
 800697a:	e019      	b.n	80069b0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006980:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8006982:	8afb      	ldrh	r3, [r7, #22]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d012      	beq.n	80069ae <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8006988:	2328      	movs	r3, #40	; 0x28
 800698a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800698c:	8afa      	ldrh	r2, [r7, #22]
 800698e:	8abb      	ldrh	r3, [r7, #20]
 8006990:	429a      	cmp	r2, r3
 8006992:	d904      	bls.n	800699e <tcp_eff_send_mss_netif+0x4e>
 8006994:	8afa      	ldrh	r2, [r7, #22]
 8006996:	8abb      	ldrh	r3, [r7, #20]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	b29b      	uxth	r3, r3
 800699c:	e000      	b.n	80069a0 <tcp_eff_send_mss_netif+0x50>
 800699e:	2300      	movs	r3, #0
 80069a0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80069a2:	8a7a      	ldrh	r2, [r7, #18]
 80069a4:	89fb      	ldrh	r3, [r7, #14]
 80069a6:	4293      	cmp	r3, r2
 80069a8:	bf28      	it	cs
 80069aa:	4613      	movcs	r3, r2
 80069ac:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80069ae:	89fb      	ldrh	r3, [r7, #14]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3718      	adds	r7, #24
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	0800edfc 	.word	0x0800edfc
 80069bc:	0800f508 	.word	0x0800f508
 80069c0:	0800ee40 	.word	0x0800ee40

080069c4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d119      	bne.n	8006a0c <tcp_netif_ip_addr_changed_pcblist+0x48>
 80069d8:	4b10      	ldr	r3, [pc, #64]	; (8006a1c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80069da:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80069de:	4910      	ldr	r1, [pc, #64]	; (8006a20 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80069e0:	4810      	ldr	r0, [pc, #64]	; (8006a24 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80069e2:	f006 fc49 	bl	800d278 <iprintf>

  while (pcb != NULL) {
 80069e6:	e011      	b.n	8006a0c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d108      	bne.n	8006a06 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f7fe ffc6 	bl	800598c <tcp_abort>
      pcb = next;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	e002      	b.n	8006a0c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1ea      	bne.n	80069e8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8006a12:	bf00      	nop
 8006a14:	bf00      	nop
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	0800edfc 	.word	0x0800edfc
 8006a20:	0800f530 	.word	0x0800f530
 8006a24:	0800ee40 	.word	0x0800ee40

08006a28 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d02a      	beq.n	8006a8e <tcp_netif_ip_addr_changed+0x66>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d026      	beq.n	8006a8e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006a40:	4b15      	ldr	r3, [pc, #84]	; (8006a98 <tcp_netif_ip_addr_changed+0x70>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4619      	mov	r1, r3
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7ff ffbc 	bl	80069c4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006a4c:	4b13      	ldr	r3, [pc, #76]	; (8006a9c <tcp_netif_ip_addr_changed+0x74>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4619      	mov	r1, r3
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7ff ffb6 	bl	80069c4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d017      	beq.n	8006a8e <tcp_netif_ip_addr_changed+0x66>
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d013      	beq.n	8006a8e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006a66:	4b0e      	ldr	r3, [pc, #56]	; (8006aa0 <tcp_netif_ip_addr_changed+0x78>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	60fb      	str	r3, [r7, #12]
 8006a6c:	e00c      	b.n	8006a88 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d103      	bne.n	8006a82 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	60fb      	str	r3, [r7, #12]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1ef      	bne.n	8006a6e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006a8e:	bf00      	nop
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	2000b410 	.word	0x2000b410
 8006a9c:	2000b408 	.word	0x2000b408
 8006aa0:	2000b40c 	.word	0x2000b40c

08006aa4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d007      	beq.n	8006ac4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7ff fc3d 	bl	8006338 <tcp_segs_free>
    pcb->ooseq = NULL;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8006ac4:	bf00      	nop
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8006acc:	b590      	push	{r4, r7, lr}
 8006ace:	b08d      	sub	sp, #52	; 0x34
 8006ad0:	af04      	add	r7, sp, #16
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d105      	bne.n	8006ae8 <tcp_input+0x1c>
 8006adc:	4b9b      	ldr	r3, [pc, #620]	; (8006d4c <tcp_input+0x280>)
 8006ade:	2283      	movs	r2, #131	; 0x83
 8006ae0:	499b      	ldr	r1, [pc, #620]	; (8006d50 <tcp_input+0x284>)
 8006ae2:	489c      	ldr	r0, [pc, #624]	; (8006d54 <tcp_input+0x288>)
 8006ae4:	f006 fbc8 	bl	800d278 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	4a9a      	ldr	r2, [pc, #616]	; (8006d58 <tcp_input+0x28c>)
 8006aee:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	895b      	ldrh	r3, [r3, #10]
 8006af4:	2b13      	cmp	r3, #19
 8006af6:	f240 83d1 	bls.w	800729c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006afa:	4b98      	ldr	r3, [pc, #608]	; (8006d5c <tcp_input+0x290>)
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	4a97      	ldr	r2, [pc, #604]	; (8006d5c <tcp_input+0x290>)
 8006b00:	6812      	ldr	r2, [r2, #0]
 8006b02:	4611      	mov	r1, r2
 8006b04:	4618      	mov	r0, r3
 8006b06:	f005 fc17 	bl	800c338 <ip4_addr_isbroadcast_u32>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f040 83c7 	bne.w	80072a0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8006b12:	4b92      	ldr	r3, [pc, #584]	; (8006d5c <tcp_input+0x290>)
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006b1a:	2be0      	cmp	r3, #224	; 0xe0
 8006b1c:	f000 83c0 	beq.w	80072a0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8006b20:	4b8d      	ldr	r3, [pc, #564]	; (8006d58 <tcp_input+0x28c>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	899b      	ldrh	r3, [r3, #12]
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7fc fe49 	bl	80037c0 <lwip_htons>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	0b1b      	lsrs	r3, r3, #12
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8006b3a:	7cbb      	ldrb	r3, [r7, #18]
 8006b3c:	2b13      	cmp	r3, #19
 8006b3e:	f240 83b1 	bls.w	80072a4 <tcp_input+0x7d8>
 8006b42:	7cbb      	ldrb	r3, [r7, #18]
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	891b      	ldrh	r3, [r3, #8]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	f200 83aa 	bhi.w	80072a4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8006b50:	7cbb      	ldrb	r3, [r7, #18]
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	3b14      	subs	r3, #20
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	4b81      	ldr	r3, [pc, #516]	; (8006d60 <tcp_input+0x294>)
 8006b5a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8006b5c:	4b81      	ldr	r3, [pc, #516]	; (8006d64 <tcp_input+0x298>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	895a      	ldrh	r2, [r3, #10]
 8006b66:	7cbb      	ldrb	r3, [r7, #18]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d309      	bcc.n	8006b82 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8006b6e:	4b7c      	ldr	r3, [pc, #496]	; (8006d60 <tcp_input+0x294>)
 8006b70:	881a      	ldrh	r2, [r3, #0]
 8006b72:	4b7d      	ldr	r3, [pc, #500]	; (8006d68 <tcp_input+0x29c>)
 8006b74:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8006b76:	7cbb      	ldrb	r3, [r7, #18]
 8006b78:	4619      	mov	r1, r3
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7fe f8f8 	bl	8004d70 <pbuf_remove_header>
 8006b80:	e04e      	b.n	8006c20 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d105      	bne.n	8006b96 <tcp_input+0xca>
 8006b8a:	4b70      	ldr	r3, [pc, #448]	; (8006d4c <tcp_input+0x280>)
 8006b8c:	22c2      	movs	r2, #194	; 0xc2
 8006b8e:	4977      	ldr	r1, [pc, #476]	; (8006d6c <tcp_input+0x2a0>)
 8006b90:	4870      	ldr	r0, [pc, #448]	; (8006d54 <tcp_input+0x288>)
 8006b92:	f006 fb71 	bl	800d278 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8006b96:	2114      	movs	r1, #20
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f7fe f8e9 	bl	8004d70 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	895a      	ldrh	r2, [r3, #10]
 8006ba2:	4b71      	ldr	r3, [pc, #452]	; (8006d68 <tcp_input+0x29c>)
 8006ba4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8006ba6:	4b6e      	ldr	r3, [pc, #440]	; (8006d60 <tcp_input+0x294>)
 8006ba8:	881a      	ldrh	r2, [r3, #0]
 8006baa:	4b6f      	ldr	r3, [pc, #444]	; (8006d68 <tcp_input+0x29c>)
 8006bac:	881b      	ldrh	r3, [r3, #0]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8006bb2:	4b6d      	ldr	r3, [pc, #436]	; (8006d68 <tcp_input+0x29c>)
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7fe f8d9 	bl	8004d70 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	895b      	ldrh	r3, [r3, #10]
 8006bc4:	8a3a      	ldrh	r2, [r7, #16]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	f200 836e 	bhi.w	80072a8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	4a64      	ldr	r2, [pc, #400]	; (8006d64 <tcp_input+0x298>)
 8006bd4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	8a3a      	ldrh	r2, [r7, #16]
 8006bdc:	4611      	mov	r1, r2
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fe f8c6 	bl	8004d70 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	891a      	ldrh	r2, [r3, #8]
 8006be8:	8a3b      	ldrh	r3, [r7, #16]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	895b      	ldrh	r3, [r3, #10]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d005      	beq.n	8006c06 <tcp_input+0x13a>
 8006bfa:	4b54      	ldr	r3, [pc, #336]	; (8006d4c <tcp_input+0x280>)
 8006bfc:	22df      	movs	r2, #223	; 0xdf
 8006bfe:	495c      	ldr	r1, [pc, #368]	; (8006d70 <tcp_input+0x2a4>)
 8006c00:	4854      	ldr	r0, [pc, #336]	; (8006d54 <tcp_input+0x288>)
 8006c02:	f006 fb39 	bl	800d278 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	891a      	ldrh	r2, [r3, #8]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	891b      	ldrh	r3, [r3, #8]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d005      	beq.n	8006c20 <tcp_input+0x154>
 8006c14:	4b4d      	ldr	r3, [pc, #308]	; (8006d4c <tcp_input+0x280>)
 8006c16:	22e0      	movs	r2, #224	; 0xe0
 8006c18:	4956      	ldr	r1, [pc, #344]	; (8006d74 <tcp_input+0x2a8>)
 8006c1a:	484e      	ldr	r0, [pc, #312]	; (8006d54 <tcp_input+0x288>)
 8006c1c:	f006 fb2c 	bl	800d278 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8006c20:	4b4d      	ldr	r3, [pc, #308]	; (8006d58 <tcp_input+0x28c>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	881b      	ldrh	r3, [r3, #0]
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	4a4b      	ldr	r2, [pc, #300]	; (8006d58 <tcp_input+0x28c>)
 8006c2a:	6814      	ldr	r4, [r2, #0]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7fc fdc7 	bl	80037c0 <lwip_htons>
 8006c32:	4603      	mov	r3, r0
 8006c34:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8006c36:	4b48      	ldr	r3, [pc, #288]	; (8006d58 <tcp_input+0x28c>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	885b      	ldrh	r3, [r3, #2]
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	4a46      	ldr	r2, [pc, #280]	; (8006d58 <tcp_input+0x28c>)
 8006c40:	6814      	ldr	r4, [r2, #0]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fc fdbc 	bl	80037c0 <lwip_htons>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006c4c:	4b42      	ldr	r3, [pc, #264]	; (8006d58 <tcp_input+0x28c>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	4a41      	ldr	r2, [pc, #260]	; (8006d58 <tcp_input+0x28c>)
 8006c54:	6814      	ldr	r4, [r2, #0]
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7fc fdc7 	bl	80037ea <lwip_htonl>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	6063      	str	r3, [r4, #4]
 8006c60:	6863      	ldr	r3, [r4, #4]
 8006c62:	4a45      	ldr	r2, [pc, #276]	; (8006d78 <tcp_input+0x2ac>)
 8006c64:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006c66:	4b3c      	ldr	r3, [pc, #240]	; (8006d58 <tcp_input+0x28c>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	4a3a      	ldr	r2, [pc, #232]	; (8006d58 <tcp_input+0x28c>)
 8006c6e:	6814      	ldr	r4, [r2, #0]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fc fdba 	bl	80037ea <lwip_htonl>
 8006c76:	4603      	mov	r3, r0
 8006c78:	60a3      	str	r3, [r4, #8]
 8006c7a:	68a3      	ldr	r3, [r4, #8]
 8006c7c:	4a3f      	ldr	r2, [pc, #252]	; (8006d7c <tcp_input+0x2b0>)
 8006c7e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006c80:	4b35      	ldr	r3, [pc, #212]	; (8006d58 <tcp_input+0x28c>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	89db      	ldrh	r3, [r3, #14]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	4a33      	ldr	r2, [pc, #204]	; (8006d58 <tcp_input+0x28c>)
 8006c8a:	6814      	ldr	r4, [r2, #0]
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7fc fd97 	bl	80037c0 <lwip_htons>
 8006c92:	4603      	mov	r3, r0
 8006c94:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8006c96:	4b30      	ldr	r3, [pc, #192]	; (8006d58 <tcp_input+0x28c>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	899b      	ldrh	r3, [r3, #12]
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fc fd8e 	bl	80037c0 <lwip_htons>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	4b34      	ldr	r3, [pc, #208]	; (8006d80 <tcp_input+0x2b4>)
 8006cb0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	891a      	ldrh	r2, [r3, #8]
 8006cb6:	4b33      	ldr	r3, [pc, #204]	; (8006d84 <tcp_input+0x2b8>)
 8006cb8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8006cba:	4b31      	ldr	r3, [pc, #196]	; (8006d80 <tcp_input+0x2b4>)
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	f003 0303 	and.w	r3, r3, #3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00c      	beq.n	8006ce0 <tcp_input+0x214>
    tcplen++;
 8006cc6:	4b2f      	ldr	r3, [pc, #188]	; (8006d84 <tcp_input+0x2b8>)
 8006cc8:	881b      	ldrh	r3, [r3, #0]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	4b2d      	ldr	r3, [pc, #180]	; (8006d84 <tcp_input+0x2b8>)
 8006cd0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	891a      	ldrh	r2, [r3, #8]
 8006cd6:	4b2b      	ldr	r3, [pc, #172]	; (8006d84 <tcp_input+0x2b8>)
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	f200 82e6 	bhi.w	80072ac <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ce4:	4b28      	ldr	r3, [pc, #160]	; (8006d88 <tcp_input+0x2bc>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	61fb      	str	r3, [r7, #28]
 8006cea:	e09d      	b.n	8006e28 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	7d1b      	ldrb	r3, [r3, #20]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d105      	bne.n	8006d00 <tcp_input+0x234>
 8006cf4:	4b15      	ldr	r3, [pc, #84]	; (8006d4c <tcp_input+0x280>)
 8006cf6:	22fb      	movs	r2, #251	; 0xfb
 8006cf8:	4924      	ldr	r1, [pc, #144]	; (8006d8c <tcp_input+0x2c0>)
 8006cfa:	4816      	ldr	r0, [pc, #88]	; (8006d54 <tcp_input+0x288>)
 8006cfc:	f006 fabc 	bl	800d278 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	7d1b      	ldrb	r3, [r3, #20]
 8006d04:	2b0a      	cmp	r3, #10
 8006d06:	d105      	bne.n	8006d14 <tcp_input+0x248>
 8006d08:	4b10      	ldr	r3, [pc, #64]	; (8006d4c <tcp_input+0x280>)
 8006d0a:	22fc      	movs	r2, #252	; 0xfc
 8006d0c:	4920      	ldr	r1, [pc, #128]	; (8006d90 <tcp_input+0x2c4>)
 8006d0e:	4811      	ldr	r0, [pc, #68]	; (8006d54 <tcp_input+0x288>)
 8006d10:	f006 fab2 	bl	800d278 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	7d1b      	ldrb	r3, [r3, #20]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d105      	bne.n	8006d28 <tcp_input+0x25c>
 8006d1c:	4b0b      	ldr	r3, [pc, #44]	; (8006d4c <tcp_input+0x280>)
 8006d1e:	22fd      	movs	r2, #253	; 0xfd
 8006d20:	491c      	ldr	r1, [pc, #112]	; (8006d94 <tcp_input+0x2c8>)
 8006d22:	480c      	ldr	r0, [pc, #48]	; (8006d54 <tcp_input+0x288>)
 8006d24:	f006 faa8 	bl	800d278 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	7a1b      	ldrb	r3, [r3, #8]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d033      	beq.n	8006d98 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	7a1a      	ldrb	r2, [r3, #8]
 8006d34:	4b09      	ldr	r3, [pc, #36]	; (8006d5c <tcp_input+0x290>)
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d029      	beq.n	8006d98 <tcp_input+0x2cc>
      prev = pcb;
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	61bb      	str	r3, [r7, #24]
      continue;
 8006d48:	e06b      	b.n	8006e22 <tcp_input+0x356>
 8006d4a:	bf00      	nop
 8006d4c:	0800f564 	.word	0x0800f564
 8006d50:	0800f598 	.word	0x0800f598
 8006d54:	0800f5b0 	.word	0x0800f5b0
 8006d58:	2000b42c 	.word	0x2000b42c
 8006d5c:	20004cd4 	.word	0x20004cd4
 8006d60:	2000b430 	.word	0x2000b430
 8006d64:	2000b434 	.word	0x2000b434
 8006d68:	2000b432 	.word	0x2000b432
 8006d6c:	0800f5d8 	.word	0x0800f5d8
 8006d70:	0800f5e8 	.word	0x0800f5e8
 8006d74:	0800f5f4 	.word	0x0800f5f4
 8006d78:	2000b43c 	.word	0x2000b43c
 8006d7c:	2000b440 	.word	0x2000b440
 8006d80:	2000b448 	.word	0x2000b448
 8006d84:	2000b446 	.word	0x2000b446
 8006d88:	2000b410 	.word	0x2000b410
 8006d8c:	0800f614 	.word	0x0800f614
 8006d90:	0800f63c 	.word	0x0800f63c
 8006d94:	0800f668 	.word	0x0800f668
    }

    if (pcb->remote_port == tcphdr->src &&
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	8b1a      	ldrh	r2, [r3, #24]
 8006d9c:	4b72      	ldr	r3, [pc, #456]	; (8006f68 <tcp_input+0x49c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d13a      	bne.n	8006e1e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	8ada      	ldrh	r2, [r3, #22]
 8006dac:	4b6e      	ldr	r3, [pc, #440]	; (8006f68 <tcp_input+0x49c>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	885b      	ldrh	r3, [r3, #2]
 8006db2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d132      	bne.n	8006e1e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	4b6b      	ldr	r3, [pc, #428]	; (8006f6c <tcp_input+0x4a0>)
 8006dbe:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d12c      	bne.n	8006e1e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	4b68      	ldr	r3, [pc, #416]	; (8006f6c <tcp_input+0x4a0>)
 8006dca:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d126      	bne.n	8006e1e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	69fa      	ldr	r2, [r7, #28]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d106      	bne.n	8006de8 <tcp_input+0x31c>
 8006dda:	4b65      	ldr	r3, [pc, #404]	; (8006f70 <tcp_input+0x4a4>)
 8006ddc:	f240 120d 	movw	r2, #269	; 0x10d
 8006de0:	4964      	ldr	r1, [pc, #400]	; (8006f74 <tcp_input+0x4a8>)
 8006de2:	4865      	ldr	r0, [pc, #404]	; (8006f78 <tcp_input+0x4ac>)
 8006de4:	f006 fa48 	bl	800d278 <iprintf>
      if (prev != NULL) {
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00a      	beq.n	8006e04 <tcp_input+0x338>
        prev->next = pcb->next;
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	68da      	ldr	r2, [r3, #12]
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8006df6:	4b61      	ldr	r3, [pc, #388]	; (8006f7c <tcp_input+0x4b0>)
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8006dfe:	4a5f      	ldr	r2, [pc, #380]	; (8006f7c <tcp_input+0x4b0>)
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	69fa      	ldr	r2, [r7, #28]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d111      	bne.n	8006e32 <tcp_input+0x366>
 8006e0e:	4b58      	ldr	r3, [pc, #352]	; (8006f70 <tcp_input+0x4a4>)
 8006e10:	f240 1215 	movw	r2, #277	; 0x115
 8006e14:	495a      	ldr	r1, [pc, #360]	; (8006f80 <tcp_input+0x4b4>)
 8006e16:	4858      	ldr	r0, [pc, #352]	; (8006f78 <tcp_input+0x4ac>)
 8006e18:	f006 fa2e 	bl	800d278 <iprintf>
      break;
 8006e1c:	e009      	b.n	8006e32 <tcp_input+0x366>
    }
    prev = pcb;
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	61fb      	str	r3, [r7, #28]
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f47f af5e 	bne.w	8006cec <tcp_input+0x220>
 8006e30:	e000      	b.n	8006e34 <tcp_input+0x368>
      break;
 8006e32:	bf00      	nop
  }

  if (pcb == NULL) {
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f040 80aa 	bne.w	8006f90 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e3c:	4b51      	ldr	r3, [pc, #324]	; (8006f84 <tcp_input+0x4b8>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	61fb      	str	r3, [r7, #28]
 8006e42:	e03f      	b.n	8006ec4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	7d1b      	ldrb	r3, [r3, #20]
 8006e48:	2b0a      	cmp	r3, #10
 8006e4a:	d006      	beq.n	8006e5a <tcp_input+0x38e>
 8006e4c:	4b48      	ldr	r3, [pc, #288]	; (8006f70 <tcp_input+0x4a4>)
 8006e4e:	f240 121f 	movw	r2, #287	; 0x11f
 8006e52:	494d      	ldr	r1, [pc, #308]	; (8006f88 <tcp_input+0x4bc>)
 8006e54:	4848      	ldr	r0, [pc, #288]	; (8006f78 <tcp_input+0x4ac>)
 8006e56:	f006 fa0f 	bl	800d278 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	7a1b      	ldrb	r3, [r3, #8]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d009      	beq.n	8006e76 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	7a1a      	ldrb	r2, [r3, #8]
 8006e66:	4b41      	ldr	r3, [pc, #260]	; (8006f6c <tcp_input+0x4a0>)
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e6e:	3301      	adds	r3, #1
 8006e70:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d122      	bne.n	8006ebc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	8b1a      	ldrh	r2, [r3, #24]
 8006e7a:	4b3b      	ldr	r3, [pc, #236]	; (8006f68 <tcp_input+0x49c>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	881b      	ldrh	r3, [r3, #0]
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d11b      	bne.n	8006ebe <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	8ada      	ldrh	r2, [r3, #22]
 8006e8a:	4b37      	ldr	r3, [pc, #220]	; (8006f68 <tcp_input+0x49c>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	885b      	ldrh	r3, [r3, #2]
 8006e90:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d113      	bne.n	8006ebe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	685a      	ldr	r2, [r3, #4]
 8006e9a:	4b34      	ldr	r3, [pc, #208]	; (8006f6c <tcp_input+0x4a0>)
 8006e9c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d10d      	bne.n	8006ebe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	4b31      	ldr	r3, [pc, #196]	; (8006f6c <tcp_input+0x4a0>)
 8006ea8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d107      	bne.n	8006ebe <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8006eae:	69f8      	ldr	r0, [r7, #28]
 8006eb0:	f000 fb56 	bl	8007560 <tcp_timewait_input>
        }
        pbuf_free(p);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f7fd ffe1 	bl	8004e7c <pbuf_free>
        return;
 8006eba:	e1fd      	b.n	80072b8 <tcp_input+0x7ec>
        continue;
 8006ebc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	61fb      	str	r3, [r7, #28]
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1bc      	bne.n	8006e44 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006ece:	4b2f      	ldr	r3, [pc, #188]	; (8006f8c <tcp_input+0x4c0>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	617b      	str	r3, [r7, #20]
 8006ed4:	e02a      	b.n	8006f2c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	7a1b      	ldrb	r3, [r3, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00c      	beq.n	8006ef8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	7a1a      	ldrb	r2, [r3, #8]
 8006ee2:	4b22      	ldr	r3, [pc, #136]	; (8006f6c <tcp_input+0x4a0>)
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006eea:	3301      	adds	r3, #1
 8006eec:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d002      	beq.n	8006ef8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	61bb      	str	r3, [r7, #24]
        continue;
 8006ef6:	e016      	b.n	8006f26 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	8ada      	ldrh	r2, [r3, #22]
 8006efc:	4b1a      	ldr	r3, [pc, #104]	; (8006f68 <tcp_input+0x49c>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	885b      	ldrh	r3, [r3, #2]
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d10c      	bne.n	8006f22 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	4b17      	ldr	r3, [pc, #92]	; (8006f6c <tcp_input+0x4a0>)
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d00f      	beq.n	8006f34 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00d      	beq.n	8006f36 <tcp_input+0x46a>
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d009      	beq.n	8006f36 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	617b      	str	r3, [r7, #20]
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1d1      	bne.n	8006ed6 <tcp_input+0x40a>
 8006f32:	e000      	b.n	8006f36 <tcp_input+0x46a>
            break;
 8006f34:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d029      	beq.n	8006f90 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00a      	beq.n	8006f58 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	68da      	ldr	r2, [r3, #12]
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8006f4a:	4b10      	ldr	r3, [pc, #64]	; (8006f8c <tcp_input+0x4c0>)
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8006f52:	4a0e      	ldr	r2, [pc, #56]	; (8006f8c <tcp_input+0x4c0>)
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8006f58:	6978      	ldr	r0, [r7, #20]
 8006f5a:	f000 fa03 	bl	8007364 <tcp_listen_input>
      }
      pbuf_free(p);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7fd ff8c 	bl	8004e7c <pbuf_free>
      return;
 8006f64:	e1a8      	b.n	80072b8 <tcp_input+0x7ec>
 8006f66:	bf00      	nop
 8006f68:	2000b42c 	.word	0x2000b42c
 8006f6c:	20004cd4 	.word	0x20004cd4
 8006f70:	0800f564 	.word	0x0800f564
 8006f74:	0800f690 	.word	0x0800f690
 8006f78:	0800f5b0 	.word	0x0800f5b0
 8006f7c:	2000b410 	.word	0x2000b410
 8006f80:	0800f6bc 	.word	0x0800f6bc
 8006f84:	2000b414 	.word	0x2000b414
 8006f88:	0800f6e8 	.word	0x0800f6e8
 8006f8c:	2000b40c 	.word	0x2000b40c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f000 8158 	beq.w	8007248 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8006f98:	4b95      	ldr	r3, [pc, #596]	; (80071f0 <tcp_input+0x724>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	891a      	ldrh	r2, [r3, #8]
 8006fa2:	4b93      	ldr	r3, [pc, #588]	; (80071f0 <tcp_input+0x724>)
 8006fa4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8006fa6:	4a92      	ldr	r2, [pc, #584]	; (80071f0 <tcp_input+0x724>)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8006fac:	4b91      	ldr	r3, [pc, #580]	; (80071f4 <tcp_input+0x728>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a8f      	ldr	r2, [pc, #572]	; (80071f0 <tcp_input+0x724>)
 8006fb2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8006fb4:	4b90      	ldr	r3, [pc, #576]	; (80071f8 <tcp_input+0x72c>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8006fba:	4b90      	ldr	r3, [pc, #576]	; (80071fc <tcp_input+0x730>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8006fc0:	4b8f      	ldr	r3, [pc, #572]	; (8007200 <tcp_input+0x734>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8006fc6:	4b8f      	ldr	r3, [pc, #572]	; (8007204 <tcp_input+0x738>)
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	f003 0308 	and.w	r3, r3, #8
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d006      	beq.n	8006fe0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	7b5b      	ldrb	r3, [r3, #13]
 8006fd6:	f043 0301 	orr.w	r3, r3, #1
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d017      	beq.n	8007018 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006fe8:	69f8      	ldr	r0, [r7, #28]
 8006fea:	f7ff f929 	bl	8006240 <tcp_process_refused_data>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	f113 0f0d 	cmn.w	r3, #13
 8006ff4:	d007      	beq.n	8007006 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00c      	beq.n	8007018 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006ffe:	4b82      	ldr	r3, [pc, #520]	; (8007208 <tcp_input+0x73c>)
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d008      	beq.n	8007018 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800700a:	2b00      	cmp	r3, #0
 800700c:	f040 80e3 	bne.w	80071d6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007010:	69f8      	ldr	r0, [r7, #28]
 8007012:	f003 f9ad 	bl	800a370 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007016:	e0de      	b.n	80071d6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8007018:	4a7c      	ldr	r2, [pc, #496]	; (800720c <tcp_input+0x740>)
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800701e:	69f8      	ldr	r0, [r7, #28]
 8007020:	f000 fb18 	bl	8007654 <tcp_process>
 8007024:	4603      	mov	r3, r0
 8007026:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007028:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800702c:	f113 0f0d 	cmn.w	r3, #13
 8007030:	f000 80d3 	beq.w	80071da <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8007034:	4b71      	ldr	r3, [pc, #452]	; (80071fc <tcp_input+0x730>)
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	f003 0308 	and.w	r3, r3, #8
 800703c:	2b00      	cmp	r3, #0
 800703e:	d015      	beq.n	800706c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007046:	2b00      	cmp	r3, #0
 8007048:	d008      	beq.n	800705c <tcp_input+0x590>
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007050:	69fa      	ldr	r2, [r7, #28]
 8007052:	6912      	ldr	r2, [r2, #16]
 8007054:	f06f 010d 	mvn.w	r1, #13
 8007058:	4610      	mov	r0, r2
 800705a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800705c:	69f9      	ldr	r1, [r7, #28]
 800705e:	486c      	ldr	r0, [pc, #432]	; (8007210 <tcp_input+0x744>)
 8007060:	f7ff fbbc 	bl	80067dc <tcp_pcb_remove>
        tcp_free(pcb);
 8007064:	69f8      	ldr	r0, [r7, #28]
 8007066:	f7fe f9a9 	bl	80053bc <tcp_free>
 800706a:	e0da      	b.n	8007222 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800706c:	2300      	movs	r3, #0
 800706e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007070:	4b63      	ldr	r3, [pc, #396]	; (8007200 <tcp_input+0x734>)
 8007072:	881b      	ldrh	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d01d      	beq.n	80070b4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007078:	4b61      	ldr	r3, [pc, #388]	; (8007200 <tcp_input+0x734>)
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00a      	beq.n	800709e <tcp_input+0x5d2>
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800708e:	69fa      	ldr	r2, [r7, #28]
 8007090:	6910      	ldr	r0, [r2, #16]
 8007092:	89fa      	ldrh	r2, [r7, #14]
 8007094:	69f9      	ldr	r1, [r7, #28]
 8007096:	4798      	blx	r3
 8007098:	4603      	mov	r3, r0
 800709a:	74fb      	strb	r3, [r7, #19]
 800709c:	e001      	b.n	80070a2 <tcp_input+0x5d6>
 800709e:	2300      	movs	r3, #0
 80070a0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80070a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80070a6:	f113 0f0d 	cmn.w	r3, #13
 80070aa:	f000 8098 	beq.w	80071de <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80070ae:	4b54      	ldr	r3, [pc, #336]	; (8007200 <tcp_input+0x734>)
 80070b0:	2200      	movs	r2, #0
 80070b2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80070b4:	69f8      	ldr	r0, [r7, #28]
 80070b6:	f000 f915 	bl	80072e4 <tcp_input_delayed_close>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f040 8090 	bne.w	80071e2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80070c2:	4b4d      	ldr	r3, [pc, #308]	; (80071f8 <tcp_input+0x72c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d041      	beq.n	800714e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d006      	beq.n	80070e0 <tcp_input+0x614>
 80070d2:	4b50      	ldr	r3, [pc, #320]	; (8007214 <tcp_input+0x748>)
 80070d4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80070d8:	494f      	ldr	r1, [pc, #316]	; (8007218 <tcp_input+0x74c>)
 80070da:	4850      	ldr	r0, [pc, #320]	; (800721c <tcp_input+0x750>)
 80070dc:	f006 f8cc 	bl	800d278 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	8b5b      	ldrh	r3, [r3, #26]
 80070e4:	f003 0310 	and.w	r3, r3, #16
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d008      	beq.n	80070fe <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80070ec:	4b42      	ldr	r3, [pc, #264]	; (80071f8 <tcp_input+0x72c>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7fd fec3 	bl	8004e7c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80070f6:	69f8      	ldr	r0, [r7, #28]
 80070f8:	f7fe fc48 	bl	800598c <tcp_abort>
            goto aborted;
 80070fc:	e091      	b.n	8007222 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00c      	beq.n	8007122 <tcp_input+0x656>
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	6918      	ldr	r0, [r3, #16]
 8007112:	4b39      	ldr	r3, [pc, #228]	; (80071f8 <tcp_input+0x72c>)
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	2300      	movs	r3, #0
 8007118:	69f9      	ldr	r1, [r7, #28]
 800711a:	47a0      	blx	r4
 800711c:	4603      	mov	r3, r0
 800711e:	74fb      	strb	r3, [r7, #19]
 8007120:	e008      	b.n	8007134 <tcp_input+0x668>
 8007122:	4b35      	ldr	r3, [pc, #212]	; (80071f8 <tcp_input+0x72c>)
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	2300      	movs	r3, #0
 8007128:	69f9      	ldr	r1, [r7, #28]
 800712a:	2000      	movs	r0, #0
 800712c:	f7ff f95e 	bl	80063ec <tcp_recv_null>
 8007130:	4603      	mov	r3, r0
 8007132:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007134:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007138:	f113 0f0d 	cmn.w	r3, #13
 800713c:	d053      	beq.n	80071e6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800713e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d003      	beq.n	800714e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007146:	4b2c      	ldr	r3, [pc, #176]	; (80071f8 <tcp_input+0x72c>)
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800714e:	4b2b      	ldr	r3, [pc, #172]	; (80071fc <tcp_input+0x730>)
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	f003 0320 	and.w	r3, r3, #32
 8007156:	2b00      	cmp	r3, #0
 8007158:	d030      	beq.n	80071bc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800715e:	2b00      	cmp	r3, #0
 8007160:	d009      	beq.n	8007176 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007166:	7b5a      	ldrb	r2, [r3, #13]
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800716c:	f042 0220 	orr.w	r2, r2, #32
 8007170:	b2d2      	uxtb	r2, r2
 8007172:	735a      	strb	r2, [r3, #13]
 8007174:	e022      	b.n	80071bc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800717a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800717e:	d005      	beq.n	800718c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007184:	3301      	adds	r3, #1
 8007186:	b29a      	uxth	r2, r3
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00b      	beq.n	80071ae <tcp_input+0x6e2>
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	6918      	ldr	r0, [r3, #16]
 80071a0:	2300      	movs	r3, #0
 80071a2:	2200      	movs	r2, #0
 80071a4:	69f9      	ldr	r1, [r7, #28]
 80071a6:	47a0      	blx	r4
 80071a8:	4603      	mov	r3, r0
 80071aa:	74fb      	strb	r3, [r7, #19]
 80071ac:	e001      	b.n	80071b2 <tcp_input+0x6e6>
 80071ae:	2300      	movs	r3, #0
 80071b0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80071b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80071b6:	f113 0f0d 	cmn.w	r3, #13
 80071ba:	d016      	beq.n	80071ea <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80071bc:	4b13      	ldr	r3, [pc, #76]	; (800720c <tcp_input+0x740>)
 80071be:	2200      	movs	r2, #0
 80071c0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80071c2:	69f8      	ldr	r0, [r7, #28]
 80071c4:	f000 f88e 	bl	80072e4 <tcp_input_delayed_close>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d128      	bne.n	8007220 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80071ce:	69f8      	ldr	r0, [r7, #28]
 80071d0:	f002 fac8 	bl	8009764 <tcp_output>
 80071d4:	e025      	b.n	8007222 <tcp_input+0x756>
        goto aborted;
 80071d6:	bf00      	nop
 80071d8:	e023      	b.n	8007222 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80071da:	bf00      	nop
 80071dc:	e021      	b.n	8007222 <tcp_input+0x756>
              goto aborted;
 80071de:	bf00      	nop
 80071e0:	e01f      	b.n	8007222 <tcp_input+0x756>
          goto aborted;
 80071e2:	bf00      	nop
 80071e4:	e01d      	b.n	8007222 <tcp_input+0x756>
            goto aborted;
 80071e6:	bf00      	nop
 80071e8:	e01b      	b.n	8007222 <tcp_input+0x756>
              goto aborted;
 80071ea:	bf00      	nop
 80071ec:	e019      	b.n	8007222 <tcp_input+0x756>
 80071ee:	bf00      	nop
 80071f0:	2000b41c 	.word	0x2000b41c
 80071f4:	2000b42c 	.word	0x2000b42c
 80071f8:	2000b44c 	.word	0x2000b44c
 80071fc:	2000b449 	.word	0x2000b449
 8007200:	2000b444 	.word	0x2000b444
 8007204:	2000b448 	.word	0x2000b448
 8007208:	2000b446 	.word	0x2000b446
 800720c:	2000b450 	.word	0x2000b450
 8007210:	2000b410 	.word	0x2000b410
 8007214:	0800f564 	.word	0x0800f564
 8007218:	0800f718 	.word	0x0800f718
 800721c:	0800f5b0 	.word	0x0800f5b0
          goto aborted;
 8007220:	bf00      	nop
    tcp_input_pcb = NULL;
 8007222:	4b27      	ldr	r3, [pc, #156]	; (80072c0 <tcp_input+0x7f4>)
 8007224:	2200      	movs	r2, #0
 8007226:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007228:	4b26      	ldr	r3, [pc, #152]	; (80072c4 <tcp_input+0x7f8>)
 800722a:	2200      	movs	r2, #0
 800722c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800722e:	4b26      	ldr	r3, [pc, #152]	; (80072c8 <tcp_input+0x7fc>)
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d03f      	beq.n	80072b6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8007236:	4b24      	ldr	r3, [pc, #144]	; (80072c8 <tcp_input+0x7fc>)
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	4618      	mov	r0, r3
 800723c:	f7fd fe1e 	bl	8004e7c <pbuf_free>
      inseg.p = NULL;
 8007240:	4b21      	ldr	r3, [pc, #132]	; (80072c8 <tcp_input+0x7fc>)
 8007242:	2200      	movs	r2, #0
 8007244:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007246:	e036      	b.n	80072b6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007248:	4b20      	ldr	r3, [pc, #128]	; (80072cc <tcp_input+0x800>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	899b      	ldrh	r3, [r3, #12]
 800724e:	b29b      	uxth	r3, r3
 8007250:	4618      	mov	r0, r3
 8007252:	f7fc fab5 	bl	80037c0 <lwip_htons>
 8007256:	4603      	mov	r3, r0
 8007258:	b2db      	uxtb	r3, r3
 800725a:	f003 0304 	and.w	r3, r3, #4
 800725e:	2b00      	cmp	r3, #0
 8007260:	d118      	bne.n	8007294 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007262:	4b1b      	ldr	r3, [pc, #108]	; (80072d0 <tcp_input+0x804>)
 8007264:	6819      	ldr	r1, [r3, #0]
 8007266:	4b1b      	ldr	r3, [pc, #108]	; (80072d4 <tcp_input+0x808>)
 8007268:	881b      	ldrh	r3, [r3, #0]
 800726a:	461a      	mov	r2, r3
 800726c:	4b1a      	ldr	r3, [pc, #104]	; (80072d8 <tcp_input+0x80c>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007272:	4b16      	ldr	r3, [pc, #88]	; (80072cc <tcp_input+0x800>)
 8007274:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007276:	885b      	ldrh	r3, [r3, #2]
 8007278:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800727a:	4a14      	ldr	r2, [pc, #80]	; (80072cc <tcp_input+0x800>)
 800727c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800727e:	8812      	ldrh	r2, [r2, #0]
 8007280:	b292      	uxth	r2, r2
 8007282:	9202      	str	r2, [sp, #8]
 8007284:	9301      	str	r3, [sp, #4]
 8007286:	4b15      	ldr	r3, [pc, #84]	; (80072dc <tcp_input+0x810>)
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	4b15      	ldr	r3, [pc, #84]	; (80072e0 <tcp_input+0x814>)
 800728c:	4602      	mov	r2, r0
 800728e:	2000      	movs	r0, #0
 8007290:	f003 f81c 	bl	800a2cc <tcp_rst>
    pbuf_free(p);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f7fd fdf1 	bl	8004e7c <pbuf_free>
  return;
 800729a:	e00c      	b.n	80072b6 <tcp_input+0x7ea>
    goto dropped;
 800729c:	bf00      	nop
 800729e:	e006      	b.n	80072ae <tcp_input+0x7e2>
    goto dropped;
 80072a0:	bf00      	nop
 80072a2:	e004      	b.n	80072ae <tcp_input+0x7e2>
    goto dropped;
 80072a4:	bf00      	nop
 80072a6:	e002      	b.n	80072ae <tcp_input+0x7e2>
      goto dropped;
 80072a8:	bf00      	nop
 80072aa:	e000      	b.n	80072ae <tcp_input+0x7e2>
      goto dropped;
 80072ac:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7fd fde4 	bl	8004e7c <pbuf_free>
 80072b4:	e000      	b.n	80072b8 <tcp_input+0x7ec>
  return;
 80072b6:	bf00      	nop
}
 80072b8:	3724      	adds	r7, #36	; 0x24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd90      	pop	{r4, r7, pc}
 80072be:	bf00      	nop
 80072c0:	2000b450 	.word	0x2000b450
 80072c4:	2000b44c 	.word	0x2000b44c
 80072c8:	2000b41c 	.word	0x2000b41c
 80072cc:	2000b42c 	.word	0x2000b42c
 80072d0:	2000b440 	.word	0x2000b440
 80072d4:	2000b446 	.word	0x2000b446
 80072d8:	2000b43c 	.word	0x2000b43c
 80072dc:	20004ce4 	.word	0x20004ce4
 80072e0:	20004ce8 	.word	0x20004ce8

080072e4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d106      	bne.n	8007300 <tcp_input_delayed_close+0x1c>
 80072f2:	4b17      	ldr	r3, [pc, #92]	; (8007350 <tcp_input_delayed_close+0x6c>)
 80072f4:	f240 225a 	movw	r2, #602	; 0x25a
 80072f8:	4916      	ldr	r1, [pc, #88]	; (8007354 <tcp_input_delayed_close+0x70>)
 80072fa:	4817      	ldr	r0, [pc, #92]	; (8007358 <tcp_input_delayed_close+0x74>)
 80072fc:	f005 ffbc 	bl	800d278 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8007300:	4b16      	ldr	r3, [pc, #88]	; (800735c <tcp_input_delayed_close+0x78>)
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	f003 0310 	and.w	r3, r3, #16
 8007308:	2b00      	cmp	r3, #0
 800730a:	d01c      	beq.n	8007346 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	8b5b      	ldrh	r3, [r3, #26]
 8007310:	f003 0310 	and.w	r3, r3, #16
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10d      	bne.n	8007334 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800731e:	2b00      	cmp	r3, #0
 8007320:	d008      	beq.n	8007334 <tcp_input_delayed_close+0x50>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	6912      	ldr	r2, [r2, #16]
 800732c:	f06f 010e 	mvn.w	r1, #14
 8007330:	4610      	mov	r0, r2
 8007332:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007334:	6879      	ldr	r1, [r7, #4]
 8007336:	480a      	ldr	r0, [pc, #40]	; (8007360 <tcp_input_delayed_close+0x7c>)
 8007338:	f7ff fa50 	bl	80067dc <tcp_pcb_remove>
    tcp_free(pcb);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7fe f83d 	bl	80053bc <tcp_free>
    return 1;
 8007342:	2301      	movs	r3, #1
 8007344:	e000      	b.n	8007348 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	0800f564 	.word	0x0800f564
 8007354:	0800f734 	.word	0x0800f734
 8007358:	0800f5b0 	.word	0x0800f5b0
 800735c:	2000b449 	.word	0x2000b449
 8007360:	2000b410 	.word	0x2000b410

08007364 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007364:	b590      	push	{r4, r7, lr}
 8007366:	b08b      	sub	sp, #44	; 0x2c
 8007368:	af04      	add	r7, sp, #16
 800736a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800736c:	4b6f      	ldr	r3, [pc, #444]	; (800752c <tcp_listen_input+0x1c8>)
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	f003 0304 	and.w	r3, r3, #4
 8007374:	2b00      	cmp	r3, #0
 8007376:	f040 80d2 	bne.w	800751e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d106      	bne.n	800738e <tcp_listen_input+0x2a>
 8007380:	4b6b      	ldr	r3, [pc, #428]	; (8007530 <tcp_listen_input+0x1cc>)
 8007382:	f240 2281 	movw	r2, #641	; 0x281
 8007386:	496b      	ldr	r1, [pc, #428]	; (8007534 <tcp_listen_input+0x1d0>)
 8007388:	486b      	ldr	r0, [pc, #428]	; (8007538 <tcp_listen_input+0x1d4>)
 800738a:	f005 ff75 	bl	800d278 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800738e:	4b67      	ldr	r3, [pc, #412]	; (800752c <tcp_listen_input+0x1c8>)
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	f003 0310 	and.w	r3, r3, #16
 8007396:	2b00      	cmp	r3, #0
 8007398:	d019      	beq.n	80073ce <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800739a:	4b68      	ldr	r3, [pc, #416]	; (800753c <tcp_listen_input+0x1d8>)
 800739c:	6819      	ldr	r1, [r3, #0]
 800739e:	4b68      	ldr	r3, [pc, #416]	; (8007540 <tcp_listen_input+0x1dc>)
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	461a      	mov	r2, r3
 80073a4:	4b67      	ldr	r3, [pc, #412]	; (8007544 <tcp_listen_input+0x1e0>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80073aa:	4b67      	ldr	r3, [pc, #412]	; (8007548 <tcp_listen_input+0x1e4>)
 80073ac:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80073ae:	885b      	ldrh	r3, [r3, #2]
 80073b0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80073b2:	4a65      	ldr	r2, [pc, #404]	; (8007548 <tcp_listen_input+0x1e4>)
 80073b4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80073b6:	8812      	ldrh	r2, [r2, #0]
 80073b8:	b292      	uxth	r2, r2
 80073ba:	9202      	str	r2, [sp, #8]
 80073bc:	9301      	str	r3, [sp, #4]
 80073be:	4b63      	ldr	r3, [pc, #396]	; (800754c <tcp_listen_input+0x1e8>)
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	4b63      	ldr	r3, [pc, #396]	; (8007550 <tcp_listen_input+0x1ec>)
 80073c4:	4602      	mov	r2, r0
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f002 ff80 	bl	800a2cc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80073cc:	e0a9      	b.n	8007522 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80073ce:	4b57      	ldr	r3, [pc, #348]	; (800752c <tcp_listen_input+0x1c8>)
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	f003 0302 	and.w	r3, r3, #2
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 80a3 	beq.w	8007522 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	7d5b      	ldrb	r3, [r3, #21]
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7ff f927 	bl	8006634 <tcp_alloc>
 80073e6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d111      	bne.n	8007412 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00a      	beq.n	800740c <tcp_listen_input+0xa8>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	6910      	ldr	r0, [r2, #16]
 80073fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007402:	2100      	movs	r1, #0
 8007404:	4798      	blx	r3
 8007406:	4603      	mov	r3, r0
 8007408:	73bb      	strb	r3, [r7, #14]
      return;
 800740a:	e08b      	b.n	8007524 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800740c:	23f0      	movs	r3, #240	; 0xf0
 800740e:	73bb      	strb	r3, [r7, #14]
      return;
 8007410:	e088      	b.n	8007524 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007412:	4b50      	ldr	r3, [pc, #320]	; (8007554 <tcp_listen_input+0x1f0>)
 8007414:	695a      	ldr	r2, [r3, #20]
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800741a:	4b4e      	ldr	r3, [pc, #312]	; (8007554 <tcp_listen_input+0x1f0>)
 800741c:	691a      	ldr	r2, [r3, #16]
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	8ada      	ldrh	r2, [r3, #22]
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800742a:	4b47      	ldr	r3, [pc, #284]	; (8007548 <tcp_listen_input+0x1e4>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	881b      	ldrh	r3, [r3, #0]
 8007430:	b29a      	uxth	r2, r3
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	2203      	movs	r2, #3
 800743a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800743c:	4b41      	ldr	r3, [pc, #260]	; (8007544 <tcp_listen_input+0x1e0>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800744e:	6978      	ldr	r0, [r7, #20]
 8007450:	f7ff fa58 	bl	8006904 <tcp_next_iss>
 8007454:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800746e:	4b35      	ldr	r3, [pc, #212]	; (8007544 <tcp_listen_input+0x1e0>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	1e5a      	subs	r2, r3, #1
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	691a      	ldr	r2, [r3, #16]
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	7a5b      	ldrb	r3, [r3, #9]
 800748a:	f003 030c 	and.w	r3, r3, #12
 800748e:	b2da      	uxtb	r2, r3
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	7a1a      	ldrb	r2, [r3, #8]
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800749c:	4b2e      	ldr	r3, [pc, #184]	; (8007558 <tcp_listen_input+0x1f4>)
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	60da      	str	r2, [r3, #12]
 80074a4:	4a2c      	ldr	r2, [pc, #176]	; (8007558 <tcp_listen_input+0x1f4>)
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	6013      	str	r3, [r2, #0]
 80074aa:	f003 f8d1 	bl	800a650 <tcp_timer_needed>
 80074ae:	4b2b      	ldr	r3, [pc, #172]	; (800755c <tcp_listen_input+0x1f8>)
 80074b0:	2201      	movs	r2, #1
 80074b2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80074b4:	6978      	ldr	r0, [r7, #20]
 80074b6:	f001 fd8f 	bl	8008fd8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80074ba:	4b23      	ldr	r3, [pc, #140]	; (8007548 <tcp_listen_input+0x1e4>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	89db      	ldrh	r3, [r3, #14]
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	3304      	adds	r3, #4
 80074dc:	4618      	mov	r0, r3
 80074de:	f004 fc95 	bl	800be0c <ip4_route>
 80074e2:	4601      	mov	r1, r0
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	3304      	adds	r3, #4
 80074e8:	461a      	mov	r2, r3
 80074ea:	4620      	mov	r0, r4
 80074ec:	f7ff fa30 	bl	8006950 <tcp_eff_send_mss_netif>
 80074f0:	4603      	mov	r3, r0
 80074f2:	461a      	mov	r2, r3
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80074f8:	2112      	movs	r1, #18
 80074fa:	6978      	ldr	r0, [r7, #20]
 80074fc:	f002 f844 	bl	8009588 <tcp_enqueue_flags>
 8007500:	4603      	mov	r3, r0
 8007502:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007504:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d004      	beq.n	8007516 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800750c:	2100      	movs	r1, #0
 800750e:	6978      	ldr	r0, [r7, #20]
 8007510:	f7fe f97e 	bl	8005810 <tcp_abandon>
      return;
 8007514:	e006      	b.n	8007524 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8007516:	6978      	ldr	r0, [r7, #20]
 8007518:	f002 f924 	bl	8009764 <tcp_output>
  return;
 800751c:	e001      	b.n	8007522 <tcp_listen_input+0x1be>
    return;
 800751e:	bf00      	nop
 8007520:	e000      	b.n	8007524 <tcp_listen_input+0x1c0>
  return;
 8007522:	bf00      	nop
}
 8007524:	371c      	adds	r7, #28
 8007526:	46bd      	mov	sp, r7
 8007528:	bd90      	pop	{r4, r7, pc}
 800752a:	bf00      	nop
 800752c:	2000b448 	.word	0x2000b448
 8007530:	0800f564 	.word	0x0800f564
 8007534:	0800f75c 	.word	0x0800f75c
 8007538:	0800f5b0 	.word	0x0800f5b0
 800753c:	2000b440 	.word	0x2000b440
 8007540:	2000b446 	.word	0x2000b446
 8007544:	2000b43c 	.word	0x2000b43c
 8007548:	2000b42c 	.word	0x2000b42c
 800754c:	20004ce4 	.word	0x20004ce4
 8007550:	20004ce8 	.word	0x20004ce8
 8007554:	20004cd4 	.word	0x20004cd4
 8007558:	2000b410 	.word	0x2000b410
 800755c:	2000b418 	.word	0x2000b418

08007560 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af04      	add	r7, sp, #16
 8007566:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007568:	4b2f      	ldr	r3, [pc, #188]	; (8007628 <tcp_timewait_input+0xc8>)
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	f003 0304 	and.w	r3, r3, #4
 8007570:	2b00      	cmp	r3, #0
 8007572:	d153      	bne.n	800761c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d106      	bne.n	8007588 <tcp_timewait_input+0x28>
 800757a:	4b2c      	ldr	r3, [pc, #176]	; (800762c <tcp_timewait_input+0xcc>)
 800757c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8007580:	492b      	ldr	r1, [pc, #172]	; (8007630 <tcp_timewait_input+0xd0>)
 8007582:	482c      	ldr	r0, [pc, #176]	; (8007634 <tcp_timewait_input+0xd4>)
 8007584:	f005 fe78 	bl	800d278 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007588:	4b27      	ldr	r3, [pc, #156]	; (8007628 <tcp_timewait_input+0xc8>)
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	f003 0302 	and.w	r3, r3, #2
 8007590:	2b00      	cmp	r3, #0
 8007592:	d02a      	beq.n	80075ea <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007594:	4b28      	ldr	r3, [pc, #160]	; (8007638 <tcp_timewait_input+0xd8>)
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	db2d      	blt.n	80075fe <tcp_timewait_input+0x9e>
 80075a2:	4b25      	ldr	r3, [pc, #148]	; (8007638 <tcp_timewait_input+0xd8>)
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075aa:	6879      	ldr	r1, [r7, #4]
 80075ac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80075ae:	440b      	add	r3, r1
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	dc23      	bgt.n	80075fe <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80075b6:	4b21      	ldr	r3, [pc, #132]	; (800763c <tcp_timewait_input+0xdc>)
 80075b8:	6819      	ldr	r1, [r3, #0]
 80075ba:	4b21      	ldr	r3, [pc, #132]	; (8007640 <tcp_timewait_input+0xe0>)
 80075bc:	881b      	ldrh	r3, [r3, #0]
 80075be:	461a      	mov	r2, r3
 80075c0:	4b1d      	ldr	r3, [pc, #116]	; (8007638 <tcp_timewait_input+0xd8>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80075c6:	4b1f      	ldr	r3, [pc, #124]	; (8007644 <tcp_timewait_input+0xe4>)
 80075c8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80075ca:	885b      	ldrh	r3, [r3, #2]
 80075cc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80075ce:	4a1d      	ldr	r2, [pc, #116]	; (8007644 <tcp_timewait_input+0xe4>)
 80075d0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80075d2:	8812      	ldrh	r2, [r2, #0]
 80075d4:	b292      	uxth	r2, r2
 80075d6:	9202      	str	r2, [sp, #8]
 80075d8:	9301      	str	r3, [sp, #4]
 80075da:	4b1b      	ldr	r3, [pc, #108]	; (8007648 <tcp_timewait_input+0xe8>)
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	4b1b      	ldr	r3, [pc, #108]	; (800764c <tcp_timewait_input+0xec>)
 80075e0:	4602      	mov	r2, r0
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f002 fe72 	bl	800a2cc <tcp_rst>
      return;
 80075e8:	e01b      	b.n	8007622 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80075ea:	4b0f      	ldr	r3, [pc, #60]	; (8007628 <tcp_timewait_input+0xc8>)
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80075f6:	4b16      	ldr	r3, [pc, #88]	; (8007650 <tcp_timewait_input+0xf0>)
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80075fe:	4b10      	ldr	r3, [pc, #64]	; (8007640 <tcp_timewait_input+0xe0>)
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00c      	beq.n	8007620 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	8b5b      	ldrh	r3, [r3, #26]
 800760a:	f043 0302 	orr.w	r3, r3, #2
 800760e:	b29a      	uxth	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f002 f8a5 	bl	8009764 <tcp_output>
  }
  return;
 800761a:	e001      	b.n	8007620 <tcp_timewait_input+0xc0>
    return;
 800761c:	bf00      	nop
 800761e:	e000      	b.n	8007622 <tcp_timewait_input+0xc2>
  return;
 8007620:	bf00      	nop
}
 8007622:	3708      	adds	r7, #8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	2000b448 	.word	0x2000b448
 800762c:	0800f564 	.word	0x0800f564
 8007630:	0800f77c 	.word	0x0800f77c
 8007634:	0800f5b0 	.word	0x0800f5b0
 8007638:	2000b43c 	.word	0x2000b43c
 800763c:	2000b440 	.word	0x2000b440
 8007640:	2000b446 	.word	0x2000b446
 8007644:	2000b42c 	.word	0x2000b42c
 8007648:	20004ce4 	.word	0x20004ce4
 800764c:	20004ce8 	.word	0x20004ce8
 8007650:	2000b404 	.word	0x2000b404

08007654 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007654:	b590      	push	{r4, r7, lr}
 8007656:	b08d      	sub	sp, #52	; 0x34
 8007658:	af04      	add	r7, sp, #16
 800765a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800765c:	2300      	movs	r3, #0
 800765e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d106      	bne.n	8007678 <tcp_process+0x24>
 800766a:	4b9d      	ldr	r3, [pc, #628]	; (80078e0 <tcp_process+0x28c>)
 800766c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007670:	499c      	ldr	r1, [pc, #624]	; (80078e4 <tcp_process+0x290>)
 8007672:	489d      	ldr	r0, [pc, #628]	; (80078e8 <tcp_process+0x294>)
 8007674:	f005 fe00 	bl	800d278 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007678:	4b9c      	ldr	r3, [pc, #624]	; (80078ec <tcp_process+0x298>)
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	f003 0304 	and.w	r3, r3, #4
 8007680:	2b00      	cmp	r3, #0
 8007682:	d04e      	beq.n	8007722 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	7d1b      	ldrb	r3, [r3, #20]
 8007688:	2b02      	cmp	r3, #2
 800768a:	d108      	bne.n	800769e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007690:	4b97      	ldr	r3, [pc, #604]	; (80078f0 <tcp_process+0x29c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	429a      	cmp	r2, r3
 8007696:	d123      	bne.n	80076e0 <tcp_process+0x8c>
        acceptable = 1;
 8007698:	2301      	movs	r3, #1
 800769a:	76fb      	strb	r3, [r7, #27]
 800769c:	e020      	b.n	80076e0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076a2:	4b94      	ldr	r3, [pc, #592]	; (80078f4 <tcp_process+0x2a0>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d102      	bne.n	80076b0 <tcp_process+0x5c>
        acceptable = 1;
 80076aa:	2301      	movs	r3, #1
 80076ac:	76fb      	strb	r3, [r7, #27]
 80076ae:	e017      	b.n	80076e0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80076b0:	4b90      	ldr	r3, [pc, #576]	; (80078f4 <tcp_process+0x2a0>)
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	db10      	blt.n	80076e0 <tcp_process+0x8c>
 80076be:	4b8d      	ldr	r3, [pc, #564]	; (80078f4 <tcp_process+0x2a0>)
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c6:	6879      	ldr	r1, [r7, #4]
 80076c8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80076ca:	440b      	add	r3, r1
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	dc06      	bgt.n	80076e0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	8b5b      	ldrh	r3, [r3, #26]
 80076d6:	f043 0302 	orr.w	r3, r3, #2
 80076da:	b29a      	uxth	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80076e0:	7efb      	ldrb	r3, [r7, #27]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d01b      	beq.n	800771e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	7d1b      	ldrb	r3, [r3, #20]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d106      	bne.n	80076fc <tcp_process+0xa8>
 80076ee:	4b7c      	ldr	r3, [pc, #496]	; (80078e0 <tcp_process+0x28c>)
 80076f0:	f44f 724e 	mov.w	r2, #824	; 0x338
 80076f4:	4980      	ldr	r1, [pc, #512]	; (80078f8 <tcp_process+0x2a4>)
 80076f6:	487c      	ldr	r0, [pc, #496]	; (80078e8 <tcp_process+0x294>)
 80076f8:	f005 fdbe 	bl	800d278 <iprintf>
      recv_flags |= TF_RESET;
 80076fc:	4b7f      	ldr	r3, [pc, #508]	; (80078fc <tcp_process+0x2a8>)
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	f043 0308 	orr.w	r3, r3, #8
 8007704:	b2da      	uxtb	r2, r3
 8007706:	4b7d      	ldr	r3, [pc, #500]	; (80078fc <tcp_process+0x2a8>)
 8007708:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	8b5b      	ldrh	r3, [r3, #26]
 800770e:	f023 0301 	bic.w	r3, r3, #1
 8007712:	b29a      	uxth	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8007718:	f06f 030d 	mvn.w	r3, #13
 800771c:	e37a      	b.n	8007e14 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	e378      	b.n	8007e14 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007722:	4b72      	ldr	r3, [pc, #456]	; (80078ec <tcp_process+0x298>)
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	f003 0302 	and.w	r3, r3, #2
 800772a:	2b00      	cmp	r3, #0
 800772c:	d010      	beq.n	8007750 <tcp_process+0xfc>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	7d1b      	ldrb	r3, [r3, #20]
 8007732:	2b02      	cmp	r3, #2
 8007734:	d00c      	beq.n	8007750 <tcp_process+0xfc>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	7d1b      	ldrb	r3, [r3, #20]
 800773a:	2b03      	cmp	r3, #3
 800773c:	d008      	beq.n	8007750 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	8b5b      	ldrh	r3, [r3, #26]
 8007742:	f043 0302 	orr.w	r3, r3, #2
 8007746:	b29a      	uxth	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	e361      	b.n	8007e14 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	8b5b      	ldrh	r3, [r3, #26]
 8007754:	f003 0310 	and.w	r3, r3, #16
 8007758:	2b00      	cmp	r3, #0
 800775a:	d103      	bne.n	8007764 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800775c:	4b68      	ldr	r3, [pc, #416]	; (8007900 <tcp_process+0x2ac>)
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f001 fc2f 	bl	8008fd8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	7d1b      	ldrb	r3, [r3, #20]
 800777e:	3b02      	subs	r3, #2
 8007780:	2b07      	cmp	r3, #7
 8007782:	f200 8337 	bhi.w	8007df4 <tcp_process+0x7a0>
 8007786:	a201      	add	r2, pc, #4	; (adr r2, 800778c <tcp_process+0x138>)
 8007788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778c:	080077ad 	.word	0x080077ad
 8007790:	080079dd 	.word	0x080079dd
 8007794:	08007b55 	.word	0x08007b55
 8007798:	08007b7f 	.word	0x08007b7f
 800779c:	08007ca3 	.word	0x08007ca3
 80077a0:	08007b55 	.word	0x08007b55
 80077a4:	08007d2f 	.word	0x08007d2f
 80077a8:	08007dbf 	.word	0x08007dbf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80077ac:	4b4f      	ldr	r3, [pc, #316]	; (80078ec <tcp_process+0x298>)
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	f003 0310 	and.w	r3, r3, #16
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 80e4 	beq.w	8007982 <tcp_process+0x32e>
 80077ba:	4b4c      	ldr	r3, [pc, #304]	; (80078ec <tcp_process+0x298>)
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	f003 0302 	and.w	r3, r3, #2
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f000 80dd 	beq.w	8007982 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077cc:	1c5a      	adds	r2, r3, #1
 80077ce:	4b48      	ldr	r3, [pc, #288]	; (80078f0 <tcp_process+0x29c>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	f040 80d5 	bne.w	8007982 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80077d8:	4b46      	ldr	r3, [pc, #280]	; (80078f4 <tcp_process+0x2a0>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	1c5a      	adds	r2, r3, #1
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80077ea:	4b41      	ldr	r3, [pc, #260]	; (80078f0 <tcp_process+0x29c>)
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80077f2:	4b44      	ldr	r3, [pc, #272]	; (8007904 <tcp_process+0x2b0>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	89db      	ldrh	r3, [r3, #14]
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800780c:	4b39      	ldr	r3, [pc, #228]	; (80078f4 <tcp_process+0x2a0>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	1e5a      	subs	r2, r3, #1
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2204      	movs	r2, #4
 800781a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	3304      	adds	r3, #4
 8007824:	4618      	mov	r0, r3
 8007826:	f004 faf1 	bl	800be0c <ip4_route>
 800782a:	4601      	mov	r1, r0
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	3304      	adds	r3, #4
 8007830:	461a      	mov	r2, r3
 8007832:	4620      	mov	r0, r4
 8007834:	f7ff f88c 	bl	8006950 <tcp_eff_send_mss_netif>
 8007838:	4603      	mov	r3, r0
 800783a:	461a      	mov	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007844:	009a      	lsls	r2, r3, #2
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800784a:	005b      	lsls	r3, r3, #1
 800784c:	f241 111c 	movw	r1, #4380	; 0x111c
 8007850:	428b      	cmp	r3, r1
 8007852:	bf38      	it	cc
 8007854:	460b      	movcc	r3, r1
 8007856:	429a      	cmp	r2, r3
 8007858:	d204      	bcs.n	8007864 <tcp_process+0x210>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	b29b      	uxth	r3, r3
 8007862:	e00d      	b.n	8007880 <tcp_process+0x22c>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	f241 121c 	movw	r2, #4380	; 0x111c
 800786e:	4293      	cmp	r3, r2
 8007870:	d904      	bls.n	800787c <tcp_process+0x228>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007876:	005b      	lsls	r3, r3, #1
 8007878:	b29b      	uxth	r3, r3
 800787a:	e001      	b.n	8007880 <tcp_process+0x22c>
 800787c:	f241 131c 	movw	r3, #4380	; 0x111c
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800788c:	2b00      	cmp	r3, #0
 800788e:	d106      	bne.n	800789e <tcp_process+0x24a>
 8007890:	4b13      	ldr	r3, [pc, #76]	; (80078e0 <tcp_process+0x28c>)
 8007892:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8007896:	491c      	ldr	r1, [pc, #112]	; (8007908 <tcp_process+0x2b4>)
 8007898:	4813      	ldr	r0, [pc, #76]	; (80078e8 <tcp_process+0x294>)
 800789a:	f005 fced 	bl	800d278 <iprintf>
        --pcb->snd_queuelen;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80078a4:	3b01      	subs	r3, #1
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d12a      	bne.n	8007910 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078be:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d106      	bne.n	80078d4 <tcp_process+0x280>
 80078c6:	4b06      	ldr	r3, [pc, #24]	; (80078e0 <tcp_process+0x28c>)
 80078c8:	f44f 725d 	mov.w	r2, #884	; 0x374
 80078cc:	490f      	ldr	r1, [pc, #60]	; (800790c <tcp_process+0x2b8>)
 80078ce:	4806      	ldr	r0, [pc, #24]	; (80078e8 <tcp_process+0x294>)
 80078d0:	f005 fcd2 	bl	800d278 <iprintf>
          pcb->unsent = rseg->next;
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	66da      	str	r2, [r3, #108]	; 0x6c
 80078dc:	e01c      	b.n	8007918 <tcp_process+0x2c4>
 80078de:	bf00      	nop
 80078e0:	0800f564 	.word	0x0800f564
 80078e4:	0800f79c 	.word	0x0800f79c
 80078e8:	0800f5b0 	.word	0x0800f5b0
 80078ec:	2000b448 	.word	0x2000b448
 80078f0:	2000b440 	.word	0x2000b440
 80078f4:	2000b43c 	.word	0x2000b43c
 80078f8:	0800f7b8 	.word	0x0800f7b8
 80078fc:	2000b449 	.word	0x2000b449
 8007900:	2000b404 	.word	0x2000b404
 8007904:	2000b42c 	.word	0x2000b42c
 8007908:	0800f7d8 	.word	0x0800f7d8
 800790c:	0800f7f0 	.word	0x0800f7f0
        } else {
          pcb->unacked = rseg->next;
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8007918:	69f8      	ldr	r0, [r7, #28]
 800791a:	f7fe fd22 	bl	8006362 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007922:	2b00      	cmp	r3, #0
 8007924:	d104      	bne.n	8007930 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800792c:	861a      	strh	r2, [r3, #48]	; 0x30
 800792e:	e006      	b.n	800793e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00a      	beq.n	800795e <tcp_process+0x30a>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	6910      	ldr	r0, [r2, #16]
 8007952:	2200      	movs	r2, #0
 8007954:	6879      	ldr	r1, [r7, #4]
 8007956:	4798      	blx	r3
 8007958:	4603      	mov	r3, r0
 800795a:	76bb      	strb	r3, [r7, #26]
 800795c:	e001      	b.n	8007962 <tcp_process+0x30e>
 800795e:	2300      	movs	r3, #0
 8007960:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8007962:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007966:	f113 0f0d 	cmn.w	r3, #13
 800796a:	d102      	bne.n	8007972 <tcp_process+0x31e>
          return ERR_ABRT;
 800796c:	f06f 030c 	mvn.w	r3, #12
 8007970:	e250      	b.n	8007e14 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	8b5b      	ldrh	r3, [r3, #26]
 8007976:	f043 0302 	orr.w	r3, r3, #2
 800797a:	b29a      	uxth	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8007980:	e23a      	b.n	8007df8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8007982:	4b98      	ldr	r3, [pc, #608]	; (8007be4 <tcp_process+0x590>)
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	f003 0310 	and.w	r3, r3, #16
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 8234 	beq.w	8007df8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007990:	4b95      	ldr	r3, [pc, #596]	; (8007be8 <tcp_process+0x594>)
 8007992:	6819      	ldr	r1, [r3, #0]
 8007994:	4b95      	ldr	r3, [pc, #596]	; (8007bec <tcp_process+0x598>)
 8007996:	881b      	ldrh	r3, [r3, #0]
 8007998:	461a      	mov	r2, r3
 800799a:	4b95      	ldr	r3, [pc, #596]	; (8007bf0 <tcp_process+0x59c>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80079a0:	4b94      	ldr	r3, [pc, #592]	; (8007bf4 <tcp_process+0x5a0>)
 80079a2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80079a4:	885b      	ldrh	r3, [r3, #2]
 80079a6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80079a8:	4a92      	ldr	r2, [pc, #584]	; (8007bf4 <tcp_process+0x5a0>)
 80079aa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80079ac:	8812      	ldrh	r2, [r2, #0]
 80079ae:	b292      	uxth	r2, r2
 80079b0:	9202      	str	r2, [sp, #8]
 80079b2:	9301      	str	r3, [sp, #4]
 80079b4:	4b90      	ldr	r3, [pc, #576]	; (8007bf8 <tcp_process+0x5a4>)
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	4b90      	ldr	r3, [pc, #576]	; (8007bfc <tcp_process+0x5a8>)
 80079ba:	4602      	mov	r2, r0
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f002 fc85 	bl	800a2cc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80079c8:	2b05      	cmp	r3, #5
 80079ca:	f200 8215 	bhi.w	8007df8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f002 fa4f 	bl	8009e78 <tcp_rexmit_rto>
      break;
 80079da:	e20d      	b.n	8007df8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80079dc:	4b81      	ldr	r3, [pc, #516]	; (8007be4 <tcp_process+0x590>)
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	f003 0310 	and.w	r3, r3, #16
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f000 80a1 	beq.w	8007b2c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80079ea:	4b7f      	ldr	r3, [pc, #508]	; (8007be8 <tcp_process+0x594>)
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	3b01      	subs	r3, #1
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	db7e      	blt.n	8007af8 <tcp_process+0x4a4>
 80079fa:	4b7b      	ldr	r3, [pc, #492]	; (8007be8 <tcp_process+0x594>)
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	dc77      	bgt.n	8007af8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2204      	movs	r2, #4
 8007a0c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d102      	bne.n	8007a1c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8007a16:	23fa      	movs	r3, #250	; 0xfa
 8007a18:	76bb      	strb	r3, [r7, #26]
 8007a1a:	e01d      	b.n	8007a58 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d106      	bne.n	8007a34 <tcp_process+0x3e0>
 8007a26:	4b76      	ldr	r3, [pc, #472]	; (8007c00 <tcp_process+0x5ac>)
 8007a28:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8007a2c:	4975      	ldr	r1, [pc, #468]	; (8007c04 <tcp_process+0x5b0>)
 8007a2e:	4876      	ldr	r0, [pc, #472]	; (8007c08 <tcp_process+0x5b4>)
 8007a30:	f005 fc22 	bl	800d278 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00a      	beq.n	8007a54 <tcp_process+0x400>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a42:	699b      	ldr	r3, [r3, #24]
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	6910      	ldr	r0, [r2, #16]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	6879      	ldr	r1, [r7, #4]
 8007a4c:	4798      	blx	r3
 8007a4e:	4603      	mov	r3, r0
 8007a50:	76bb      	strb	r3, [r7, #26]
 8007a52:	e001      	b.n	8007a58 <tcp_process+0x404>
 8007a54:	23f0      	movs	r3, #240	; 0xf0
 8007a56:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8007a58:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00a      	beq.n	8007a76 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8007a60:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007a64:	f113 0f0d 	cmn.w	r3, #13
 8007a68:	d002      	beq.n	8007a70 <tcp_process+0x41c>
              tcp_abort(pcb);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7fd ff8e 	bl	800598c <tcp_abort>
            }
            return ERR_ABRT;
 8007a70:	f06f 030c 	mvn.w	r3, #12
 8007a74:	e1ce      	b.n	8007e14 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fae0 	bl	800803c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8007a7c:	4b63      	ldr	r3, [pc, #396]	; (8007c0c <tcp_process+0x5b8>)
 8007a7e:	881b      	ldrh	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d005      	beq.n	8007a90 <tcp_process+0x43c>
            recv_acked--;
 8007a84:	4b61      	ldr	r3, [pc, #388]	; (8007c0c <tcp_process+0x5b8>)
 8007a86:	881b      	ldrh	r3, [r3, #0]
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	4b5f      	ldr	r3, [pc, #380]	; (8007c0c <tcp_process+0x5b8>)
 8007a8e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007a94:	009a      	lsls	r2, r3, #2
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007a9a:	005b      	lsls	r3, r3, #1
 8007a9c:	f241 111c 	movw	r1, #4380	; 0x111c
 8007aa0:	428b      	cmp	r3, r1
 8007aa2:	bf38      	it	cc
 8007aa4:	460b      	movcc	r3, r1
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d204      	bcs.n	8007ab4 <tcp_process+0x460>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	e00d      	b.n	8007ad0 <tcp_process+0x47c>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007ab8:	005b      	lsls	r3, r3, #1
 8007aba:	f241 121c 	movw	r2, #4380	; 0x111c
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d904      	bls.n	8007acc <tcp_process+0x478>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007ac6:	005b      	lsls	r3, r3, #1
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	e001      	b.n	8007ad0 <tcp_process+0x47c>
 8007acc:	f241 131c 	movw	r3, #4380	; 0x111c
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8007ad6:	4b4e      	ldr	r3, [pc, #312]	; (8007c10 <tcp_process+0x5bc>)
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	f003 0320 	and.w	r3, r3, #32
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d037      	beq.n	8007b52 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	8b5b      	ldrh	r3, [r3, #26]
 8007ae6:	f043 0302 	orr.w	r3, r3, #2
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2207      	movs	r2, #7
 8007af4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8007af6:	e02c      	b.n	8007b52 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007af8:	4b3b      	ldr	r3, [pc, #236]	; (8007be8 <tcp_process+0x594>)
 8007afa:	6819      	ldr	r1, [r3, #0]
 8007afc:	4b3b      	ldr	r3, [pc, #236]	; (8007bec <tcp_process+0x598>)
 8007afe:	881b      	ldrh	r3, [r3, #0]
 8007b00:	461a      	mov	r2, r3
 8007b02:	4b3b      	ldr	r3, [pc, #236]	; (8007bf0 <tcp_process+0x59c>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007b08:	4b3a      	ldr	r3, [pc, #232]	; (8007bf4 <tcp_process+0x5a0>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b0c:	885b      	ldrh	r3, [r3, #2]
 8007b0e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007b10:	4a38      	ldr	r2, [pc, #224]	; (8007bf4 <tcp_process+0x5a0>)
 8007b12:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b14:	8812      	ldrh	r2, [r2, #0]
 8007b16:	b292      	uxth	r2, r2
 8007b18:	9202      	str	r2, [sp, #8]
 8007b1a:	9301      	str	r3, [sp, #4]
 8007b1c:	4b36      	ldr	r3, [pc, #216]	; (8007bf8 <tcp_process+0x5a4>)
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	4b36      	ldr	r3, [pc, #216]	; (8007bfc <tcp_process+0x5a8>)
 8007b22:	4602      	mov	r2, r0
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f002 fbd1 	bl	800a2cc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8007b2a:	e167      	b.n	8007dfc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007b2c:	4b2d      	ldr	r3, [pc, #180]	; (8007be4 <tcp_process+0x590>)
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	f003 0302 	and.w	r3, r3, #2
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 8161 	beq.w	8007dfc <tcp_process+0x7a8>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3e:	1e5a      	subs	r2, r3, #1
 8007b40:	4b2b      	ldr	r3, [pc, #172]	; (8007bf0 <tcp_process+0x59c>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	f040 8159 	bne.w	8007dfc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f002 f9b6 	bl	8009ebc <tcp_rexmit>
      break;
 8007b50:	e154      	b.n	8007dfc <tcp_process+0x7a8>
 8007b52:	e153      	b.n	8007dfc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fa71 	bl	800803c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8007b5a:	4b2d      	ldr	r3, [pc, #180]	; (8007c10 <tcp_process+0x5bc>)
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	f003 0320 	and.w	r3, r3, #32
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f000 814c 	beq.w	8007e00 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	8b5b      	ldrh	r3, [r3, #26]
 8007b6c:	f043 0302 	orr.w	r3, r3, #2
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2207      	movs	r2, #7
 8007b7a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007b7c:	e140      	b.n	8007e00 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fa5c 	bl	800803c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007b84:	4b22      	ldr	r3, [pc, #136]	; (8007c10 <tcp_process+0x5bc>)
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	f003 0320 	and.w	r3, r3, #32
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d071      	beq.n	8007c74 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007b90:	4b14      	ldr	r3, [pc, #80]	; (8007be4 <tcp_process+0x590>)
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	f003 0310 	and.w	r3, r3, #16
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d060      	beq.n	8007c5e <tcp_process+0x60a>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ba0:	4b11      	ldr	r3, [pc, #68]	; (8007be8 <tcp_process+0x594>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d15a      	bne.n	8007c5e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d156      	bne.n	8007c5e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	8b5b      	ldrh	r3, [r3, #26]
 8007bb4:	f043 0302 	orr.w	r3, r3, #2
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7fe fdbc 	bl	800673c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8007bc4:	4b13      	ldr	r3, [pc, #76]	; (8007c14 <tcp_process+0x5c0>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d105      	bne.n	8007bda <tcp_process+0x586>
 8007bce:	4b11      	ldr	r3, [pc, #68]	; (8007c14 <tcp_process+0x5c0>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	4a0f      	ldr	r2, [pc, #60]	; (8007c14 <tcp_process+0x5c0>)
 8007bd6:	6013      	str	r3, [r2, #0]
 8007bd8:	e02e      	b.n	8007c38 <tcp_process+0x5e4>
 8007bda:	4b0e      	ldr	r3, [pc, #56]	; (8007c14 <tcp_process+0x5c0>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	617b      	str	r3, [r7, #20]
 8007be0:	e027      	b.n	8007c32 <tcp_process+0x5de>
 8007be2:	bf00      	nop
 8007be4:	2000b448 	.word	0x2000b448
 8007be8:	2000b440 	.word	0x2000b440
 8007bec:	2000b446 	.word	0x2000b446
 8007bf0:	2000b43c 	.word	0x2000b43c
 8007bf4:	2000b42c 	.word	0x2000b42c
 8007bf8:	20004ce4 	.word	0x20004ce4
 8007bfc:	20004ce8 	.word	0x20004ce8
 8007c00:	0800f564 	.word	0x0800f564
 8007c04:	0800f804 	.word	0x0800f804
 8007c08:	0800f5b0 	.word	0x0800f5b0
 8007c0c:	2000b444 	.word	0x2000b444
 8007c10:	2000b449 	.word	0x2000b449
 8007c14:	2000b410 	.word	0x2000b410
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d104      	bne.n	8007c2c <tcp_process+0x5d8>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68da      	ldr	r2, [r3, #12]
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	60da      	str	r2, [r3, #12]
 8007c2a:	e005      	b.n	8007c38 <tcp_process+0x5e4>
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	617b      	str	r3, [r7, #20]
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1ef      	bne.n	8007c18 <tcp_process+0x5c4>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	60da      	str	r2, [r3, #12]
 8007c3e:	4b77      	ldr	r3, [pc, #476]	; (8007e1c <tcp_process+0x7c8>)
 8007c40:	2201      	movs	r2, #1
 8007c42:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	220a      	movs	r2, #10
 8007c48:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8007c4a:	4b75      	ldr	r3, [pc, #468]	; (8007e20 <tcp_process+0x7cc>)
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	60da      	str	r2, [r3, #12]
 8007c52:	4a73      	ldr	r2, [pc, #460]	; (8007e20 <tcp_process+0x7cc>)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6013      	str	r3, [r2, #0]
 8007c58:	f002 fcfa 	bl	800a650 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8007c5c:	e0d2      	b.n	8007e04 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	8b5b      	ldrh	r3, [r3, #26]
 8007c62:	f043 0302 	orr.w	r3, r3, #2
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2208      	movs	r2, #8
 8007c70:	751a      	strb	r2, [r3, #20]
      break;
 8007c72:	e0c7      	b.n	8007e04 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007c74:	4b6b      	ldr	r3, [pc, #428]	; (8007e24 <tcp_process+0x7d0>)
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	f003 0310 	and.w	r3, r3, #16
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 80c1 	beq.w	8007e04 <tcp_process+0x7b0>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c86:	4b68      	ldr	r3, [pc, #416]	; (8007e28 <tcp_process+0x7d4>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	f040 80ba 	bne.w	8007e04 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f040 80b5 	bne.w	8007e04 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2206      	movs	r2, #6
 8007c9e:	751a      	strb	r2, [r3, #20]
      break;
 8007ca0:	e0b0      	b.n	8007e04 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f9ca 	bl	800803c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007ca8:	4b60      	ldr	r3, [pc, #384]	; (8007e2c <tcp_process+0x7d8>)
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	f003 0320 	and.w	r3, r3, #32
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f000 80a9 	beq.w	8007e08 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	8b5b      	ldrh	r3, [r3, #26]
 8007cba:	f043 0302 	orr.w	r3, r3, #2
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f7fe fd39 	bl	800673c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007cca:	4b59      	ldr	r3, [pc, #356]	; (8007e30 <tcp_process+0x7dc>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d105      	bne.n	8007ce0 <tcp_process+0x68c>
 8007cd4:	4b56      	ldr	r3, [pc, #344]	; (8007e30 <tcp_process+0x7dc>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	4a55      	ldr	r2, [pc, #340]	; (8007e30 <tcp_process+0x7dc>)
 8007cdc:	6013      	str	r3, [r2, #0]
 8007cde:	e013      	b.n	8007d08 <tcp_process+0x6b4>
 8007ce0:	4b53      	ldr	r3, [pc, #332]	; (8007e30 <tcp_process+0x7dc>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	613b      	str	r3, [r7, #16]
 8007ce6:	e00c      	b.n	8007d02 <tcp_process+0x6ae>
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d104      	bne.n	8007cfc <tcp_process+0x6a8>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68da      	ldr	r2, [r3, #12]
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	60da      	str	r2, [r3, #12]
 8007cfa:	e005      	b.n	8007d08 <tcp_process+0x6b4>
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	613b      	str	r3, [r7, #16]
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1ef      	bne.n	8007ce8 <tcp_process+0x694>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	60da      	str	r2, [r3, #12]
 8007d0e:	4b43      	ldr	r3, [pc, #268]	; (8007e1c <tcp_process+0x7c8>)
 8007d10:	2201      	movs	r2, #1
 8007d12:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	220a      	movs	r2, #10
 8007d18:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007d1a:	4b41      	ldr	r3, [pc, #260]	; (8007e20 <tcp_process+0x7cc>)
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	60da      	str	r2, [r3, #12]
 8007d22:	4a3f      	ldr	r2, [pc, #252]	; (8007e20 <tcp_process+0x7cc>)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6013      	str	r3, [r2, #0]
 8007d28:	f002 fc92 	bl	800a650 <tcp_timer_needed>
      }
      break;
 8007d2c:	e06c      	b.n	8007e08 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f984 	bl	800803c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007d34:	4b3b      	ldr	r3, [pc, #236]	; (8007e24 <tcp_process+0x7d0>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	f003 0310 	and.w	r3, r3, #16
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d065      	beq.n	8007e0c <tcp_process+0x7b8>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d44:	4b38      	ldr	r3, [pc, #224]	; (8007e28 <tcp_process+0x7d4>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d15f      	bne.n	8007e0c <tcp_process+0x7b8>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d15b      	bne.n	8007e0c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7fe fcf1 	bl	800673c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007d5a:	4b35      	ldr	r3, [pc, #212]	; (8007e30 <tcp_process+0x7dc>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d105      	bne.n	8007d70 <tcp_process+0x71c>
 8007d64:	4b32      	ldr	r3, [pc, #200]	; (8007e30 <tcp_process+0x7dc>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	4a31      	ldr	r2, [pc, #196]	; (8007e30 <tcp_process+0x7dc>)
 8007d6c:	6013      	str	r3, [r2, #0]
 8007d6e:	e013      	b.n	8007d98 <tcp_process+0x744>
 8007d70:	4b2f      	ldr	r3, [pc, #188]	; (8007e30 <tcp_process+0x7dc>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	60fb      	str	r3, [r7, #12]
 8007d76:	e00c      	b.n	8007d92 <tcp_process+0x73e>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d104      	bne.n	8007d8c <tcp_process+0x738>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	60da      	str	r2, [r3, #12]
 8007d8a:	e005      	b.n	8007d98 <tcp_process+0x744>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	60fb      	str	r3, [r7, #12]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1ef      	bne.n	8007d78 <tcp_process+0x724>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	60da      	str	r2, [r3, #12]
 8007d9e:	4b1f      	ldr	r3, [pc, #124]	; (8007e1c <tcp_process+0x7c8>)
 8007da0:	2201      	movs	r2, #1
 8007da2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	220a      	movs	r2, #10
 8007da8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007daa:	4b1d      	ldr	r3, [pc, #116]	; (8007e20 <tcp_process+0x7cc>)
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	60da      	str	r2, [r3, #12]
 8007db2:	4a1b      	ldr	r2, [pc, #108]	; (8007e20 <tcp_process+0x7cc>)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6013      	str	r3, [r2, #0]
 8007db8:	f002 fc4a 	bl	800a650 <tcp_timer_needed>
      }
      break;
 8007dbc:	e026      	b.n	8007e0c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f93c 	bl	800803c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007dc4:	4b17      	ldr	r3, [pc, #92]	; (8007e24 <tcp_process+0x7d0>)
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	f003 0310 	and.w	r3, r3, #16
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d01f      	beq.n	8007e10 <tcp_process+0x7bc>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007dd4:	4b14      	ldr	r3, [pc, #80]	; (8007e28 <tcp_process+0x7d4>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d119      	bne.n	8007e10 <tcp_process+0x7bc>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d115      	bne.n	8007e10 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8007de4:	4b11      	ldr	r3, [pc, #68]	; (8007e2c <tcp_process+0x7d8>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	f043 0310 	orr.w	r3, r3, #16
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	4b0f      	ldr	r3, [pc, #60]	; (8007e2c <tcp_process+0x7d8>)
 8007df0:	701a      	strb	r2, [r3, #0]
      }
      break;
 8007df2:	e00d      	b.n	8007e10 <tcp_process+0x7bc>
    default:
      break;
 8007df4:	bf00      	nop
 8007df6:	e00c      	b.n	8007e12 <tcp_process+0x7be>
      break;
 8007df8:	bf00      	nop
 8007dfa:	e00a      	b.n	8007e12 <tcp_process+0x7be>
      break;
 8007dfc:	bf00      	nop
 8007dfe:	e008      	b.n	8007e12 <tcp_process+0x7be>
      break;
 8007e00:	bf00      	nop
 8007e02:	e006      	b.n	8007e12 <tcp_process+0x7be>
      break;
 8007e04:	bf00      	nop
 8007e06:	e004      	b.n	8007e12 <tcp_process+0x7be>
      break;
 8007e08:	bf00      	nop
 8007e0a:	e002      	b.n	8007e12 <tcp_process+0x7be>
      break;
 8007e0c:	bf00      	nop
 8007e0e:	e000      	b.n	8007e12 <tcp_process+0x7be>
      break;
 8007e10:	bf00      	nop
  }
  return ERR_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3724      	adds	r7, #36	; 0x24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd90      	pop	{r4, r7, pc}
 8007e1c:	2000b418 	.word	0x2000b418
 8007e20:	2000b414 	.word	0x2000b414
 8007e24:	2000b448 	.word	0x2000b448
 8007e28:	2000b440 	.word	0x2000b440
 8007e2c:	2000b449 	.word	0x2000b449
 8007e30:	2000b410 	.word	0x2000b410

08007e34 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8007e34:	b590      	push	{r4, r7, lr}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d106      	bne.n	8007e52 <tcp_oos_insert_segment+0x1e>
 8007e44:	4b3b      	ldr	r3, [pc, #236]	; (8007f34 <tcp_oos_insert_segment+0x100>)
 8007e46:	f240 421f 	movw	r2, #1055	; 0x41f
 8007e4a:	493b      	ldr	r1, [pc, #236]	; (8007f38 <tcp_oos_insert_segment+0x104>)
 8007e4c:	483b      	ldr	r0, [pc, #236]	; (8007f3c <tcp_oos_insert_segment+0x108>)
 8007e4e:	f005 fa13 	bl	800d278 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	899b      	ldrh	r3, [r3, #12]
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fb fcb0 	bl	80037c0 <lwip_htons>
 8007e60:	4603      	mov	r3, r0
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	f003 0301 	and.w	r3, r3, #1
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d028      	beq.n	8007ebe <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8007e6c:	6838      	ldr	r0, [r7, #0]
 8007e6e:	f7fe fa63 	bl	8006338 <tcp_segs_free>
    next = NULL;
 8007e72:	2300      	movs	r3, #0
 8007e74:	603b      	str	r3, [r7, #0]
 8007e76:	e056      	b.n	8007f26 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	899b      	ldrh	r3, [r3, #12]
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7fb fc9d 	bl	80037c0 <lwip_htons>
 8007e86:	4603      	mov	r3, r0
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00d      	beq.n	8007eae <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	899b      	ldrh	r3, [r3, #12]
 8007e98:	b29c      	uxth	r4, r3
 8007e9a:	2001      	movs	r0, #1
 8007e9c:	f7fb fc90 	bl	80037c0 <lwip_htons>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	4322      	orrs	r2, r4
 8007eaa:	b292      	uxth	r2, r2
 8007eac:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f7fe fa52 	bl	8006362 <tcp_seg_free>
    while (next &&
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00e      	beq.n	8007ee2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	891b      	ldrh	r3, [r3, #8]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	4b1d      	ldr	r3, [pc, #116]	; (8007f40 <tcp_oos_insert_segment+0x10c>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	441a      	add	r2, r3
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	6839      	ldr	r1, [r7, #0]
 8007ed8:	8909      	ldrh	r1, [r1, #8]
 8007eda:	440b      	add	r3, r1
 8007edc:	1ad3      	subs	r3, r2, r3
    while (next &&
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	daca      	bge.n	8007e78 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d01e      	beq.n	8007f26 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	891b      	ldrh	r3, [r3, #8]
 8007eec:	461a      	mov	r2, r3
 8007eee:	4b14      	ldr	r3, [pc, #80]	; (8007f40 <tcp_oos_insert_segment+0x10c>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	441a      	add	r2, r3
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	1ad3      	subs	r3, r2, r3
    if (next &&
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	dd12      	ble.n	8007f26 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	4b0d      	ldr	r3, [pc, #52]	; (8007f40 <tcp_oos_insert_segment+0x10c>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685a      	ldr	r2, [r3, #4]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	891b      	ldrh	r3, [r3, #8]
 8007f1e:	4619      	mov	r1, r3
 8007f20:	4610      	mov	r0, r2
 8007f22:	f7fc fe25 	bl	8004b70 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	683a      	ldr	r2, [r7, #0]
 8007f2a:	601a      	str	r2, [r3, #0]
}
 8007f2c:	bf00      	nop
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd90      	pop	{r4, r7, pc}
 8007f34:	0800f564 	.word	0x0800f564
 8007f38:	0800f824 	.word	0x0800f824
 8007f3c:	0800f5b0 	.word	0x0800f5b0
 8007f40:	2000b43c 	.word	0x2000b43c

08007f44 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8007f44:	b5b0      	push	{r4, r5, r7, lr}
 8007f46:	b086      	sub	sp, #24
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	607a      	str	r2, [r7, #4]
 8007f50:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8007f52:	e03e      	b.n	8007fd2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fd f812 	bl	8004f8c <pbuf_clen>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007f72:	8a7a      	ldrh	r2, [r7, #18]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d906      	bls.n	8007f86 <tcp_free_acked_segments+0x42>
 8007f78:	4b2a      	ldr	r3, [pc, #168]	; (8008024 <tcp_free_acked_segments+0xe0>)
 8007f7a:	f240 4257 	movw	r2, #1111	; 0x457
 8007f7e:	492a      	ldr	r1, [pc, #168]	; (8008028 <tcp_free_acked_segments+0xe4>)
 8007f80:	482a      	ldr	r0, [pc, #168]	; (800802c <tcp_free_acked_segments+0xe8>)
 8007f82:	f005 f979 	bl	800d278 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8007f8c:	8a7b      	ldrh	r3, [r7, #18]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	891a      	ldrh	r2, [r3, #8]
 8007f9c:	4b24      	ldr	r3, [pc, #144]	; (8008030 <tcp_free_acked_segments+0xec>)
 8007f9e:	881b      	ldrh	r3, [r3, #0]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	4b22      	ldr	r3, [pc, #136]	; (8008030 <tcp_free_acked_segments+0xec>)
 8007fa6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8007fa8:	6978      	ldr	r0, [r7, #20]
 8007faa:	f7fe f9da 	bl	8006362 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00c      	beq.n	8007fd2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d109      	bne.n	8007fd2 <tcp_free_acked_segments+0x8e>
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d106      	bne.n	8007fd2 <tcp_free_acked_segments+0x8e>
 8007fc4:	4b17      	ldr	r3, [pc, #92]	; (8008024 <tcp_free_acked_segments+0xe0>)
 8007fc6:	f240 4261 	movw	r2, #1121	; 0x461
 8007fca:	491a      	ldr	r1, [pc, #104]	; (8008034 <tcp_free_acked_segments+0xf0>)
 8007fcc:	4817      	ldr	r0, [pc, #92]	; (800802c <tcp_free_acked_segments+0xe8>)
 8007fce:	f005 f953 	bl	800d278 <iprintf>
  while (seg_list != NULL &&
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d020      	beq.n	800801a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fb fc03 	bl	80037ea <lwip_htonl>
 8007fe4:	4604      	mov	r4, r0
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	891b      	ldrh	r3, [r3, #8]
 8007fea:	461d      	mov	r5, r3
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	899b      	ldrh	r3, [r3, #12]
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fb fbe3 	bl	80037c0 <lwip_htons>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	f003 0303 	and.w	r3, r3, #3
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <tcp_free_acked_segments+0xc6>
 8008006:	2301      	movs	r3, #1
 8008008:	e000      	b.n	800800c <tcp_free_acked_segments+0xc8>
 800800a:	2300      	movs	r3, #0
 800800c:	442b      	add	r3, r5
 800800e:	18e2      	adds	r2, r4, r3
 8008010:	4b09      	ldr	r3, [pc, #36]	; (8008038 <tcp_free_acked_segments+0xf4>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008016:	2b00      	cmp	r3, #0
 8008018:	dd9c      	ble.n	8007f54 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800801a:	68bb      	ldr	r3, [r7, #8]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3718      	adds	r7, #24
 8008020:	46bd      	mov	sp, r7
 8008022:	bdb0      	pop	{r4, r5, r7, pc}
 8008024:	0800f564 	.word	0x0800f564
 8008028:	0800f84c 	.word	0x0800f84c
 800802c:	0800f5b0 	.word	0x0800f5b0
 8008030:	2000b444 	.word	0x2000b444
 8008034:	0800f874 	.word	0x0800f874
 8008038:	2000b440 	.word	0x2000b440

0800803c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800803c:	b5b0      	push	{r4, r5, r7, lr}
 800803e:	b094      	sub	sp, #80	; 0x50
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008044:	2300      	movs	r3, #0
 8008046:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d106      	bne.n	800805c <tcp_receive+0x20>
 800804e:	4b91      	ldr	r3, [pc, #580]	; (8008294 <tcp_receive+0x258>)
 8008050:	f240 427b 	movw	r2, #1147	; 0x47b
 8008054:	4990      	ldr	r1, [pc, #576]	; (8008298 <tcp_receive+0x25c>)
 8008056:	4891      	ldr	r0, [pc, #580]	; (800829c <tcp_receive+0x260>)
 8008058:	f005 f90e 	bl	800d278 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	7d1b      	ldrb	r3, [r3, #20]
 8008060:	2b03      	cmp	r3, #3
 8008062:	d806      	bhi.n	8008072 <tcp_receive+0x36>
 8008064:	4b8b      	ldr	r3, [pc, #556]	; (8008294 <tcp_receive+0x258>)
 8008066:	f240 427c 	movw	r2, #1148	; 0x47c
 800806a:	498d      	ldr	r1, [pc, #564]	; (80082a0 <tcp_receive+0x264>)
 800806c:	488b      	ldr	r0, [pc, #556]	; (800829c <tcp_receive+0x260>)
 800806e:	f005 f903 	bl	800d278 <iprintf>

  if (flags & TCP_ACK) {
 8008072:	4b8c      	ldr	r3, [pc, #560]	; (80082a4 <tcp_receive+0x268>)
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	f003 0310 	and.w	r3, r3, #16
 800807a:	2b00      	cmp	r3, #0
 800807c:	f000 8264 	beq.w	8008548 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008086:	461a      	mov	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800808c:	4413      	add	r3, r2
 800808e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008094:	4b84      	ldr	r3, [pc, #528]	; (80082a8 <tcp_receive+0x26c>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	2b00      	cmp	r3, #0
 800809c:	db1b      	blt.n	80080d6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080a2:	4b81      	ldr	r3, [pc, #516]	; (80082a8 <tcp_receive+0x26c>)
 80080a4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d106      	bne.n	80080b8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80080ae:	4b7f      	ldr	r3, [pc, #508]	; (80082ac <tcp_receive+0x270>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	db0e      	blt.n	80080d6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80080bc:	4b7b      	ldr	r3, [pc, #492]	; (80082ac <tcp_receive+0x270>)
 80080be:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d125      	bne.n	8008110 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80080c4:	4b7a      	ldr	r3, [pc, #488]	; (80082b0 <tcp_receive+0x274>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	89db      	ldrh	r3, [r3, #14]
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d91c      	bls.n	8008110 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80080d6:	4b76      	ldr	r3, [pc, #472]	; (80082b0 <tcp_receive+0x274>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	89db      	ldrh	r3, [r3, #14]
 80080dc:	b29a      	uxth	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d205      	bcs.n	8008100 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8008100:	4b69      	ldr	r3, [pc, #420]	; (80082a8 <tcp_receive+0x26c>)
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8008108:	4b68      	ldr	r3, [pc, #416]	; (80082ac <tcp_receive+0x270>)
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008110:	4b66      	ldr	r3, [pc, #408]	; (80082ac <tcp_receive+0x270>)
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	dc58      	bgt.n	80081d0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800811e:	4b65      	ldr	r3, [pc, #404]	; (80082b4 <tcp_receive+0x278>)
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d14b      	bne.n	80081be <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8008130:	4413      	add	r3, r2
 8008132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008134:	429a      	cmp	r2, r3
 8008136:	d142      	bne.n	80081be <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800813e:	2b00      	cmp	r3, #0
 8008140:	db3d      	blt.n	80081be <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008146:	4b59      	ldr	r3, [pc, #356]	; (80082ac <tcp_receive+0x270>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	429a      	cmp	r2, r3
 800814c:	d137      	bne.n	80081be <tcp_receive+0x182>
              found_dupack = 1;
 800814e:	2301      	movs	r3, #1
 8008150:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008158:	2bff      	cmp	r3, #255	; 0xff
 800815a:	d007      	beq.n	800816c <tcp_receive+0x130>
                ++pcb->dupacks;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008162:	3301      	adds	r3, #1
 8008164:	b2da      	uxtb	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008172:	2b03      	cmp	r3, #3
 8008174:	d91b      	bls.n	80081ae <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008180:	4413      	add	r3, r2
 8008182:	b29a      	uxth	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800818a:	429a      	cmp	r2, r3
 800818c:	d30a      	bcc.n	80081a4 <tcp_receive+0x168>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008198:	4413      	add	r3, r2
 800819a:	b29a      	uxth	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80081a2:	e004      	b.n	80081ae <tcp_receive+0x172>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d902      	bls.n	80081be <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f001 feeb 	bl	8009f94 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80081be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f040 8161 	bne.w	8008488 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081ce:	e15b      	b.n	8008488 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80081d0:	4b36      	ldr	r3, [pc, #216]	; (80082ac <tcp_receive+0x270>)
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	3b01      	subs	r3, #1
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f2c0 814e 	blt.w	800847e <tcp_receive+0x442>
 80081e2:	4b32      	ldr	r3, [pc, #200]	; (80082ac <tcp_receive+0x270>)
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ea:	1ad3      	subs	r3, r2, r3
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f300 8146 	bgt.w	800847e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	8b5b      	ldrh	r3, [r3, #26]
 80081f6:	f003 0304 	and.w	r3, r3, #4
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d010      	beq.n	8008220 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	8b5b      	ldrh	r3, [r3, #26]
 8008202:	f023 0304 	bic.w	r3, r3, #4
 8008206:	b29a      	uxth	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800822e:	10db      	asrs	r3, r3, #3
 8008230:	b21b      	sxth	r3, r3
 8008232:	b29a      	uxth	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800823a:	b29b      	uxth	r3, r3
 800823c:	4413      	add	r3, r2
 800823e:	b29b      	uxth	r3, r3
 8008240:	b21a      	sxth	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008248:	4b18      	ldr	r3, [pc, #96]	; (80082ac <tcp_receive+0x270>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	b29a      	uxth	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008252:	b29b      	uxth	r3, r3
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008260:	4b12      	ldr	r3, [pc, #72]	; (80082ac <tcp_receive+0x270>)
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	7d1b      	ldrb	r3, [r3, #20]
 800826c:	2b03      	cmp	r3, #3
 800826e:	f240 8097 	bls.w	80083a0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800827e:	429a      	cmp	r2, r3
 8008280:	d245      	bcs.n	800830e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	8b5b      	ldrh	r3, [r3, #26]
 8008286:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800828a:	2b00      	cmp	r3, #0
 800828c:	d014      	beq.n	80082b8 <tcp_receive+0x27c>
 800828e:	2301      	movs	r3, #1
 8008290:	e013      	b.n	80082ba <tcp_receive+0x27e>
 8008292:	bf00      	nop
 8008294:	0800f564 	.word	0x0800f564
 8008298:	0800f894 	.word	0x0800f894
 800829c:	0800f5b0 	.word	0x0800f5b0
 80082a0:	0800f8b0 	.word	0x0800f8b0
 80082a4:	2000b448 	.word	0x2000b448
 80082a8:	2000b43c 	.word	0x2000b43c
 80082ac:	2000b440 	.word	0x2000b440
 80082b0:	2000b42c 	.word	0x2000b42c
 80082b4:	2000b446 	.word	0x2000b446
 80082b8:	2302      	movs	r3, #2
 80082ba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80082be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80082c8:	fb12 f303 	smulbb	r3, r2, r3
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80082d0:	4293      	cmp	r3, r2
 80082d2:	bf28      	it	cs
 80082d4:	4613      	movcs	r3, r2
 80082d6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80082de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80082e0:	4413      	add	r3, r2
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d309      	bcc.n	8008302 <tcp_receive+0x2c6>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80082f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80082f6:	4413      	add	r3, r2
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008300:	e04e      	b.n	80083a0 <tcp_receive+0x364>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008308:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800830c:	e048      	b.n	80083a0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008314:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008316:	4413      	add	r3, r2
 8008318:	b29a      	uxth	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008320:	429a      	cmp	r2, r3
 8008322:	d309      	bcc.n	8008338 <tcp_receive+0x2fc>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800832a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800832c:	4413      	add	r3, r2
 800832e:	b29a      	uxth	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008336:	e004      	b.n	8008342 <tcp_receive+0x306>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800833e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800834e:	429a      	cmp	r2, r3
 8008350:	d326      	bcc.n	80083a0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	b29a      	uxth	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008372:	4413      	add	r3, r2
 8008374:	b29a      	uxth	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800837c:	429a      	cmp	r2, r3
 800837e:	d30a      	bcc.n	8008396 <tcp_receive+0x35a>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800838a:	4413      	add	r3, r2
 800838c:	b29a      	uxth	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008394:	e004      	b.n	80083a0 <tcp_receive+0x364>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800839c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083a8:	4a98      	ldr	r2, [pc, #608]	; (800860c <tcp_receive+0x5d0>)
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f7ff fdca 	bl	8007f44 <tcp_free_acked_segments>
 80083b0:	4602      	mov	r2, r0
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083be:	4a94      	ldr	r2, [pc, #592]	; (8008610 <tcp_receive+0x5d4>)
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f7ff fdbf 	bl	8007f44 <tcp_free_acked_segments>
 80083c6:	4602      	mov	r2, r0
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d104      	bne.n	80083de <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083da:	861a      	strh	r2, [r3, #48]	; 0x30
 80083dc:	e002      	b.n	80083e4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d103      	bne.n	80083fa <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8008400:	4b84      	ldr	r3, [pc, #528]	; (8008614 <tcp_receive+0x5d8>)
 8008402:	881b      	ldrh	r3, [r3, #0]
 8008404:	4413      	add	r3, r2
 8008406:	b29a      	uxth	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	8b5b      	ldrh	r3, [r3, #26]
 8008412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008416:	2b00      	cmp	r3, #0
 8008418:	d035      	beq.n	8008486 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800841e:	2b00      	cmp	r3, #0
 8008420:	d118      	bne.n	8008454 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00c      	beq.n	8008444 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	4618      	mov	r0, r3
 8008438:	f7fb f9d7 	bl	80037ea <lwip_htonl>
 800843c:	4603      	mov	r3, r0
 800843e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8008440:	2b00      	cmp	r3, #0
 8008442:	dc20      	bgt.n	8008486 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	8b5b      	ldrh	r3, [r3, #26]
 8008448:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800844c:	b29a      	uxth	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008452:	e018      	b.n	8008486 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	4618      	mov	r0, r3
 8008462:	f7fb f9c2 	bl	80037ea <lwip_htonl>
 8008466:	4603      	mov	r3, r0
 8008468:	1ae3      	subs	r3, r4, r3
 800846a:	2b00      	cmp	r3, #0
 800846c:	dc0b      	bgt.n	8008486 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	8b5b      	ldrh	r3, [r3, #26]
 8008472:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008476:	b29a      	uxth	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800847c:	e003      	b.n	8008486 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f001 ff76 	bl	800a370 <tcp_send_empty_ack>
 8008484:	e000      	b.n	8008488 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008486:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800848c:	2b00      	cmp	r3, #0
 800848e:	d05b      	beq.n	8008548 <tcp_receive+0x50c>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008494:	4b60      	ldr	r3, [pc, #384]	; (8008618 <tcp_receive+0x5dc>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	1ad3      	subs	r3, r2, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	da54      	bge.n	8008548 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800849e:	4b5f      	ldr	r3, [pc, #380]	; (800861c <tcp_receive+0x5e0>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80084b2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80084bc:	10db      	asrs	r3, r3, #3
 80084be:	b21b      	sxth	r3, r3
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	1ad3      	subs	r3, r2, r3
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80084d6:	4413      	add	r3, r2
 80084d8:	b29b      	uxth	r3, r3
 80084da:	b21a      	sxth	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80084e0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	da05      	bge.n	80084f4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80084e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80084ec:	425b      	negs	r3, r3
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80084f4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80084fe:	109b      	asrs	r3, r3, #2
 8008500:	b21b      	sxth	r3, r3
 8008502:	b29b      	uxth	r3, r3
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	b29b      	uxth	r3, r3
 8008508:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008512:	b29a      	uxth	r2, r3
 8008514:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008518:	4413      	add	r3, r2
 800851a:	b29b      	uxth	r3, r3
 800851c:	b21a      	sxth	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008528:	10db      	asrs	r3, r3, #3
 800852a:	b21b      	sxth	r3, r3
 800852c:	b29a      	uxth	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008534:	b29b      	uxth	r3, r3
 8008536:	4413      	add	r3, r2
 8008538:	b29b      	uxth	r3, r3
 800853a:	b21a      	sxth	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008548:	4b35      	ldr	r3, [pc, #212]	; (8008620 <tcp_receive+0x5e4>)
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	f000 84e2 	beq.w	8008f16 <tcp_receive+0xeda>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	7d1b      	ldrb	r3, [r3, #20]
 8008556:	2b06      	cmp	r3, #6
 8008558:	f200 84dd 	bhi.w	8008f16 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008560:	4b30      	ldr	r3, [pc, #192]	; (8008624 <tcp_receive+0x5e8>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	3b01      	subs	r3, #1
 8008568:	2b00      	cmp	r3, #0
 800856a:	f2c0 808f 	blt.w	800868c <tcp_receive+0x650>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008572:	4b2b      	ldr	r3, [pc, #172]	; (8008620 <tcp_receive+0x5e4>)
 8008574:	881b      	ldrh	r3, [r3, #0]
 8008576:	4619      	mov	r1, r3
 8008578:	4b2a      	ldr	r3, [pc, #168]	; (8008624 <tcp_receive+0x5e8>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	440b      	add	r3, r1
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	3301      	adds	r3, #1
 8008582:	2b00      	cmp	r3, #0
 8008584:	f300 8082 	bgt.w	800868c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008588:	4b27      	ldr	r3, [pc, #156]	; (8008628 <tcp_receive+0x5ec>)
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008592:	4b24      	ldr	r3, [pc, #144]	; (8008624 <tcp_receive+0x5e8>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800859a:	4b23      	ldr	r3, [pc, #140]	; (8008628 <tcp_receive+0x5ec>)
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d106      	bne.n	80085b0 <tcp_receive+0x574>
 80085a2:	4b22      	ldr	r3, [pc, #136]	; (800862c <tcp_receive+0x5f0>)
 80085a4:	f240 5294 	movw	r2, #1428	; 0x594
 80085a8:	4921      	ldr	r1, [pc, #132]	; (8008630 <tcp_receive+0x5f4>)
 80085aa:	4822      	ldr	r0, [pc, #136]	; (8008634 <tcp_receive+0x5f8>)
 80085ac:	f004 fe64 	bl	800d278 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d906      	bls.n	80085c8 <tcp_receive+0x58c>
 80085ba:	4b1c      	ldr	r3, [pc, #112]	; (800862c <tcp_receive+0x5f0>)
 80085bc:	f240 5295 	movw	r2, #1429	; 0x595
 80085c0:	491d      	ldr	r1, [pc, #116]	; (8008638 <tcp_receive+0x5fc>)
 80085c2:	481c      	ldr	r0, [pc, #112]	; (8008634 <tcp_receive+0x5f8>)
 80085c4:	f004 fe58 	bl	800d278 <iprintf>
      off = (u16_t)off32;
 80085c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80085ce:	4b16      	ldr	r3, [pc, #88]	; (8008628 <tcp_receive+0x5ec>)
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	891b      	ldrh	r3, [r3, #8]
 80085d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80085d8:	429a      	cmp	r2, r3
 80085da:	d906      	bls.n	80085ea <tcp_receive+0x5ae>
 80085dc:	4b13      	ldr	r3, [pc, #76]	; (800862c <tcp_receive+0x5f0>)
 80085de:	f240 5297 	movw	r2, #1431	; 0x597
 80085e2:	4916      	ldr	r1, [pc, #88]	; (800863c <tcp_receive+0x600>)
 80085e4:	4813      	ldr	r0, [pc, #76]	; (8008634 <tcp_receive+0x5f8>)
 80085e6:	f004 fe47 	bl	800d278 <iprintf>
      inseg.len -= off;
 80085ea:	4b0f      	ldr	r3, [pc, #60]	; (8008628 <tcp_receive+0x5ec>)
 80085ec:	891a      	ldrh	r2, [r3, #8]
 80085ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	4b0c      	ldr	r3, [pc, #48]	; (8008628 <tcp_receive+0x5ec>)
 80085f8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80085fa:	4b0b      	ldr	r3, [pc, #44]	; (8008628 <tcp_receive+0x5ec>)
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	891a      	ldrh	r2, [r3, #8]
 8008600:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8008608:	e02a      	b.n	8008660 <tcp_receive+0x624>
 800860a:	bf00      	nop
 800860c:	0800f8cc 	.word	0x0800f8cc
 8008610:	0800f8d4 	.word	0x0800f8d4
 8008614:	2000b444 	.word	0x2000b444
 8008618:	2000b440 	.word	0x2000b440
 800861c:	2000b404 	.word	0x2000b404
 8008620:	2000b446 	.word	0x2000b446
 8008624:	2000b43c 	.word	0x2000b43c
 8008628:	2000b41c 	.word	0x2000b41c
 800862c:	0800f564 	.word	0x0800f564
 8008630:	0800f8dc 	.word	0x0800f8dc
 8008634:	0800f5b0 	.word	0x0800f5b0
 8008638:	0800f8ec 	.word	0x0800f8ec
 800863c:	0800f8fc 	.word	0x0800f8fc
        off -= p->len;
 8008640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008642:	895b      	ldrh	r3, [r3, #10]
 8008644:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800864e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008650:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008652:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8008654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008656:	2200      	movs	r2, #0
 8008658:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800865a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8008660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008662:	895b      	ldrh	r3, [r3, #10]
 8008664:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008668:	429a      	cmp	r2, r3
 800866a:	d8e9      	bhi.n	8008640 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800866c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008670:	4619      	mov	r1, r3
 8008672:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008674:	f7fc fb7c 	bl	8004d70 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867c:	4a91      	ldr	r2, [pc, #580]	; (80088c4 <tcp_receive+0x888>)
 800867e:	6013      	str	r3, [r2, #0]
 8008680:	4b91      	ldr	r3, [pc, #580]	; (80088c8 <tcp_receive+0x88c>)
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	4a8f      	ldr	r2, [pc, #572]	; (80088c4 <tcp_receive+0x888>)
 8008686:	6812      	ldr	r2, [r2, #0]
 8008688:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800868a:	e00d      	b.n	80086a8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800868c:	4b8d      	ldr	r3, [pc, #564]	; (80088c4 <tcp_receive+0x888>)
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	2b00      	cmp	r3, #0
 8008698:	da06      	bge.n	80086a8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	8b5b      	ldrh	r3, [r3, #26]
 800869e:	f043 0302 	orr.w	r3, r3, #2
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80086a8:	4b86      	ldr	r3, [pc, #536]	; (80088c4 <tcp_receive+0x888>)
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f2c0 842a 	blt.w	8008f0c <tcp_receive+0xed0>
 80086b8:	4b82      	ldr	r3, [pc, #520]	; (80088c4 <tcp_receive+0x888>)
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c0:	6879      	ldr	r1, [r7, #4]
 80086c2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80086c4:	440b      	add	r3, r1
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	3301      	adds	r3, #1
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f300 841e 	bgt.w	8008f0c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086d4:	4b7b      	ldr	r3, [pc, #492]	; (80088c4 <tcp_receive+0x888>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	429a      	cmp	r2, r3
 80086da:	f040 829a 	bne.w	8008c12 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80086de:	4b7a      	ldr	r3, [pc, #488]	; (80088c8 <tcp_receive+0x88c>)
 80086e0:	891c      	ldrh	r4, [r3, #8]
 80086e2:	4b79      	ldr	r3, [pc, #484]	; (80088c8 <tcp_receive+0x88c>)
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	899b      	ldrh	r3, [r3, #12]
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7fb f868 	bl	80037c0 <lwip_htons>
 80086f0:	4603      	mov	r3, r0
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	f003 0303 	and.w	r3, r3, #3
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d001      	beq.n	8008700 <tcp_receive+0x6c4>
 80086fc:	2301      	movs	r3, #1
 80086fe:	e000      	b.n	8008702 <tcp_receive+0x6c6>
 8008700:	2300      	movs	r3, #0
 8008702:	4423      	add	r3, r4
 8008704:	b29a      	uxth	r2, r3
 8008706:	4b71      	ldr	r3, [pc, #452]	; (80088cc <tcp_receive+0x890>)
 8008708:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800870e:	4b6f      	ldr	r3, [pc, #444]	; (80088cc <tcp_receive+0x890>)
 8008710:	881b      	ldrh	r3, [r3, #0]
 8008712:	429a      	cmp	r2, r3
 8008714:	d275      	bcs.n	8008802 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008716:	4b6c      	ldr	r3, [pc, #432]	; (80088c8 <tcp_receive+0x88c>)
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	899b      	ldrh	r3, [r3, #12]
 800871c:	b29b      	uxth	r3, r3
 800871e:	4618      	mov	r0, r3
 8008720:	f7fb f84e 	bl	80037c0 <lwip_htons>
 8008724:	4603      	mov	r3, r0
 8008726:	b2db      	uxtb	r3, r3
 8008728:	f003 0301 	and.w	r3, r3, #1
 800872c:	2b00      	cmp	r3, #0
 800872e:	d01f      	beq.n	8008770 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008730:	4b65      	ldr	r3, [pc, #404]	; (80088c8 <tcp_receive+0x88c>)
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	899b      	ldrh	r3, [r3, #12]
 8008736:	b29b      	uxth	r3, r3
 8008738:	b21b      	sxth	r3, r3
 800873a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800873e:	b21c      	sxth	r4, r3
 8008740:	4b61      	ldr	r3, [pc, #388]	; (80088c8 <tcp_receive+0x88c>)
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	899b      	ldrh	r3, [r3, #12]
 8008746:	b29b      	uxth	r3, r3
 8008748:	4618      	mov	r0, r3
 800874a:	f7fb f839 	bl	80037c0 <lwip_htons>
 800874e:	4603      	mov	r3, r0
 8008750:	b2db      	uxtb	r3, r3
 8008752:	b29b      	uxth	r3, r3
 8008754:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008758:	b29b      	uxth	r3, r3
 800875a:	4618      	mov	r0, r3
 800875c:	f7fb f830 	bl	80037c0 <lwip_htons>
 8008760:	4603      	mov	r3, r0
 8008762:	b21b      	sxth	r3, r3
 8008764:	4323      	orrs	r3, r4
 8008766:	b21a      	sxth	r2, r3
 8008768:	4b57      	ldr	r3, [pc, #348]	; (80088c8 <tcp_receive+0x88c>)
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	b292      	uxth	r2, r2
 800876e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008774:	4b54      	ldr	r3, [pc, #336]	; (80088c8 <tcp_receive+0x88c>)
 8008776:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008778:	4b53      	ldr	r3, [pc, #332]	; (80088c8 <tcp_receive+0x88c>)
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	899b      	ldrh	r3, [r3, #12]
 800877e:	b29b      	uxth	r3, r3
 8008780:	4618      	mov	r0, r3
 8008782:	f7fb f81d 	bl	80037c0 <lwip_htons>
 8008786:	4603      	mov	r3, r0
 8008788:	b2db      	uxtb	r3, r3
 800878a:	f003 0302 	and.w	r3, r3, #2
 800878e:	2b00      	cmp	r3, #0
 8008790:	d005      	beq.n	800879e <tcp_receive+0x762>
            inseg.len -= 1;
 8008792:	4b4d      	ldr	r3, [pc, #308]	; (80088c8 <tcp_receive+0x88c>)
 8008794:	891b      	ldrh	r3, [r3, #8]
 8008796:	3b01      	subs	r3, #1
 8008798:	b29a      	uxth	r2, r3
 800879a:	4b4b      	ldr	r3, [pc, #300]	; (80088c8 <tcp_receive+0x88c>)
 800879c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800879e:	4b4a      	ldr	r3, [pc, #296]	; (80088c8 <tcp_receive+0x88c>)
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	4a49      	ldr	r2, [pc, #292]	; (80088c8 <tcp_receive+0x88c>)
 80087a4:	8912      	ldrh	r2, [r2, #8]
 80087a6:	4611      	mov	r1, r2
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7fc f9e1 	bl	8004b70 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80087ae:	4b46      	ldr	r3, [pc, #280]	; (80088c8 <tcp_receive+0x88c>)
 80087b0:	891c      	ldrh	r4, [r3, #8]
 80087b2:	4b45      	ldr	r3, [pc, #276]	; (80088c8 <tcp_receive+0x88c>)
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	899b      	ldrh	r3, [r3, #12]
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7fb f800 	bl	80037c0 <lwip_htons>
 80087c0:	4603      	mov	r3, r0
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	f003 0303 	and.w	r3, r3, #3
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d001      	beq.n	80087d0 <tcp_receive+0x794>
 80087cc:	2301      	movs	r3, #1
 80087ce:	e000      	b.n	80087d2 <tcp_receive+0x796>
 80087d0:	2300      	movs	r3, #0
 80087d2:	4423      	add	r3, r4
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	4b3d      	ldr	r3, [pc, #244]	; (80088cc <tcp_receive+0x890>)
 80087d8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80087da:	4b3c      	ldr	r3, [pc, #240]	; (80088cc <tcp_receive+0x890>)
 80087dc:	881b      	ldrh	r3, [r3, #0]
 80087de:	461a      	mov	r2, r3
 80087e0:	4b38      	ldr	r3, [pc, #224]	; (80088c4 <tcp_receive+0x888>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	441a      	add	r2, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ea:	6879      	ldr	r1, [r7, #4]
 80087ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80087ee:	440b      	add	r3, r1
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d006      	beq.n	8008802 <tcp_receive+0x7c6>
 80087f4:	4b36      	ldr	r3, [pc, #216]	; (80088d0 <tcp_receive+0x894>)
 80087f6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80087fa:	4936      	ldr	r1, [pc, #216]	; (80088d4 <tcp_receive+0x898>)
 80087fc:	4836      	ldr	r0, [pc, #216]	; (80088d8 <tcp_receive+0x89c>)
 80087fe:	f004 fd3b 	bl	800d278 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008806:	2b00      	cmp	r3, #0
 8008808:	f000 80e7 	beq.w	80089da <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800880c:	4b2e      	ldr	r3, [pc, #184]	; (80088c8 <tcp_receive+0x88c>)
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	899b      	ldrh	r3, [r3, #12]
 8008812:	b29b      	uxth	r3, r3
 8008814:	4618      	mov	r0, r3
 8008816:	f7fa ffd3 	bl	80037c0 <lwip_htons>
 800881a:	4603      	mov	r3, r0
 800881c:	b2db      	uxtb	r3, r3
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	2b00      	cmp	r3, #0
 8008824:	d010      	beq.n	8008848 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8008826:	e00a      	b.n	800883e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800882c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f7fd fd92 	bl	8006362 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1f0      	bne.n	8008828 <tcp_receive+0x7ec>
 8008846:	e0c8      	b.n	80089da <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800884c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800884e:	e052      	b.n	80088f6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	899b      	ldrh	r3, [r3, #12]
 8008856:	b29b      	uxth	r3, r3
 8008858:	4618      	mov	r0, r3
 800885a:	f7fa ffb1 	bl	80037c0 <lwip_htons>
 800885e:	4603      	mov	r3, r0
 8008860:	b2db      	uxtb	r3, r3
 8008862:	f003 0301 	and.w	r3, r3, #1
 8008866:	2b00      	cmp	r3, #0
 8008868:	d03d      	beq.n	80088e6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800886a:	4b17      	ldr	r3, [pc, #92]	; (80088c8 <tcp_receive+0x88c>)
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	899b      	ldrh	r3, [r3, #12]
 8008870:	b29b      	uxth	r3, r3
 8008872:	4618      	mov	r0, r3
 8008874:	f7fa ffa4 	bl	80037c0 <lwip_htons>
 8008878:	4603      	mov	r3, r0
 800887a:	b2db      	uxtb	r3, r3
 800887c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008880:	2b00      	cmp	r3, #0
 8008882:	d130      	bne.n	80088e6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008884:	4b10      	ldr	r3, [pc, #64]	; (80088c8 <tcp_receive+0x88c>)
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	899b      	ldrh	r3, [r3, #12]
 800888a:	b29c      	uxth	r4, r3
 800888c:	2001      	movs	r0, #1
 800888e:	f7fa ff97 	bl	80037c0 <lwip_htons>
 8008892:	4603      	mov	r3, r0
 8008894:	461a      	mov	r2, r3
 8008896:	4b0c      	ldr	r3, [pc, #48]	; (80088c8 <tcp_receive+0x88c>)
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	4322      	orrs	r2, r4
 800889c:	b292      	uxth	r2, r2
 800889e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80088a0:	4b09      	ldr	r3, [pc, #36]	; (80088c8 <tcp_receive+0x88c>)
 80088a2:	891c      	ldrh	r4, [r3, #8]
 80088a4:	4b08      	ldr	r3, [pc, #32]	; (80088c8 <tcp_receive+0x88c>)
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	899b      	ldrh	r3, [r3, #12]
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7fa ff87 	bl	80037c0 <lwip_htons>
 80088b2:	4603      	mov	r3, r0
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	f003 0303 	and.w	r3, r3, #3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00e      	beq.n	80088dc <tcp_receive+0x8a0>
 80088be:	2301      	movs	r3, #1
 80088c0:	e00d      	b.n	80088de <tcp_receive+0x8a2>
 80088c2:	bf00      	nop
 80088c4:	2000b43c 	.word	0x2000b43c
 80088c8:	2000b41c 	.word	0x2000b41c
 80088cc:	2000b446 	.word	0x2000b446
 80088d0:	0800f564 	.word	0x0800f564
 80088d4:	0800f90c 	.word	0x0800f90c
 80088d8:	0800f5b0 	.word	0x0800f5b0
 80088dc:	2300      	movs	r3, #0
 80088de:	4423      	add	r3, r4
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	4b98      	ldr	r3, [pc, #608]	; (8008b44 <tcp_receive+0xb08>)
 80088e4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80088e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088e8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80088ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80088f0:	6938      	ldr	r0, [r7, #16]
 80088f2:	f7fd fd36 	bl	8006362 <tcp_seg_free>
            while (next &&
 80088f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00e      	beq.n	800891a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80088fc:	4b91      	ldr	r3, [pc, #580]	; (8008b44 <tcp_receive+0xb08>)
 80088fe:	881b      	ldrh	r3, [r3, #0]
 8008900:	461a      	mov	r2, r3
 8008902:	4b91      	ldr	r3, [pc, #580]	; (8008b48 <tcp_receive+0xb0c>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	441a      	add	r2, r3
 8008908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008910:	8909      	ldrh	r1, [r1, #8]
 8008912:	440b      	add	r3, r1
 8008914:	1ad3      	subs	r3, r2, r3
            while (next &&
 8008916:	2b00      	cmp	r3, #0
 8008918:	da9a      	bge.n	8008850 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800891a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800891c:	2b00      	cmp	r3, #0
 800891e:	d059      	beq.n	80089d4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8008920:	4b88      	ldr	r3, [pc, #544]	; (8008b44 <tcp_receive+0xb08>)
 8008922:	881b      	ldrh	r3, [r3, #0]
 8008924:	461a      	mov	r2, r3
 8008926:	4b88      	ldr	r3, [pc, #544]	; (8008b48 <tcp_receive+0xb0c>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	441a      	add	r2, r3
 800892c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008934:	2b00      	cmp	r3, #0
 8008936:	dd4d      	ble.n	80089d4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	b29a      	uxth	r2, r3
 8008940:	4b81      	ldr	r3, [pc, #516]	; (8008b48 <tcp_receive+0xb0c>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	b29b      	uxth	r3, r3
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	b29a      	uxth	r2, r3
 800894a:	4b80      	ldr	r3, [pc, #512]	; (8008b4c <tcp_receive+0xb10>)
 800894c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800894e:	4b7f      	ldr	r3, [pc, #508]	; (8008b4c <tcp_receive+0xb10>)
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	899b      	ldrh	r3, [r3, #12]
 8008954:	b29b      	uxth	r3, r3
 8008956:	4618      	mov	r0, r3
 8008958:	f7fa ff32 	bl	80037c0 <lwip_htons>
 800895c:	4603      	mov	r3, r0
 800895e:	b2db      	uxtb	r3, r3
 8008960:	f003 0302 	and.w	r3, r3, #2
 8008964:	2b00      	cmp	r3, #0
 8008966:	d005      	beq.n	8008974 <tcp_receive+0x938>
                inseg.len -= 1;
 8008968:	4b78      	ldr	r3, [pc, #480]	; (8008b4c <tcp_receive+0xb10>)
 800896a:	891b      	ldrh	r3, [r3, #8]
 800896c:	3b01      	subs	r3, #1
 800896e:	b29a      	uxth	r2, r3
 8008970:	4b76      	ldr	r3, [pc, #472]	; (8008b4c <tcp_receive+0xb10>)
 8008972:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008974:	4b75      	ldr	r3, [pc, #468]	; (8008b4c <tcp_receive+0xb10>)
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	4a74      	ldr	r2, [pc, #464]	; (8008b4c <tcp_receive+0xb10>)
 800897a:	8912      	ldrh	r2, [r2, #8]
 800897c:	4611      	mov	r1, r2
 800897e:	4618      	mov	r0, r3
 8008980:	f7fc f8f6 	bl	8004b70 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008984:	4b71      	ldr	r3, [pc, #452]	; (8008b4c <tcp_receive+0xb10>)
 8008986:	891c      	ldrh	r4, [r3, #8]
 8008988:	4b70      	ldr	r3, [pc, #448]	; (8008b4c <tcp_receive+0xb10>)
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	899b      	ldrh	r3, [r3, #12]
 800898e:	b29b      	uxth	r3, r3
 8008990:	4618      	mov	r0, r3
 8008992:	f7fa ff15 	bl	80037c0 <lwip_htons>
 8008996:	4603      	mov	r3, r0
 8008998:	b2db      	uxtb	r3, r3
 800899a:	f003 0303 	and.w	r3, r3, #3
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d001      	beq.n	80089a6 <tcp_receive+0x96a>
 80089a2:	2301      	movs	r3, #1
 80089a4:	e000      	b.n	80089a8 <tcp_receive+0x96c>
 80089a6:	2300      	movs	r3, #0
 80089a8:	4423      	add	r3, r4
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	4b65      	ldr	r3, [pc, #404]	; (8008b44 <tcp_receive+0xb08>)
 80089ae:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80089b0:	4b64      	ldr	r3, [pc, #400]	; (8008b44 <tcp_receive+0xb08>)
 80089b2:	881b      	ldrh	r3, [r3, #0]
 80089b4:	461a      	mov	r2, r3
 80089b6:	4b64      	ldr	r3, [pc, #400]	; (8008b48 <tcp_receive+0xb0c>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	441a      	add	r2, r3
 80089bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d006      	beq.n	80089d4 <tcp_receive+0x998>
 80089c6:	4b62      	ldr	r3, [pc, #392]	; (8008b50 <tcp_receive+0xb14>)
 80089c8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80089cc:	4961      	ldr	r1, [pc, #388]	; (8008b54 <tcp_receive+0xb18>)
 80089ce:	4862      	ldr	r0, [pc, #392]	; (8008b58 <tcp_receive+0xb1c>)
 80089d0:	f004 fc52 	bl	800d278 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80089d8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80089da:	4b5a      	ldr	r3, [pc, #360]	; (8008b44 <tcp_receive+0xb08>)
 80089dc:	881b      	ldrh	r3, [r3, #0]
 80089de:	461a      	mov	r2, r3
 80089e0:	4b59      	ldr	r3, [pc, #356]	; (8008b48 <tcp_receive+0xb0c>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	441a      	add	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80089ee:	4b55      	ldr	r3, [pc, #340]	; (8008b44 <tcp_receive+0xb08>)
 80089f0:	881b      	ldrh	r3, [r3, #0]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d206      	bcs.n	8008a04 <tcp_receive+0x9c8>
 80089f6:	4b56      	ldr	r3, [pc, #344]	; (8008b50 <tcp_receive+0xb14>)
 80089f8:	f240 6207 	movw	r2, #1543	; 0x607
 80089fc:	4957      	ldr	r1, [pc, #348]	; (8008b5c <tcp_receive+0xb20>)
 80089fe:	4856      	ldr	r0, [pc, #344]	; (8008b58 <tcp_receive+0xb1c>)
 8008a00:	f004 fc3a 	bl	800d278 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008a08:	4b4e      	ldr	r3, [pc, #312]	; (8008b44 <tcp_receive+0xb08>)
 8008a0a:	881b      	ldrh	r3, [r3, #0]
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f7fc ffc5 	bl	80059a4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008a1a:	4b4c      	ldr	r3, [pc, #304]	; (8008b4c <tcp_receive+0xb10>)
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	891b      	ldrh	r3, [r3, #8]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d006      	beq.n	8008a32 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8008a24:	4b49      	ldr	r3, [pc, #292]	; (8008b4c <tcp_receive+0xb10>)
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	4a4d      	ldr	r2, [pc, #308]	; (8008b60 <tcp_receive+0xb24>)
 8008a2a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008a2c:	4b47      	ldr	r3, [pc, #284]	; (8008b4c <tcp_receive+0xb10>)
 8008a2e:	2200      	movs	r2, #0
 8008a30:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008a32:	4b46      	ldr	r3, [pc, #280]	; (8008b4c <tcp_receive+0xb10>)
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	899b      	ldrh	r3, [r3, #12]
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7fa fec0 	bl	80037c0 <lwip_htons>
 8008a40:	4603      	mov	r3, r0
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	f003 0301 	and.w	r3, r3, #1
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f000 80b8 	beq.w	8008bbe <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008a4e:	4b45      	ldr	r3, [pc, #276]	; (8008b64 <tcp_receive+0xb28>)
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	f043 0320 	orr.w	r3, r3, #32
 8008a56:	b2da      	uxtb	r2, r3
 8008a58:	4b42      	ldr	r3, [pc, #264]	; (8008b64 <tcp_receive+0xb28>)
 8008a5a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008a5c:	e0af      	b.n	8008bbe <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a62:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	4a36      	ldr	r2, [pc, #216]	; (8008b48 <tcp_receive+0xb0c>)
 8008a6e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	891b      	ldrh	r3, [r3, #8]
 8008a74:	461c      	mov	r4, r3
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	899b      	ldrh	r3, [r3, #12]
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fa fe9e 	bl	80037c0 <lwip_htons>
 8008a84:	4603      	mov	r3, r0
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	f003 0303 	and.w	r3, r3, #3
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d001      	beq.n	8008a94 <tcp_receive+0xa58>
 8008a90:	2301      	movs	r3, #1
 8008a92:	e000      	b.n	8008a96 <tcp_receive+0xa5a>
 8008a94:	2300      	movs	r3, #0
 8008a96:	191a      	adds	r2, r3, r4
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9c:	441a      	add	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008aa6:	461c      	mov	r4, r3
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	891b      	ldrh	r3, [r3, #8]
 8008aac:	461d      	mov	r5, r3
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	899b      	ldrh	r3, [r3, #12]
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fa fe82 	bl	80037c0 <lwip_htons>
 8008abc:	4603      	mov	r3, r0
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	f003 0303 	and.w	r3, r3, #3
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d001      	beq.n	8008acc <tcp_receive+0xa90>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e000      	b.n	8008ace <tcp_receive+0xa92>
 8008acc:	2300      	movs	r3, #0
 8008ace:	442b      	add	r3, r5
 8008ad0:	429c      	cmp	r4, r3
 8008ad2:	d206      	bcs.n	8008ae2 <tcp_receive+0xaa6>
 8008ad4:	4b1e      	ldr	r3, [pc, #120]	; (8008b50 <tcp_receive+0xb14>)
 8008ad6:	f240 622b 	movw	r2, #1579	; 0x62b
 8008ada:	4923      	ldr	r1, [pc, #140]	; (8008b68 <tcp_receive+0xb2c>)
 8008adc:	481e      	ldr	r0, [pc, #120]	; (8008b58 <tcp_receive+0xb1c>)
 8008ade:	f004 fbcb 	bl	800d278 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	891b      	ldrh	r3, [r3, #8]
 8008ae6:	461c      	mov	r4, r3
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	899b      	ldrh	r3, [r3, #12]
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7fa fe65 	bl	80037c0 <lwip_htons>
 8008af6:	4603      	mov	r3, r0
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	f003 0303 	and.w	r3, r3, #3
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d001      	beq.n	8008b06 <tcp_receive+0xaca>
 8008b02:	2301      	movs	r3, #1
 8008b04:	e000      	b.n	8008b08 <tcp_receive+0xacc>
 8008b06:	2300      	movs	r3, #0
 8008b08:	1919      	adds	r1, r3, r4
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008b0e:	b28b      	uxth	r3, r1
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f7fc ff43 	bl	80059a4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	891b      	ldrh	r3, [r3, #8]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d028      	beq.n	8008b7a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8008b28:	4b0d      	ldr	r3, [pc, #52]	; (8008b60 <tcp_receive+0xb24>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d01d      	beq.n	8008b6c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8008b30:	4b0b      	ldr	r3, [pc, #44]	; (8008b60 <tcp_receive+0xb24>)
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	4619      	mov	r1, r3
 8008b3a:	4610      	mov	r0, r2
 8008b3c:	f7fc fa60 	bl	8005000 <pbuf_cat>
 8008b40:	e018      	b.n	8008b74 <tcp_receive+0xb38>
 8008b42:	bf00      	nop
 8008b44:	2000b446 	.word	0x2000b446
 8008b48:	2000b43c 	.word	0x2000b43c
 8008b4c:	2000b41c 	.word	0x2000b41c
 8008b50:	0800f564 	.word	0x0800f564
 8008b54:	0800f944 	.word	0x0800f944
 8008b58:	0800f5b0 	.word	0x0800f5b0
 8008b5c:	0800f980 	.word	0x0800f980
 8008b60:	2000b44c 	.word	0x2000b44c
 8008b64:	2000b449 	.word	0x2000b449
 8008b68:	0800f9a0 	.word	0x0800f9a0
            } else {
              recv_data = cseg->p;
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	4a70      	ldr	r2, [pc, #448]	; (8008d34 <tcp_receive+0xcf8>)
 8008b72:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	2200      	movs	r2, #0
 8008b78:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	899b      	ldrh	r3, [r3, #12]
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fa fe1c 	bl	80037c0 <lwip_htons>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	f003 0301 	and.w	r3, r3, #1
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00d      	beq.n	8008bb0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8008b94:	4b68      	ldr	r3, [pc, #416]	; (8008d38 <tcp_receive+0xcfc>)
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	f043 0320 	orr.w	r3, r3, #32
 8008b9c:	b2da      	uxtb	r2, r3
 8008b9e:	4b66      	ldr	r3, [pc, #408]	; (8008d38 <tcp_receive+0xcfc>)
 8008ba0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	7d1b      	ldrb	r3, [r3, #20]
 8008ba6:	2b04      	cmp	r3, #4
 8008ba8:	d102      	bne.n	8008bb0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2207      	movs	r2, #7
 8008bae:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8008bb8:	68b8      	ldr	r0, [r7, #8]
 8008bba:	f7fd fbd2 	bl	8006362 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d008      	beq.n	8008bd8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	685a      	ldr	r2, [r3, #4]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	f43f af43 	beq.w	8008a5e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	8b5b      	ldrh	r3, [r3, #26]
 8008bdc:	f003 0301 	and.w	r3, r3, #1
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00e      	beq.n	8008c02 <tcp_receive+0xbc6>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	8b5b      	ldrh	r3, [r3, #26]
 8008be8:	f023 0301 	bic.w	r3, r3, #1
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	835a      	strh	r2, [r3, #26]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	8b5b      	ldrh	r3, [r3, #26]
 8008bf6:	f043 0302 	orr.w	r3, r3, #2
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008c00:	e188      	b.n	8008f14 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	8b5b      	ldrh	r3, [r3, #26]
 8008c06:	f043 0301 	orr.w	r3, r3, #1
 8008c0a:	b29a      	uxth	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008c10:	e180      	b.n	8008f14 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d106      	bne.n	8008c28 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008c1a:	4848      	ldr	r0, [pc, #288]	; (8008d3c <tcp_receive+0xd00>)
 8008c1c:	f7fd fbba 	bl	8006394 <tcp_seg_copy>
 8008c20:	4602      	mov	r2, r0
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	675a      	str	r2, [r3, #116]	; 0x74
 8008c26:	e16d      	b.n	8008f04 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c30:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c32:	e157      	b.n	8008ee4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8008c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	685a      	ldr	r2, [r3, #4]
 8008c3a:	4b41      	ldr	r3, [pc, #260]	; (8008d40 <tcp_receive+0xd04>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d11d      	bne.n	8008c7e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8008c42:	4b3e      	ldr	r3, [pc, #248]	; (8008d3c <tcp_receive+0xd00>)
 8008c44:	891a      	ldrh	r2, [r3, #8]
 8008c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c48:	891b      	ldrh	r3, [r3, #8]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	f240 814f 	bls.w	8008eee <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008c50:	483a      	ldr	r0, [pc, #232]	; (8008d3c <tcp_receive+0xd00>)
 8008c52:	f7fd fb9f 	bl	8006394 <tcp_seg_copy>
 8008c56:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f000 8149 	beq.w	8008ef2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8008c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d003      	beq.n	8008c6e <tcp_receive+0xc32>
                    prev->next = cseg;
 8008c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	601a      	str	r2, [r3, #0]
 8008c6c:	e002      	b.n	8008c74 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	697a      	ldr	r2, [r7, #20]
 8008c72:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8008c74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c76:	6978      	ldr	r0, [r7, #20]
 8008c78:	f7ff f8dc 	bl	8007e34 <tcp_oos_insert_segment>
                }
                break;
 8008c7c:	e139      	b.n	8008ef2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8008c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d117      	bne.n	8008cb4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008c84:	4b2e      	ldr	r3, [pc, #184]	; (8008d40 <tcp_receive+0xd04>)
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	1ad3      	subs	r3, r2, r3
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	da57      	bge.n	8008d44 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008c94:	4829      	ldr	r0, [pc, #164]	; (8008d3c <tcp_receive+0xd00>)
 8008c96:	f7fd fb7d 	bl	8006394 <tcp_seg_copy>
 8008c9a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f000 8129 	beq.w	8008ef6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	69ba      	ldr	r2, [r7, #24]
 8008ca8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8008caa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008cac:	69b8      	ldr	r0, [r7, #24]
 8008cae:	f7ff f8c1 	bl	8007e34 <tcp_oos_insert_segment>
                  }
                  break;
 8008cb2:	e120      	b.n	8008ef6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8008cb4:	4b22      	ldr	r3, [pc, #136]	; (8008d40 <tcp_receive+0xd04>)
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	db3e      	blt.n	8008d44 <tcp_receive+0xd08>
 8008cc6:	4b1e      	ldr	r3, [pc, #120]	; (8008d40 <tcp_receive+0xd04>)
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	dc35      	bgt.n	8008d44 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008cd8:	4818      	ldr	r0, [pc, #96]	; (8008d3c <tcp_receive+0xd00>)
 8008cda:	f7fd fb5b 	bl	8006394 <tcp_seg_copy>
 8008cde:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	f000 8109 	beq.w	8008efa <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8008ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cf0:	8912      	ldrh	r2, [r2, #8]
 8008cf2:	441a      	add	r2, r3
 8008cf4:	4b12      	ldr	r3, [pc, #72]	; (8008d40 <tcp_receive+0xd04>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	1ad3      	subs	r3, r2, r3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	dd12      	ble.n	8008d24 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008cfe:	4b10      	ldr	r3, [pc, #64]	; (8008d40 <tcp_receive+0xd04>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	b29a      	uxth	r2, r3
 8008d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d12:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8008d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d16:	685a      	ldr	r2, [r3, #4]
 8008d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d1a:	891b      	ldrh	r3, [r3, #8]
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	4610      	mov	r0, r2
 8008d20:	f7fb ff26 	bl	8004b70 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8008d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d26:	69fa      	ldr	r2, [r7, #28]
 8008d28:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8008d2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d2c:	69f8      	ldr	r0, [r7, #28]
 8008d2e:	f7ff f881 	bl	8007e34 <tcp_oos_insert_segment>
                  }
                  break;
 8008d32:	e0e2      	b.n	8008efa <tcp_receive+0xebe>
 8008d34:	2000b44c 	.word	0x2000b44c
 8008d38:	2000b449 	.word	0x2000b449
 8008d3c:	2000b41c 	.word	0x2000b41c
 8008d40:	2000b43c 	.word	0x2000b43c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8008d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d46:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8008d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f040 80c6 	bne.w	8008ede <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8008d52:	4b80      	ldr	r3, [pc, #512]	; (8008f54 <tcp_receive+0xf18>)
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f340 80bd 	ble.w	8008ede <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	899b      	ldrh	r3, [r3, #12]
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7fa fd27 	bl	80037c0 <lwip_htons>
 8008d72:	4603      	mov	r3, r0
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	f003 0301 	and.w	r3, r3, #1
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f040 80bf 	bne.w	8008efe <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8008d80:	4875      	ldr	r0, [pc, #468]	; (8008f58 <tcp_receive+0xf1c>)
 8008d82:	f7fd fb07 	bl	8006394 <tcp_seg_copy>
 8008d86:	4602      	mov	r2, r0
 8008d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8008d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f000 80b6 	beq.w	8008f02 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d9e:	8912      	ldrh	r2, [r2, #8]
 8008da0:	441a      	add	r2, r3
 8008da2:	4b6c      	ldr	r3, [pc, #432]	; (8008f54 <tcp_receive+0xf18>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	1ad3      	subs	r3, r2, r3
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	dd12      	ble.n	8008dd2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008dac:	4b69      	ldr	r3, [pc, #420]	; (8008f54 <tcp_receive+0xf18>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	1ad3      	subs	r3, r2, r3
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8008dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc4:	685a      	ldr	r2, [r3, #4]
 8008dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc8:	891b      	ldrh	r3, [r3, #8]
 8008dca:	4619      	mov	r1, r3
 8008dcc:	4610      	mov	r0, r2
 8008dce:	f7fb fecf 	bl	8004b70 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8008dd2:	4b62      	ldr	r3, [pc, #392]	; (8008f5c <tcp_receive+0xf20>)
 8008dd4:	881b      	ldrh	r3, [r3, #0]
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	4b5e      	ldr	r3, [pc, #376]	; (8008f54 <tcp_receive+0xf18>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	441a      	add	r2, r3
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de2:	6879      	ldr	r1, [r7, #4]
 8008de4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008de6:	440b      	add	r3, r1
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f340 8089 	ble.w	8008f02 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8008df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	899b      	ldrh	r3, [r3, #12]
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fa fce0 	bl	80037c0 <lwip_htons>
 8008e00:	4603      	mov	r3, r0
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	f003 0301 	and.w	r3, r3, #1
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d022      	beq.n	8008e52 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8008e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	899b      	ldrh	r3, [r3, #12]
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	b21b      	sxth	r3, r3
 8008e18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008e1c:	b21c      	sxth	r4, r3
 8008e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	899b      	ldrh	r3, [r3, #12]
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7fa fcc9 	bl	80037c0 <lwip_htons>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7fa fcc0 	bl	80037c0 <lwip_htons>
 8008e40:	4603      	mov	r3, r0
 8008e42:	b21b      	sxth	r3, r3
 8008e44:	4323      	orrs	r3, r4
 8008e46:	b21a      	sxth	r2, r3
 8008e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	b292      	uxth	r2, r2
 8008e50:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e5c:	4413      	add	r3, r2
 8008e5e:	b299      	uxth	r1, r3
 8008e60:	4b3c      	ldr	r3, [pc, #240]	; (8008f54 <tcp_receive+0xf18>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	1a8a      	subs	r2, r1, r2
 8008e6c:	b292      	uxth	r2, r2
 8008e6e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	685a      	ldr	r2, [r3, #4]
 8008e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	891b      	ldrh	r3, [r3, #8]
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	4610      	mov	r0, r2
 8008e80:	f7fb fe76 	bl	8004b70 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8008e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	891c      	ldrh	r4, [r3, #8]
 8008e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	899b      	ldrh	r3, [r3, #12]
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7fa fc93 	bl	80037c0 <lwip_htons>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	f003 0303 	and.w	r3, r3, #3
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d001      	beq.n	8008eaa <tcp_receive+0xe6e>
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e000      	b.n	8008eac <tcp_receive+0xe70>
 8008eaa:	2300      	movs	r3, #0
 8008eac:	4423      	add	r3, r4
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	4b2a      	ldr	r3, [pc, #168]	; (8008f5c <tcp_receive+0xf20>)
 8008eb2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008eb4:	4b29      	ldr	r3, [pc, #164]	; (8008f5c <tcp_receive+0xf20>)
 8008eb6:	881b      	ldrh	r3, [r3, #0]
 8008eb8:	461a      	mov	r2, r3
 8008eba:	4b26      	ldr	r3, [pc, #152]	; (8008f54 <tcp_receive+0xf18>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	441a      	add	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec4:	6879      	ldr	r1, [r7, #4]
 8008ec6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008ec8:	440b      	add	r3, r1
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d019      	beq.n	8008f02 <tcp_receive+0xec6>
 8008ece:	4b24      	ldr	r3, [pc, #144]	; (8008f60 <tcp_receive+0xf24>)
 8008ed0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8008ed4:	4923      	ldr	r1, [pc, #140]	; (8008f64 <tcp_receive+0xf28>)
 8008ed6:	4824      	ldr	r0, [pc, #144]	; (8008f68 <tcp_receive+0xf2c>)
 8008ed8:	f004 f9ce 	bl	800d278 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8008edc:	e011      	b.n	8008f02 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f47f aea4 	bne.w	8008c34 <tcp_receive+0xbf8>
 8008eec:	e00a      	b.n	8008f04 <tcp_receive+0xec8>
                break;
 8008eee:	bf00      	nop
 8008ef0:	e008      	b.n	8008f04 <tcp_receive+0xec8>
                break;
 8008ef2:	bf00      	nop
 8008ef4:	e006      	b.n	8008f04 <tcp_receive+0xec8>
                  break;
 8008ef6:	bf00      	nop
 8008ef8:	e004      	b.n	8008f04 <tcp_receive+0xec8>
                  break;
 8008efa:	bf00      	nop
 8008efc:	e002      	b.n	8008f04 <tcp_receive+0xec8>
                  break;
 8008efe:	bf00      	nop
 8008f00:	e000      	b.n	8008f04 <tcp_receive+0xec8>
                break;
 8008f02:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f001 fa33 	bl	800a370 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8008f0a:	e003      	b.n	8008f14 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f001 fa2f 	bl	800a370 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008f12:	e01a      	b.n	8008f4a <tcp_receive+0xf0e>
 8008f14:	e019      	b.n	8008f4a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8008f16:	4b0f      	ldr	r3, [pc, #60]	; (8008f54 <tcp_receive+0xf18>)
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1e:	1ad3      	subs	r3, r2, r3
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	db0a      	blt.n	8008f3a <tcp_receive+0xefe>
 8008f24:	4b0b      	ldr	r3, [pc, #44]	; (8008f54 <tcp_receive+0xf18>)
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2c:	6879      	ldr	r1, [r7, #4]
 8008f2e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008f30:	440b      	add	r3, r1
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	3301      	adds	r3, #1
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	dd07      	ble.n	8008f4a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	8b5b      	ldrh	r3, [r3, #26]
 8008f3e:	f043 0302 	orr.w	r3, r3, #2
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8008f48:	e7ff      	b.n	8008f4a <tcp_receive+0xf0e>
 8008f4a:	bf00      	nop
 8008f4c:	3750      	adds	r7, #80	; 0x50
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bdb0      	pop	{r4, r5, r7, pc}
 8008f52:	bf00      	nop
 8008f54:	2000b43c 	.word	0x2000b43c
 8008f58:	2000b41c 	.word	0x2000b41c
 8008f5c:	2000b446 	.word	0x2000b446
 8008f60:	0800f564 	.word	0x0800f564
 8008f64:	0800f90c 	.word	0x0800f90c
 8008f68:	0800f5b0 	.word	0x0800f5b0

08008f6c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8008f72:	4b15      	ldr	r3, [pc, #84]	; (8008fc8 <tcp_get_next_optbyte+0x5c>)
 8008f74:	881b      	ldrh	r3, [r3, #0]
 8008f76:	1c5a      	adds	r2, r3, #1
 8008f78:	b291      	uxth	r1, r2
 8008f7a:	4a13      	ldr	r2, [pc, #76]	; (8008fc8 <tcp_get_next_optbyte+0x5c>)
 8008f7c:	8011      	strh	r1, [r2, #0]
 8008f7e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8008f80:	4b12      	ldr	r3, [pc, #72]	; (8008fcc <tcp_get_next_optbyte+0x60>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d004      	beq.n	8008f92 <tcp_get_next_optbyte+0x26>
 8008f88:	4b11      	ldr	r3, [pc, #68]	; (8008fd0 <tcp_get_next_optbyte+0x64>)
 8008f8a:	881b      	ldrh	r3, [r3, #0]
 8008f8c:	88fa      	ldrh	r2, [r7, #6]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d208      	bcs.n	8008fa4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8008f92:	4b10      	ldr	r3, [pc, #64]	; (8008fd4 <tcp_get_next_optbyte+0x68>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	3314      	adds	r3, #20
 8008f98:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8008f9a:	88fb      	ldrh	r3, [r7, #6]
 8008f9c:	683a      	ldr	r2, [r7, #0]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	e00b      	b.n	8008fbc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8008fa4:	88fb      	ldrh	r3, [r7, #6]
 8008fa6:	b2da      	uxtb	r2, r3
 8008fa8:	4b09      	ldr	r3, [pc, #36]	; (8008fd0 <tcp_get_next_optbyte+0x64>)
 8008faa:	881b      	ldrh	r3, [r3, #0]
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	1ad3      	subs	r3, r2, r3
 8008fb0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8008fb2:	4b06      	ldr	r3, [pc, #24]	; (8008fcc <tcp_get_next_optbyte+0x60>)
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	797b      	ldrb	r3, [r7, #5]
 8008fb8:	4413      	add	r3, r2
 8008fba:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr
 8008fc8:	2000b438 	.word	0x2000b438
 8008fcc:	2000b434 	.word	0x2000b434
 8008fd0:	2000b432 	.word	0x2000b432
 8008fd4:	2000b42c 	.word	0x2000b42c

08008fd8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d106      	bne.n	8008ff4 <tcp_parseopt+0x1c>
 8008fe6:	4b32      	ldr	r3, [pc, #200]	; (80090b0 <tcp_parseopt+0xd8>)
 8008fe8:	f240 727d 	movw	r2, #1917	; 0x77d
 8008fec:	4931      	ldr	r1, [pc, #196]	; (80090b4 <tcp_parseopt+0xdc>)
 8008fee:	4832      	ldr	r0, [pc, #200]	; (80090b8 <tcp_parseopt+0xe0>)
 8008ff0:	f004 f942 	bl	800d278 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8008ff4:	4b31      	ldr	r3, [pc, #196]	; (80090bc <tcp_parseopt+0xe4>)
 8008ff6:	881b      	ldrh	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d055      	beq.n	80090a8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008ffc:	4b30      	ldr	r3, [pc, #192]	; (80090c0 <tcp_parseopt+0xe8>)
 8008ffe:	2200      	movs	r2, #0
 8009000:	801a      	strh	r2, [r3, #0]
 8009002:	e045      	b.n	8009090 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8009004:	f7ff ffb2 	bl	8008f6c <tcp_get_next_optbyte>
 8009008:	4603      	mov	r3, r0
 800900a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800900c:	7bfb      	ldrb	r3, [r7, #15]
 800900e:	2b02      	cmp	r3, #2
 8009010:	d006      	beq.n	8009020 <tcp_parseopt+0x48>
 8009012:	2b02      	cmp	r3, #2
 8009014:	dc2b      	bgt.n	800906e <tcp_parseopt+0x96>
 8009016:	2b00      	cmp	r3, #0
 8009018:	d041      	beq.n	800909e <tcp_parseopt+0xc6>
 800901a:	2b01      	cmp	r3, #1
 800901c:	d127      	bne.n	800906e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800901e:	e037      	b.n	8009090 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009020:	f7ff ffa4 	bl	8008f6c <tcp_get_next_optbyte>
 8009024:	4603      	mov	r3, r0
 8009026:	2b04      	cmp	r3, #4
 8009028:	d13b      	bne.n	80090a2 <tcp_parseopt+0xca>
 800902a:	4b25      	ldr	r3, [pc, #148]	; (80090c0 <tcp_parseopt+0xe8>)
 800902c:	881b      	ldrh	r3, [r3, #0]
 800902e:	3301      	adds	r3, #1
 8009030:	4a22      	ldr	r2, [pc, #136]	; (80090bc <tcp_parseopt+0xe4>)
 8009032:	8812      	ldrh	r2, [r2, #0]
 8009034:	4293      	cmp	r3, r2
 8009036:	da34      	bge.n	80090a2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009038:	f7ff ff98 	bl	8008f6c <tcp_get_next_optbyte>
 800903c:	4603      	mov	r3, r0
 800903e:	b29b      	uxth	r3, r3
 8009040:	021b      	lsls	r3, r3, #8
 8009042:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009044:	f7ff ff92 	bl	8008f6c <tcp_get_next_optbyte>
 8009048:	4603      	mov	r3, r0
 800904a:	b29a      	uxth	r2, r3
 800904c:	89bb      	ldrh	r3, [r7, #12]
 800904e:	4313      	orrs	r3, r2
 8009050:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009052:	89bb      	ldrh	r3, [r7, #12]
 8009054:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009058:	d804      	bhi.n	8009064 <tcp_parseopt+0x8c>
 800905a:	89bb      	ldrh	r3, [r7, #12]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d001      	beq.n	8009064 <tcp_parseopt+0x8c>
 8009060:	89ba      	ldrh	r2, [r7, #12]
 8009062:	e001      	b.n	8009068 <tcp_parseopt+0x90>
 8009064:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800906c:	e010      	b.n	8009090 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800906e:	f7ff ff7d 	bl	8008f6c <tcp_get_next_optbyte>
 8009072:	4603      	mov	r3, r0
 8009074:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009076:	7afb      	ldrb	r3, [r7, #11]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d914      	bls.n	80090a6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800907c:	7afb      	ldrb	r3, [r7, #11]
 800907e:	b29a      	uxth	r2, r3
 8009080:	4b0f      	ldr	r3, [pc, #60]	; (80090c0 <tcp_parseopt+0xe8>)
 8009082:	881b      	ldrh	r3, [r3, #0]
 8009084:	4413      	add	r3, r2
 8009086:	b29b      	uxth	r3, r3
 8009088:	3b02      	subs	r3, #2
 800908a:	b29a      	uxth	r2, r3
 800908c:	4b0c      	ldr	r3, [pc, #48]	; (80090c0 <tcp_parseopt+0xe8>)
 800908e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009090:	4b0b      	ldr	r3, [pc, #44]	; (80090c0 <tcp_parseopt+0xe8>)
 8009092:	881a      	ldrh	r2, [r3, #0]
 8009094:	4b09      	ldr	r3, [pc, #36]	; (80090bc <tcp_parseopt+0xe4>)
 8009096:	881b      	ldrh	r3, [r3, #0]
 8009098:	429a      	cmp	r2, r3
 800909a:	d3b3      	bcc.n	8009004 <tcp_parseopt+0x2c>
 800909c:	e004      	b.n	80090a8 <tcp_parseopt+0xd0>
          return;
 800909e:	bf00      	nop
 80090a0:	e002      	b.n	80090a8 <tcp_parseopt+0xd0>
            return;
 80090a2:	bf00      	nop
 80090a4:	e000      	b.n	80090a8 <tcp_parseopt+0xd0>
            return;
 80090a6:	bf00      	nop
      }
    }
  }
}
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	0800f564 	.word	0x0800f564
 80090b4:	0800f9c8 	.word	0x0800f9c8
 80090b8:	0800f5b0 	.word	0x0800f5b0
 80090bc:	2000b430 	.word	0x2000b430
 80090c0:	2000b438 	.word	0x2000b438

080090c4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80090c4:	b480      	push	{r7}
 80090c6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80090c8:	4b05      	ldr	r3, [pc, #20]	; (80090e0 <tcp_trigger_input_pcb_close+0x1c>)
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	f043 0310 	orr.w	r3, r3, #16
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	4b03      	ldr	r3, [pc, #12]	; (80090e0 <tcp_trigger_input_pcb_close+0x1c>)
 80090d4:	701a      	strb	r2, [r3, #0]
}
 80090d6:	bf00      	nop
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr
 80090e0:	2000b449 	.word	0x2000b449

080090e4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00a      	beq.n	800910c <tcp_route+0x28>
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	7a1b      	ldrb	r3, [r3, #8]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d006      	beq.n	800910c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	7a1b      	ldrb	r3, [r3, #8]
 8009102:	4618      	mov	r0, r3
 8009104:	f7fb fb5a 	bl	80047bc <netif_get_by_index>
 8009108:	4603      	mov	r3, r0
 800910a:	e003      	b.n	8009114 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f002 fe7d 	bl	800be0c <ip4_route>
 8009112:	4603      	mov	r3, r0
  }
}
 8009114:	4618      	mov	r0, r3
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800911c:	b590      	push	{r4, r7, lr}
 800911e:	b087      	sub	sp, #28
 8009120:	af00      	add	r7, sp, #0
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	60b9      	str	r1, [r7, #8]
 8009126:	603b      	str	r3, [r7, #0]
 8009128:	4613      	mov	r3, r2
 800912a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d105      	bne.n	800913e <tcp_create_segment+0x22>
 8009132:	4b44      	ldr	r3, [pc, #272]	; (8009244 <tcp_create_segment+0x128>)
 8009134:	22a3      	movs	r2, #163	; 0xa3
 8009136:	4944      	ldr	r1, [pc, #272]	; (8009248 <tcp_create_segment+0x12c>)
 8009138:	4844      	ldr	r0, [pc, #272]	; (800924c <tcp_create_segment+0x130>)
 800913a:	f004 f89d 	bl	800d278 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d105      	bne.n	8009150 <tcp_create_segment+0x34>
 8009144:	4b3f      	ldr	r3, [pc, #252]	; (8009244 <tcp_create_segment+0x128>)
 8009146:	22a4      	movs	r2, #164	; 0xa4
 8009148:	4941      	ldr	r1, [pc, #260]	; (8009250 <tcp_create_segment+0x134>)
 800914a:	4840      	ldr	r0, [pc, #256]	; (800924c <tcp_create_segment+0x130>)
 800914c:	f004 f894 	bl	800d278 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009150:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	b2db      	uxtb	r3, r3
 8009158:	f003 0304 	and.w	r3, r3, #4
 800915c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800915e:	2003      	movs	r0, #3
 8009160:	f7fa ffa6 	bl	80040b0 <memp_malloc>
 8009164:	6138      	str	r0, [r7, #16]
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d104      	bne.n	8009176 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800916c:	68b8      	ldr	r0, [r7, #8]
 800916e:	f7fb fe85 	bl	8004e7c <pbuf_free>
    return NULL;
 8009172:	2300      	movs	r3, #0
 8009174:	e061      	b.n	800923a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800917c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	2200      	movs	r2, #0
 8009182:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	891a      	ldrh	r2, [r3, #8]
 800918e:	7dfb      	ldrb	r3, [r7, #23]
 8009190:	b29b      	uxth	r3, r3
 8009192:	429a      	cmp	r2, r3
 8009194:	d205      	bcs.n	80091a2 <tcp_create_segment+0x86>
 8009196:	4b2b      	ldr	r3, [pc, #172]	; (8009244 <tcp_create_segment+0x128>)
 8009198:	22b0      	movs	r2, #176	; 0xb0
 800919a:	492e      	ldr	r1, [pc, #184]	; (8009254 <tcp_create_segment+0x138>)
 800919c:	482b      	ldr	r0, [pc, #172]	; (800924c <tcp_create_segment+0x130>)
 800919e:	f004 f86b 	bl	800d278 <iprintf>
  seg->len = p->tot_len - optlen;
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	891a      	ldrh	r2, [r3, #8]
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	1ad3      	subs	r3, r2, r3
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80091b2:	2114      	movs	r1, #20
 80091b4:	68b8      	ldr	r0, [r7, #8]
 80091b6:	f7fb fdcb 	bl	8004d50 <pbuf_add_header>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d004      	beq.n	80091ca <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80091c0:	6938      	ldr	r0, [r7, #16]
 80091c2:	f7fd f8ce 	bl	8006362 <tcp_seg_free>
    return NULL;
 80091c6:	2300      	movs	r3, #0
 80091c8:	e037      	b.n	800923a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	685a      	ldr	r2, [r3, #4]
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	8ada      	ldrh	r2, [r3, #22]
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	68dc      	ldr	r4, [r3, #12]
 80091dc:	4610      	mov	r0, r2
 80091de:	f7fa faef 	bl	80037c0 <lwip_htons>
 80091e2:	4603      	mov	r3, r0
 80091e4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	8b1a      	ldrh	r2, [r3, #24]
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	68dc      	ldr	r4, [r3, #12]
 80091ee:	4610      	mov	r0, r2
 80091f0:	f7fa fae6 	bl	80037c0 <lwip_htons>
 80091f4:	4603      	mov	r3, r0
 80091f6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	68dc      	ldr	r4, [r3, #12]
 80091fc:	6838      	ldr	r0, [r7, #0]
 80091fe:	f7fa faf4 	bl	80037ea <lwip_htonl>
 8009202:	4603      	mov	r3, r0
 8009204:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009206:	7dfb      	ldrb	r3, [r7, #23]
 8009208:	089b      	lsrs	r3, r3, #2
 800920a:	b2db      	uxtb	r3, r3
 800920c:	b29b      	uxth	r3, r3
 800920e:	3305      	adds	r3, #5
 8009210:	b29b      	uxth	r3, r3
 8009212:	031b      	lsls	r3, r3, #12
 8009214:	b29a      	uxth	r2, r3
 8009216:	79fb      	ldrb	r3, [r7, #7]
 8009218:	b29b      	uxth	r3, r3
 800921a:	4313      	orrs	r3, r2
 800921c:	b29a      	uxth	r2, r3
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	68dc      	ldr	r4, [r3, #12]
 8009222:	4610      	mov	r0, r2
 8009224:	f7fa facc 	bl	80037c0 <lwip_htons>
 8009228:	4603      	mov	r3, r0
 800922a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	2200      	movs	r2, #0
 8009232:	749a      	strb	r2, [r3, #18]
 8009234:	2200      	movs	r2, #0
 8009236:	74da      	strb	r2, [r3, #19]
  return seg;
 8009238:	693b      	ldr	r3, [r7, #16]
}
 800923a:	4618      	mov	r0, r3
 800923c:	371c      	adds	r7, #28
 800923e:	46bd      	mov	sp, r7
 8009240:	bd90      	pop	{r4, r7, pc}
 8009242:	bf00      	nop
 8009244:	0800f9e4 	.word	0x0800f9e4
 8009248:	0800fa18 	.word	0x0800fa18
 800924c:	0800fa38 	.word	0x0800fa38
 8009250:	0800fa60 	.word	0x0800fa60
 8009254:	0800fa84 	.word	0x0800fa84

08009258 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8009258:	b590      	push	{r4, r7, lr}
 800925a:	b08b      	sub	sp, #44	; 0x2c
 800925c:	af02      	add	r7, sp, #8
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	460b      	mov	r3, r1
 8009262:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8009264:	2300      	movs	r3, #0
 8009266:	61fb      	str	r3, [r7, #28]
 8009268:	2300      	movs	r3, #0
 800926a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800926c:	2300      	movs	r3, #0
 800926e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d106      	bne.n	8009284 <tcp_split_unsent_seg+0x2c>
 8009276:	4b95      	ldr	r3, [pc, #596]	; (80094cc <tcp_split_unsent_seg+0x274>)
 8009278:	f240 324b 	movw	r2, #843	; 0x34b
 800927c:	4994      	ldr	r1, [pc, #592]	; (80094d0 <tcp_split_unsent_seg+0x278>)
 800927e:	4895      	ldr	r0, [pc, #596]	; (80094d4 <tcp_split_unsent_seg+0x27c>)
 8009280:	f003 fffa 	bl	800d278 <iprintf>

  useg = pcb->unsent;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009288:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d102      	bne.n	8009296 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8009290:	f04f 33ff 	mov.w	r3, #4294967295
 8009294:	e116      	b.n	80094c4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8009296:	887b      	ldrh	r3, [r7, #2]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d109      	bne.n	80092b0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800929c:	4b8b      	ldr	r3, [pc, #556]	; (80094cc <tcp_split_unsent_seg+0x274>)
 800929e:	f240 3253 	movw	r2, #851	; 0x353
 80092a2:	498d      	ldr	r1, [pc, #564]	; (80094d8 <tcp_split_unsent_seg+0x280>)
 80092a4:	488b      	ldr	r0, [pc, #556]	; (80094d4 <tcp_split_unsent_seg+0x27c>)
 80092a6:	f003 ffe7 	bl	800d278 <iprintf>
    return ERR_VAL;
 80092aa:	f06f 0305 	mvn.w	r3, #5
 80092ae:	e109      	b.n	80094c4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	891b      	ldrh	r3, [r3, #8]
 80092b4:	887a      	ldrh	r2, [r7, #2]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d301      	bcc.n	80092be <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	e102      	b.n	80094c4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80092c2:	887a      	ldrh	r2, [r7, #2]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d906      	bls.n	80092d6 <tcp_split_unsent_seg+0x7e>
 80092c8:	4b80      	ldr	r3, [pc, #512]	; (80094cc <tcp_split_unsent_seg+0x274>)
 80092ca:	f240 325b 	movw	r2, #859	; 0x35b
 80092ce:	4983      	ldr	r1, [pc, #524]	; (80094dc <tcp_split_unsent_seg+0x284>)
 80092d0:	4880      	ldr	r0, [pc, #512]	; (80094d4 <tcp_split_unsent_seg+0x27c>)
 80092d2:	f003 ffd1 	bl	800d278 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	891b      	ldrh	r3, [r3, #8]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d106      	bne.n	80092ec <tcp_split_unsent_seg+0x94>
 80092de:	4b7b      	ldr	r3, [pc, #492]	; (80094cc <tcp_split_unsent_seg+0x274>)
 80092e0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80092e4:	497e      	ldr	r1, [pc, #504]	; (80094e0 <tcp_split_unsent_seg+0x288>)
 80092e6:	487b      	ldr	r0, [pc, #492]	; (80094d4 <tcp_split_unsent_seg+0x27c>)
 80092e8:	f003 ffc6 	bl	800d278 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	7a9b      	ldrb	r3, [r3, #10]
 80092f0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80092f2:	7bfb      	ldrb	r3, [r7, #15]
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	f003 0304 	and.w	r3, r3, #4
 80092fc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	891a      	ldrh	r2, [r3, #8]
 8009302:	887b      	ldrh	r3, [r7, #2]
 8009304:	1ad3      	subs	r3, r2, r3
 8009306:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8009308:	7bbb      	ldrb	r3, [r7, #14]
 800930a:	b29a      	uxth	r2, r3
 800930c:	89bb      	ldrh	r3, [r7, #12]
 800930e:	4413      	add	r3, r2
 8009310:	b29b      	uxth	r3, r3
 8009312:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009316:	4619      	mov	r1, r3
 8009318:	2036      	movs	r0, #54	; 0x36
 800931a:	f7fb facb 	bl	80048b4 <pbuf_alloc>
 800931e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	2b00      	cmp	r3, #0
 8009324:	f000 80b7 	beq.w	8009496 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	891a      	ldrh	r2, [r3, #8]
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	891b      	ldrh	r3, [r3, #8]
 8009332:	1ad3      	subs	r3, r2, r3
 8009334:	b29a      	uxth	r2, r3
 8009336:	887b      	ldrh	r3, [r7, #2]
 8009338:	4413      	add	r3, r2
 800933a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	6858      	ldr	r0, [r3, #4]
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	685a      	ldr	r2, [r3, #4]
 8009344:	7bbb      	ldrb	r3, [r7, #14]
 8009346:	18d1      	adds	r1, r2, r3
 8009348:	897b      	ldrh	r3, [r7, #10]
 800934a:	89ba      	ldrh	r2, [r7, #12]
 800934c:	f7fb ff80 	bl	8005250 <pbuf_copy_partial>
 8009350:	4603      	mov	r3, r0
 8009352:	461a      	mov	r2, r3
 8009354:	89bb      	ldrh	r3, [r7, #12]
 8009356:	4293      	cmp	r3, r2
 8009358:	f040 809f 	bne.w	800949a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	899b      	ldrh	r3, [r3, #12]
 8009362:	b29b      	uxth	r3, r3
 8009364:	4618      	mov	r0, r3
 8009366:	f7fa fa2b 	bl	80037c0 <lwip_htons>
 800936a:	4603      	mov	r3, r0
 800936c:	b2db      	uxtb	r3, r3
 800936e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009372:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8009374:	2300      	movs	r3, #0
 8009376:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8009378:	7efb      	ldrb	r3, [r7, #27]
 800937a:	f003 0308 	and.w	r3, r3, #8
 800937e:	2b00      	cmp	r3, #0
 8009380:	d007      	beq.n	8009392 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8009382:	7efb      	ldrb	r3, [r7, #27]
 8009384:	f023 0308 	bic.w	r3, r3, #8
 8009388:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800938a:	7ebb      	ldrb	r3, [r7, #26]
 800938c:	f043 0308 	orr.w	r3, r3, #8
 8009390:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8009392:	7efb      	ldrb	r3, [r7, #27]
 8009394:	f003 0301 	and.w	r3, r3, #1
 8009398:	2b00      	cmp	r3, #0
 800939a:	d007      	beq.n	80093ac <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800939c:	7efb      	ldrb	r3, [r7, #27]
 800939e:	f023 0301 	bic.w	r3, r3, #1
 80093a2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80093a4:	7ebb      	ldrb	r3, [r7, #26]
 80093a6:	f043 0301 	orr.w	r3, r3, #1
 80093aa:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fa fa19 	bl	80037ea <lwip_htonl>
 80093b8:	4602      	mov	r2, r0
 80093ba:	887b      	ldrh	r3, [r7, #2]
 80093bc:	18d1      	adds	r1, r2, r3
 80093be:	7eba      	ldrb	r2, [r7, #26]
 80093c0:	7bfb      	ldrb	r3, [r7, #15]
 80093c2:	9300      	str	r3, [sp, #0]
 80093c4:	460b      	mov	r3, r1
 80093c6:	6939      	ldr	r1, [r7, #16]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f7ff fea7 	bl	800911c <tcp_create_segment>
 80093ce:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d063      	beq.n	800949e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	4618      	mov	r0, r3
 80093dc:	f7fb fdd6 	bl	8004f8c <pbuf_clen>
 80093e0:	4603      	mov	r3, r0
 80093e2:	461a      	mov	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80093ea:	1a9b      	subs	r3, r3, r2
 80093ec:	b29a      	uxth	r2, r3
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	6858      	ldr	r0, [r3, #4]
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	891a      	ldrh	r2, [r3, #8]
 80093fe:	89bb      	ldrh	r3, [r7, #12]
 8009400:	1ad3      	subs	r3, r2, r3
 8009402:	b29b      	uxth	r3, r3
 8009404:	4619      	mov	r1, r3
 8009406:	f7fb fbb3 	bl	8004b70 <pbuf_realloc>
  useg->len -= remainder;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	891a      	ldrh	r2, [r3, #8]
 800940e:	89bb      	ldrh	r3, [r7, #12]
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	b29a      	uxth	r2, r3
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	899b      	ldrh	r3, [r3, #12]
 800941e:	b29c      	uxth	r4, r3
 8009420:	7efb      	ldrb	r3, [r7, #27]
 8009422:	b29b      	uxth	r3, r3
 8009424:	4618      	mov	r0, r3
 8009426:	f7fa f9cb 	bl	80037c0 <lwip_htons>
 800942a:	4603      	mov	r3, r0
 800942c:	461a      	mov	r2, r3
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	4322      	orrs	r2, r4
 8009434:	b292      	uxth	r2, r2
 8009436:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	4618      	mov	r0, r3
 800943e:	f7fb fda5 	bl	8004f8c <pbuf_clen>
 8009442:	4603      	mov	r3, r0
 8009444:	461a      	mov	r2, r3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800944c:	4413      	add	r3, r2
 800944e:	b29a      	uxth	r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	4618      	mov	r0, r3
 800945c:	f7fb fd96 	bl	8004f8c <pbuf_clen>
 8009460:	4603      	mov	r3, r0
 8009462:	461a      	mov	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800946a:	4413      	add	r3, r2
 800946c:	b29a      	uxth	r2, r3
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	69fa      	ldr	r2, [r7, #28]
 8009480:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d103      	bne.n	8009492 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8009492:	2300      	movs	r3, #0
 8009494:	e016      	b.n	80094c4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8009496:	bf00      	nop
 8009498:	e002      	b.n	80094a0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800949a:	bf00      	nop
 800949c:	e000      	b.n	80094a0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800949e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d006      	beq.n	80094b4 <tcp_split_unsent_seg+0x25c>
 80094a6:	4b09      	ldr	r3, [pc, #36]	; (80094cc <tcp_split_unsent_seg+0x274>)
 80094a8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80094ac:	490d      	ldr	r1, [pc, #52]	; (80094e4 <tcp_split_unsent_seg+0x28c>)
 80094ae:	4809      	ldr	r0, [pc, #36]	; (80094d4 <tcp_split_unsent_seg+0x27c>)
 80094b0:	f003 fee2 	bl	800d278 <iprintf>
  if (p != NULL) {
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d002      	beq.n	80094c0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80094ba:	6938      	ldr	r0, [r7, #16]
 80094bc:	f7fb fcde 	bl	8004e7c <pbuf_free>
  }

  return ERR_MEM;
 80094c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3724      	adds	r7, #36	; 0x24
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd90      	pop	{r4, r7, pc}
 80094cc:	0800f9e4 	.word	0x0800f9e4
 80094d0:	0800fd78 	.word	0x0800fd78
 80094d4:	0800fa38 	.word	0x0800fa38
 80094d8:	0800fd9c 	.word	0x0800fd9c
 80094dc:	0800fdc0 	.word	0x0800fdc0
 80094e0:	0800fdd0 	.word	0x0800fdd0
 80094e4:	0800fde0 	.word	0x0800fde0

080094e8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80094e8:	b590      	push	{r4, r7, lr}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d106      	bne.n	8009504 <tcp_send_fin+0x1c>
 80094f6:	4b21      	ldr	r3, [pc, #132]	; (800957c <tcp_send_fin+0x94>)
 80094f8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80094fc:	4920      	ldr	r1, [pc, #128]	; (8009580 <tcp_send_fin+0x98>)
 80094fe:	4821      	ldr	r0, [pc, #132]	; (8009584 <tcp_send_fin+0x9c>)
 8009500:	f003 feba 	bl	800d278 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009508:	2b00      	cmp	r3, #0
 800950a:	d02e      	beq.n	800956a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009510:	60fb      	str	r3, [r7, #12]
 8009512:	e002      	b.n	800951a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d1f8      	bne.n	8009514 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	899b      	ldrh	r3, [r3, #12]
 8009528:	b29b      	uxth	r3, r3
 800952a:	4618      	mov	r0, r3
 800952c:	f7fa f948 	bl	80037c0 <lwip_htons>
 8009530:	4603      	mov	r3, r0
 8009532:	b2db      	uxtb	r3, r3
 8009534:	f003 0307 	and.w	r3, r3, #7
 8009538:	2b00      	cmp	r3, #0
 800953a:	d116      	bne.n	800956a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	899b      	ldrh	r3, [r3, #12]
 8009542:	b29c      	uxth	r4, r3
 8009544:	2001      	movs	r0, #1
 8009546:	f7fa f93b 	bl	80037c0 <lwip_htons>
 800954a:	4603      	mov	r3, r0
 800954c:	461a      	mov	r2, r3
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	4322      	orrs	r2, r4
 8009554:	b292      	uxth	r2, r2
 8009556:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	8b5b      	ldrh	r3, [r3, #26]
 800955c:	f043 0320 	orr.w	r3, r3, #32
 8009560:	b29a      	uxth	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8009566:	2300      	movs	r3, #0
 8009568:	e004      	b.n	8009574 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800956a:	2101      	movs	r1, #1
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f80b 	bl	8009588 <tcp_enqueue_flags>
 8009572:	4603      	mov	r3, r0
}
 8009574:	4618      	mov	r0, r3
 8009576:	3714      	adds	r7, #20
 8009578:	46bd      	mov	sp, r7
 800957a:	bd90      	pop	{r4, r7, pc}
 800957c:	0800f9e4 	.word	0x0800f9e4
 8009580:	0800fdec 	.word	0x0800fdec
 8009584:	0800fa38 	.word	0x0800fa38

08009588 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b08a      	sub	sp, #40	; 0x28
 800958c:	af02      	add	r7, sp, #8
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	460b      	mov	r3, r1
 8009592:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009594:	2300      	movs	r3, #0
 8009596:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009598:	2300      	movs	r3, #0
 800959a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800959c:	78fb      	ldrb	r3, [r7, #3]
 800959e:	f003 0303 	and.w	r3, r3, #3
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d106      	bne.n	80095b4 <tcp_enqueue_flags+0x2c>
 80095a6:	4b67      	ldr	r3, [pc, #412]	; (8009744 <tcp_enqueue_flags+0x1bc>)
 80095a8:	f240 4211 	movw	r2, #1041	; 0x411
 80095ac:	4966      	ldr	r1, [pc, #408]	; (8009748 <tcp_enqueue_flags+0x1c0>)
 80095ae:	4867      	ldr	r0, [pc, #412]	; (800974c <tcp_enqueue_flags+0x1c4>)
 80095b0:	f003 fe62 	bl	800d278 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d106      	bne.n	80095c8 <tcp_enqueue_flags+0x40>
 80095ba:	4b62      	ldr	r3, [pc, #392]	; (8009744 <tcp_enqueue_flags+0x1bc>)
 80095bc:	f240 4213 	movw	r2, #1043	; 0x413
 80095c0:	4963      	ldr	r1, [pc, #396]	; (8009750 <tcp_enqueue_flags+0x1c8>)
 80095c2:	4862      	ldr	r0, [pc, #392]	; (800974c <tcp_enqueue_flags+0x1c4>)
 80095c4:	f003 fe58 	bl	800d278 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80095c8:	78fb      	ldrb	r3, [r7, #3]
 80095ca:	f003 0302 	and.w	r3, r3, #2
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d001      	beq.n	80095d6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80095d2:	2301      	movs	r3, #1
 80095d4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80095d6:	7ffb      	ldrb	r3, [r7, #31]
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	f003 0304 	and.w	r3, r3, #4
 80095e0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80095e2:	7dfb      	ldrb	r3, [r7, #23]
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80095ea:	4619      	mov	r1, r3
 80095ec:	2036      	movs	r0, #54	; 0x36
 80095ee:	f7fb f961 	bl	80048b4 <pbuf_alloc>
 80095f2:	6138      	str	r0, [r7, #16]
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d109      	bne.n	800960e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	8b5b      	ldrh	r3, [r3, #26]
 80095fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009602:	b29a      	uxth	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009608:	f04f 33ff 	mov.w	r3, #4294967295
 800960c:	e095      	b.n	800973a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	895a      	ldrh	r2, [r3, #10]
 8009612:	7dfb      	ldrb	r3, [r7, #23]
 8009614:	b29b      	uxth	r3, r3
 8009616:	429a      	cmp	r2, r3
 8009618:	d206      	bcs.n	8009628 <tcp_enqueue_flags+0xa0>
 800961a:	4b4a      	ldr	r3, [pc, #296]	; (8009744 <tcp_enqueue_flags+0x1bc>)
 800961c:	f240 4239 	movw	r2, #1081	; 0x439
 8009620:	494c      	ldr	r1, [pc, #304]	; (8009754 <tcp_enqueue_flags+0x1cc>)
 8009622:	484a      	ldr	r0, [pc, #296]	; (800974c <tcp_enqueue_flags+0x1c4>)
 8009624:	f003 fe28 	bl	800d278 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800962c:	78fa      	ldrb	r2, [r7, #3]
 800962e:	7ffb      	ldrb	r3, [r7, #31]
 8009630:	9300      	str	r3, [sp, #0]
 8009632:	460b      	mov	r3, r1
 8009634:	6939      	ldr	r1, [r7, #16]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f7ff fd70 	bl	800911c <tcp_create_segment>
 800963c:	60f8      	str	r0, [r7, #12]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d109      	bne.n	8009658 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	8b5b      	ldrh	r3, [r3, #26]
 8009648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800964c:	b29a      	uxth	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009652:	f04f 33ff 	mov.w	r3, #4294967295
 8009656:	e070      	b.n	800973a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	f003 0303 	and.w	r3, r3, #3
 8009660:	2b00      	cmp	r3, #0
 8009662:	d006      	beq.n	8009672 <tcp_enqueue_flags+0xea>
 8009664:	4b37      	ldr	r3, [pc, #220]	; (8009744 <tcp_enqueue_flags+0x1bc>)
 8009666:	f240 4242 	movw	r2, #1090	; 0x442
 800966a:	493b      	ldr	r1, [pc, #236]	; (8009758 <tcp_enqueue_flags+0x1d0>)
 800966c:	4837      	ldr	r0, [pc, #220]	; (800974c <tcp_enqueue_flags+0x1c4>)
 800966e:	f003 fe03 	bl	800d278 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	891b      	ldrh	r3, [r3, #8]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d006      	beq.n	8009688 <tcp_enqueue_flags+0x100>
 800967a:	4b32      	ldr	r3, [pc, #200]	; (8009744 <tcp_enqueue_flags+0x1bc>)
 800967c:	f240 4243 	movw	r2, #1091	; 0x443
 8009680:	4936      	ldr	r1, [pc, #216]	; (800975c <tcp_enqueue_flags+0x1d4>)
 8009682:	4832      	ldr	r0, [pc, #200]	; (800974c <tcp_enqueue_flags+0x1c4>)
 8009684:	f003 fdf8 	bl	800d278 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800968c:	2b00      	cmp	r3, #0
 800968e:	d103      	bne.n	8009698 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	66da      	str	r2, [r3, #108]	; 0x6c
 8009696:	e00d      	b.n	80096b4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800969c:	61bb      	str	r3, [r7, #24]
 800969e:	e002      	b.n	80096a6 <tcp_enqueue_flags+0x11e>
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	61bb      	str	r3, [r7, #24]
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1f8      	bne.n	80096a0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80096bc:	78fb      	ldrb	r3, [r7, #3]
 80096be:	f003 0302 	and.w	r3, r3, #2
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d104      	bne.n	80096d0 <tcp_enqueue_flags+0x148>
 80096c6:	78fb      	ldrb	r3, [r7, #3]
 80096c8:	f003 0301 	and.w	r3, r3, #1
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d004      	beq.n	80096da <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096d4:	1c5a      	adds	r2, r3, #1
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80096da:	78fb      	ldrb	r3, [r7, #3]
 80096dc:	f003 0301 	and.w	r3, r3, #1
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d006      	beq.n	80096f2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	8b5b      	ldrh	r3, [r3, #26]
 80096e8:	f043 0320 	orr.w	r3, r3, #32
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7fb fc48 	bl	8004f8c <pbuf_clen>
 80096fc:	4603      	mov	r3, r0
 80096fe:	461a      	mov	r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009706:	4413      	add	r3, r2
 8009708:	b29a      	uxth	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009716:	2b00      	cmp	r3, #0
 8009718:	d00e      	beq.n	8009738 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10a      	bne.n	8009738 <tcp_enqueue_flags+0x1b0>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009726:	2b00      	cmp	r3, #0
 8009728:	d106      	bne.n	8009738 <tcp_enqueue_flags+0x1b0>
 800972a:	4b06      	ldr	r3, [pc, #24]	; (8009744 <tcp_enqueue_flags+0x1bc>)
 800972c:	f240 4265 	movw	r2, #1125	; 0x465
 8009730:	490b      	ldr	r1, [pc, #44]	; (8009760 <tcp_enqueue_flags+0x1d8>)
 8009732:	4806      	ldr	r0, [pc, #24]	; (800974c <tcp_enqueue_flags+0x1c4>)
 8009734:	f003 fda0 	bl	800d278 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3720      	adds	r7, #32
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	0800f9e4 	.word	0x0800f9e4
 8009748:	0800fe08 	.word	0x0800fe08
 800974c:	0800fa38 	.word	0x0800fa38
 8009750:	0800fe60 	.word	0x0800fe60
 8009754:	0800fe80 	.word	0x0800fe80
 8009758:	0800febc 	.word	0x0800febc
 800975c:	0800fed4 	.word	0x0800fed4
 8009760:	0800ff00 	.word	0x0800ff00

08009764 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009764:	b5b0      	push	{r4, r5, r7, lr}
 8009766:	b08a      	sub	sp, #40	; 0x28
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d106      	bne.n	8009780 <tcp_output+0x1c>
 8009772:	4b8a      	ldr	r3, [pc, #552]	; (800999c <tcp_output+0x238>)
 8009774:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8009778:	4989      	ldr	r1, [pc, #548]	; (80099a0 <tcp_output+0x23c>)
 800977a:	488a      	ldr	r0, [pc, #552]	; (80099a4 <tcp_output+0x240>)
 800977c:	f003 fd7c 	bl	800d278 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	7d1b      	ldrb	r3, [r3, #20]
 8009784:	2b01      	cmp	r3, #1
 8009786:	d106      	bne.n	8009796 <tcp_output+0x32>
 8009788:	4b84      	ldr	r3, [pc, #528]	; (800999c <tcp_output+0x238>)
 800978a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800978e:	4986      	ldr	r1, [pc, #536]	; (80099a8 <tcp_output+0x244>)
 8009790:	4884      	ldr	r0, [pc, #528]	; (80099a4 <tcp_output+0x240>)
 8009792:	f003 fd71 	bl	800d278 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009796:	4b85      	ldr	r3, [pc, #532]	; (80099ac <tcp_output+0x248>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	429a      	cmp	r2, r3
 800979e:	d101      	bne.n	80097a4 <tcp_output+0x40>
    return ERR_OK;
 80097a0:	2300      	movs	r3, #0
 80097a2:	e1ce      	b.n	8009b42 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80097b0:	4293      	cmp	r3, r2
 80097b2:	bf28      	it	cs
 80097b4:	4613      	movcs	r3, r2
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097be:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80097c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d10b      	bne.n	80097de <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	8b5b      	ldrh	r3, [r3, #26]
 80097ca:	f003 0302 	and.w	r3, r3, #2
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	f000 81aa 	beq.w	8009b28 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fdcb 	bl	800a370 <tcp_send_empty_ack>
 80097da:	4603      	mov	r3, r0
 80097dc:	e1b1      	b.n	8009b42 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80097de:	6879      	ldr	r1, [r7, #4]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	3304      	adds	r3, #4
 80097e4:	461a      	mov	r2, r3
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f7ff fc7c 	bl	80090e4 <tcp_route>
 80097ec:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d102      	bne.n	80097fa <tcp_output+0x96>
    return ERR_RTE;
 80097f4:	f06f 0303 	mvn.w	r3, #3
 80097f8:	e1a3      	b.n	8009b42 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d003      	beq.n	8009808 <tcp_output+0xa4>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d111      	bne.n	800982c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d002      	beq.n	8009814 <tcp_output+0xb0>
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	3304      	adds	r3, #4
 8009812:	e000      	b.n	8009816 <tcp_output+0xb2>
 8009814:	2300      	movs	r3, #0
 8009816:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d102      	bne.n	8009824 <tcp_output+0xc0>
      return ERR_RTE;
 800981e:	f06f 0303 	mvn.w	r3, #3
 8009822:	e18e      	b.n	8009b42 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800982c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	4618      	mov	r0, r3
 8009834:	f7f9 ffd9 	bl	80037ea <lwip_htonl>
 8009838:	4602      	mov	r2, r0
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800983e:	1ad3      	subs	r3, r2, r3
 8009840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009842:	8912      	ldrh	r2, [r2, #8]
 8009844:	4413      	add	r3, r2
 8009846:	69ba      	ldr	r2, [r7, #24]
 8009848:	429a      	cmp	r2, r3
 800984a:	d227      	bcs.n	800989c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009852:	461a      	mov	r2, r3
 8009854:	69bb      	ldr	r3, [r7, #24]
 8009856:	4293      	cmp	r3, r2
 8009858:	d114      	bne.n	8009884 <tcp_output+0x120>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800985e:	2b00      	cmp	r3, #0
 8009860:	d110      	bne.n	8009884 <tcp_output+0x120>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10b      	bne.n	8009884 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	8b5b      	ldrh	r3, [r3, #26]
 8009888:	f003 0302 	and.w	r3, r3, #2
 800988c:	2b00      	cmp	r3, #0
 800988e:	f000 814d 	beq.w	8009b2c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fd6c 	bl	800a370 <tcp_send_empty_ack>
 8009898:	4603      	mov	r3, r0
 800989a:	e152      	b.n	8009b42 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098a8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80098aa:	6a3b      	ldr	r3, [r7, #32]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f000 811c 	beq.w	8009aea <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80098b2:	e002      	b.n	80098ba <tcp_output+0x156>
 80098b4:	6a3b      	ldr	r3, [r7, #32]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	623b      	str	r3, [r7, #32]
 80098ba:	6a3b      	ldr	r3, [r7, #32]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1f8      	bne.n	80098b4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80098c2:	e112      	b.n	8009aea <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80098c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	899b      	ldrh	r3, [r3, #12]
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7f9 ff77 	bl	80037c0 <lwip_htons>
 80098d2:	4603      	mov	r3, r0
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	f003 0304 	and.w	r3, r3, #4
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d006      	beq.n	80098ec <tcp_output+0x188>
 80098de:	4b2f      	ldr	r3, [pc, #188]	; (800999c <tcp_output+0x238>)
 80098e0:	f240 5236 	movw	r2, #1334	; 0x536
 80098e4:	4932      	ldr	r1, [pc, #200]	; (80099b0 <tcp_output+0x24c>)
 80098e6:	482f      	ldr	r0, [pc, #188]	; (80099a4 <tcp_output+0x240>)
 80098e8:	f003 fcc6 	bl	800d278 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d01f      	beq.n	8009934 <tcp_output+0x1d0>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	8b5b      	ldrh	r3, [r3, #26]
 80098f8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d119      	bne.n	8009934 <tcp_output+0x1d0>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00b      	beq.n	8009920 <tcp_output+0x1bc>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d110      	bne.n	8009934 <tcp_output+0x1d0>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009916:	891a      	ldrh	r2, [r3, #8]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800991c:	429a      	cmp	r2, r3
 800991e:	d209      	bcs.n	8009934 <tcp_output+0x1d0>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009926:	2b00      	cmp	r3, #0
 8009928:	d004      	beq.n	8009934 <tcp_output+0x1d0>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009930:	2b08      	cmp	r3, #8
 8009932:	d901      	bls.n	8009938 <tcp_output+0x1d4>
 8009934:	2301      	movs	r3, #1
 8009936:	e000      	b.n	800993a <tcp_output+0x1d6>
 8009938:	2300      	movs	r3, #0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d106      	bne.n	800994c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	8b5b      	ldrh	r3, [r3, #26]
 8009942:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009946:	2b00      	cmp	r3, #0
 8009948:	f000 80e4 	beq.w	8009b14 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	7d1b      	ldrb	r3, [r3, #20]
 8009950:	2b02      	cmp	r3, #2
 8009952:	d00d      	beq.n	8009970 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	899b      	ldrh	r3, [r3, #12]
 800995a:	b29c      	uxth	r4, r3
 800995c:	2010      	movs	r0, #16
 800995e:	f7f9 ff2f 	bl	80037c0 <lwip_htons>
 8009962:	4603      	mov	r3, r0
 8009964:	461a      	mov	r2, r3
 8009966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	4322      	orrs	r2, r4
 800996c:	b292      	uxth	r2, r2
 800996e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8009970:	697a      	ldr	r2, [r7, #20]
 8009972:	6879      	ldr	r1, [r7, #4]
 8009974:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009976:	f000 f909 	bl	8009b8c <tcp_output_segment>
 800997a:	4603      	mov	r3, r0
 800997c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800997e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d016      	beq.n	80099b4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	8b5b      	ldrh	r3, [r3, #26]
 800998a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800998e:	b29a      	uxth	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	835a      	strh	r2, [r3, #26]
      return err;
 8009994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009998:	e0d3      	b.n	8009b42 <tcp_output+0x3de>
 800999a:	bf00      	nop
 800999c:	0800f9e4 	.word	0x0800f9e4
 80099a0:	0800ff28 	.word	0x0800ff28
 80099a4:	0800fa38 	.word	0x0800fa38
 80099a8:	0800ff40 	.word	0x0800ff40
 80099ac:	2000b450 	.word	0x2000b450
 80099b0:	0800ff68 	.word	0x0800ff68
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80099b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	7d1b      	ldrb	r3, [r3, #20]
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d006      	beq.n	80099d2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	8b5b      	ldrh	r3, [r3, #26]
 80099c8:	f023 0303 	bic.w	r3, r3, #3
 80099cc:	b29a      	uxth	r2, r3
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80099d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	4618      	mov	r0, r3
 80099da:	f7f9 ff06 	bl	80037ea <lwip_htonl>
 80099de:	4604      	mov	r4, r0
 80099e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e2:	891b      	ldrh	r3, [r3, #8]
 80099e4:	461d      	mov	r5, r3
 80099e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	899b      	ldrh	r3, [r3, #12]
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7f9 fee6 	bl	80037c0 <lwip_htons>
 80099f4:	4603      	mov	r3, r0
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	f003 0303 	and.w	r3, r3, #3
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d001      	beq.n	8009a04 <tcp_output+0x2a0>
 8009a00:	2301      	movs	r3, #1
 8009a02:	e000      	b.n	8009a06 <tcp_output+0x2a2>
 8009a04:	2300      	movs	r3, #0
 8009a06:	442b      	add	r3, r5
 8009a08:	4423      	add	r3, r4
 8009a0a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	1ad3      	subs	r3, r2, r3
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	da02      	bge.n	8009a1e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a20:	891b      	ldrh	r3, [r3, #8]
 8009a22:	461c      	mov	r4, r3
 8009a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	899b      	ldrh	r3, [r3, #12]
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7f9 fec7 	bl	80037c0 <lwip_htons>
 8009a32:	4603      	mov	r3, r0
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	f003 0303 	and.w	r3, r3, #3
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d001      	beq.n	8009a42 <tcp_output+0x2de>
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e000      	b.n	8009a44 <tcp_output+0x2e0>
 8009a42:	2300      	movs	r3, #0
 8009a44:	4423      	add	r3, r4
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d049      	beq.n	8009ade <tcp_output+0x37a>
      seg->next = NULL;
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d105      	bne.n	8009a64 <tcp_output+0x300>
        pcb->unacked = seg;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a5c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8009a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a60:	623b      	str	r3, [r7, #32]
 8009a62:	e03f      	b.n	8009ae4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7f9 febd 	bl	80037ea <lwip_htonl>
 8009a70:	4604      	mov	r4, r0
 8009a72:	6a3b      	ldr	r3, [r7, #32]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7f9 feb6 	bl	80037ea <lwip_htonl>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	1ae3      	subs	r3, r4, r3
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	da24      	bge.n	8009ad0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	3370      	adds	r3, #112	; 0x70
 8009a8a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009a8c:	e002      	b.n	8009a94 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d011      	beq.n	8009ac0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7f9 fea0 	bl	80037ea <lwip_htonl>
 8009aaa:	4604      	mov	r4, r0
 8009aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7f9 fe99 	bl	80037ea <lwip_htonl>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	dbe6      	blt.n	8009a8e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009acc:	601a      	str	r2, [r3, #0]
 8009ace:	e009      	b.n	8009ae4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8009ad0:	6a3b      	ldr	r3, [r7, #32]
 8009ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ad4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8009ad6:	6a3b      	ldr	r3, [r7, #32]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	623b      	str	r3, [r7, #32]
 8009adc:	e002      	b.n	8009ae4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8009ade:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ae0:	f7fc fc3f 	bl	8006362 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ae8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8009aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d012      	beq.n	8009b16 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8009af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7f9 fe77 	bl	80037ea <lwip_htonl>
 8009afc:	4602      	mov	r2, r0
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b02:	1ad3      	subs	r3, r2, r3
 8009b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b06:	8912      	ldrh	r2, [r2, #8]
 8009b08:	4413      	add	r3, r2
  while (seg != NULL &&
 8009b0a:	69ba      	ldr	r2, [r7, #24]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	f4bf aed9 	bcs.w	80098c4 <tcp_output+0x160>
 8009b12:	e000      	b.n	8009b16 <tcp_output+0x3b2>
      break;
 8009b14:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d108      	bne.n	8009b30 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8009b26:	e004      	b.n	8009b32 <tcp_output+0x3ce>
    goto output_done;
 8009b28:	bf00      	nop
 8009b2a:	e002      	b.n	8009b32 <tcp_output+0x3ce>
    goto output_done;
 8009b2c:	bf00      	nop
 8009b2e:	e000      	b.n	8009b32 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8009b30:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	8b5b      	ldrh	r3, [r3, #26]
 8009b36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3728      	adds	r7, #40	; 0x28
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bdb0      	pop	{r4, r5, r7, pc}
 8009b4a:	bf00      	nop

08009b4c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d106      	bne.n	8009b68 <tcp_output_segment_busy+0x1c>
 8009b5a:	4b09      	ldr	r3, [pc, #36]	; (8009b80 <tcp_output_segment_busy+0x34>)
 8009b5c:	f240 529a 	movw	r2, #1434	; 0x59a
 8009b60:	4908      	ldr	r1, [pc, #32]	; (8009b84 <tcp_output_segment_busy+0x38>)
 8009b62:	4809      	ldr	r0, [pc, #36]	; (8009b88 <tcp_output_segment_busy+0x3c>)
 8009b64:	f003 fb88 	bl	800d278 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	7b9b      	ldrb	r3, [r3, #14]
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d001      	beq.n	8009b76 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8009b72:	2301      	movs	r3, #1
 8009b74:	e000      	b.n	8009b78 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8009b76:	2300      	movs	r3, #0
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3708      	adds	r7, #8
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	0800f9e4 	.word	0x0800f9e4
 8009b84:	0800ff80 	.word	0x0800ff80
 8009b88:	0800fa38 	.word	0x0800fa38

08009b8c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8009b8c:	b5b0      	push	{r4, r5, r7, lr}
 8009b8e:	b08c      	sub	sp, #48	; 0x30
 8009b90:	af04      	add	r7, sp, #16
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d106      	bne.n	8009bac <tcp_output_segment+0x20>
 8009b9e:	4b63      	ldr	r3, [pc, #396]	; (8009d2c <tcp_output_segment+0x1a0>)
 8009ba0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8009ba4:	4962      	ldr	r1, [pc, #392]	; (8009d30 <tcp_output_segment+0x1a4>)
 8009ba6:	4863      	ldr	r0, [pc, #396]	; (8009d34 <tcp_output_segment+0x1a8>)
 8009ba8:	f003 fb66 	bl	800d278 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d106      	bne.n	8009bc0 <tcp_output_segment+0x34>
 8009bb2:	4b5e      	ldr	r3, [pc, #376]	; (8009d2c <tcp_output_segment+0x1a0>)
 8009bb4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8009bb8:	495f      	ldr	r1, [pc, #380]	; (8009d38 <tcp_output_segment+0x1ac>)
 8009bba:	485e      	ldr	r0, [pc, #376]	; (8009d34 <tcp_output_segment+0x1a8>)
 8009bbc:	f003 fb5c 	bl	800d278 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d106      	bne.n	8009bd4 <tcp_output_segment+0x48>
 8009bc6:	4b59      	ldr	r3, [pc, #356]	; (8009d2c <tcp_output_segment+0x1a0>)
 8009bc8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8009bcc:	495b      	ldr	r1, [pc, #364]	; (8009d3c <tcp_output_segment+0x1b0>)
 8009bce:	4859      	ldr	r0, [pc, #356]	; (8009d34 <tcp_output_segment+0x1a8>)
 8009bd0:	f003 fb52 	bl	800d278 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8009bd4:	68f8      	ldr	r0, [r7, #12]
 8009bd6:	f7ff ffb9 	bl	8009b4c <tcp_output_segment_busy>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d001      	beq.n	8009be4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8009be0:	2300      	movs	r3, #0
 8009be2:	e09f      	b.n	8009d24 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	68dc      	ldr	r4, [r3, #12]
 8009bec:	4610      	mov	r0, r2
 8009bee:	f7f9 fdfc 	bl	80037ea <lwip_htonl>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	68dc      	ldr	r4, [r3, #12]
 8009bfe:	4610      	mov	r0, r2
 8009c00:	f7f9 fdde 	bl	80037c0 <lwip_htons>
 8009c04:	4603      	mov	r3, r0
 8009c06:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c0c:	68ba      	ldr	r2, [r7, #8]
 8009c0e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8009c10:	441a      	add	r2, r3
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	3314      	adds	r3, #20
 8009c1c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	7a9b      	ldrb	r3, [r3, #10]
 8009c22:	f003 0301 	and.w	r3, r3, #1
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d015      	beq.n	8009c56 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	3304      	adds	r3, #4
 8009c2e:	461a      	mov	r2, r3
 8009c30:	6879      	ldr	r1, [r7, #4]
 8009c32:	f44f 7006 	mov.w	r0, #536	; 0x218
 8009c36:	f7fc fe8b 	bl	8006950 <tcp_eff_send_mss_netif>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8009c3e:	8b7b      	ldrh	r3, [r7, #26]
 8009c40:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7f9 fdd0 	bl	80037ea <lwip_htonl>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	3304      	adds	r3, #4
 8009c54:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	da02      	bge.n	8009c66 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	2200      	movs	r2, #0
 8009c64:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d10c      	bne.n	8009c88 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8009c6e:	4b34      	ldr	r3, [pc, #208]	; (8009d40 <tcp_output_segment+0x1b4>)
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7f9 fdb4 	bl	80037ea <lwip_htonl>
 8009c82:	4602      	mov	r2, r0
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	68da      	ldr	r2, [r3, #12]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	1ad3      	subs	r3, r2, r3
 8009c94:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	8959      	ldrh	r1, [r3, #10]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	8b3a      	ldrh	r2, [r7, #24]
 8009ca2:	1a8a      	subs	r2, r1, r2
 8009ca4:	b292      	uxth	r2, r2
 8009ca6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	8919      	ldrh	r1, [r3, #8]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	8b3a      	ldrh	r2, [r7, #24]
 8009cb4:	1a8a      	subs	r2, r1, r2
 8009cb6:	b292      	uxth	r2, r2
 8009cb8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	68fa      	ldr	r2, [r7, #12]
 8009cc0:	68d2      	ldr	r2, [r2, #12]
 8009cc2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	741a      	strb	r2, [r3, #16]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	f103 0214 	add.w	r2, r3, #20
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	7a9b      	ldrb	r3, [r3, #10]
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	f003 0304 	and.w	r3, r3, #4
 8009ce2:	4413      	add	r3, r2
 8009ce4:	69fa      	ldr	r2, [r7, #28]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d006      	beq.n	8009cf8 <tcp_output_segment+0x16c>
 8009cea:	4b10      	ldr	r3, [pc, #64]	; (8009d2c <tcp_output_segment+0x1a0>)
 8009cec:	f240 621c 	movw	r2, #1564	; 0x61c
 8009cf0:	4914      	ldr	r1, [pc, #80]	; (8009d44 <tcp_output_segment+0x1b8>)
 8009cf2:	4810      	ldr	r0, [pc, #64]	; (8009d34 <tcp_output_segment+0x1a8>)
 8009cf4:	f003 fac0 	bl	800d278 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6858      	ldr	r0, [r3, #4]
 8009cfc:	68b9      	ldr	r1, [r7, #8]
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	1d1c      	adds	r4, r3, #4
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	7add      	ldrb	r5, [r3, #11]
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	7a9b      	ldrb	r3, [r3, #10]
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	9202      	str	r2, [sp, #8]
 8009d0e:	2206      	movs	r2, #6
 8009d10:	9201      	str	r2, [sp, #4]
 8009d12:	9300      	str	r3, [sp, #0]
 8009d14:	462b      	mov	r3, r5
 8009d16:	4622      	mov	r2, r4
 8009d18:	f002 fa36 	bl	800c188 <ip4_output_if>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8009d20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3720      	adds	r7, #32
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bdb0      	pop	{r4, r5, r7, pc}
 8009d2c:	0800f9e4 	.word	0x0800f9e4
 8009d30:	0800ffa8 	.word	0x0800ffa8
 8009d34:	0800fa38 	.word	0x0800fa38
 8009d38:	0800ffc8 	.word	0x0800ffc8
 8009d3c:	0800ffe8 	.word	0x0800ffe8
 8009d40:	2000b404 	.word	0x2000b404
 8009d44:	0801000c 	.word	0x0801000c

08009d48 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8009d48:	b5b0      	push	{r4, r5, r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d106      	bne.n	8009d64 <tcp_rexmit_rto_prepare+0x1c>
 8009d56:	4b31      	ldr	r3, [pc, #196]	; (8009e1c <tcp_rexmit_rto_prepare+0xd4>)
 8009d58:	f240 6263 	movw	r2, #1635	; 0x663
 8009d5c:	4930      	ldr	r1, [pc, #192]	; (8009e20 <tcp_rexmit_rto_prepare+0xd8>)
 8009d5e:	4831      	ldr	r0, [pc, #196]	; (8009e24 <tcp_rexmit_rto_prepare+0xdc>)
 8009d60:	f003 fa8a 	bl	800d278 <iprintf>

  if (pcb->unacked == NULL) {
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d102      	bne.n	8009d72 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8009d6c:	f06f 0305 	mvn.w	r3, #5
 8009d70:	e050      	b.n	8009e14 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d76:	60fb      	str	r3, [r7, #12]
 8009d78:	e00b      	b.n	8009d92 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	f7ff fee6 	bl	8009b4c <tcp_output_segment_busy>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d002      	beq.n	8009d8c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8009d86:	f06f 0305 	mvn.w	r3, #5
 8009d8a:	e043      	b.n	8009e14 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	60fb      	str	r3, [r7, #12]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d1ef      	bne.n	8009d7a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f7ff fed6 	bl	8009b4c <tcp_output_segment_busy>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d002      	beq.n	8009dac <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8009da6:	f06f 0305 	mvn.w	r3, #5
 8009daa:	e033      	b.n	8009e14 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	8b5b      	ldrh	r3, [r3, #26]
 8009dc6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7f9 fd07 	bl	80037ea <lwip_htonl>
 8009ddc:	4604      	mov	r4, r0
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	891b      	ldrh	r3, [r3, #8]
 8009de2:	461d      	mov	r5, r3
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	899b      	ldrh	r3, [r3, #12]
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7f9 fce7 	bl	80037c0 <lwip_htons>
 8009df2:	4603      	mov	r3, r0
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	f003 0303 	and.w	r3, r3, #3
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d001      	beq.n	8009e02 <tcp_rexmit_rto_prepare+0xba>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e000      	b.n	8009e04 <tcp_rexmit_rto_prepare+0xbc>
 8009e02:	2300      	movs	r3, #0
 8009e04:	442b      	add	r3, r5
 8009e06:	18e2      	adds	r2, r4, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3710      	adds	r7, #16
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8009e1c:	0800f9e4 	.word	0x0800f9e4
 8009e20:	08010020 	.word	0x08010020
 8009e24:	0800fa38 	.word	0x0800fa38

08009e28 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d106      	bne.n	8009e44 <tcp_rexmit_rto_commit+0x1c>
 8009e36:	4b0d      	ldr	r3, [pc, #52]	; (8009e6c <tcp_rexmit_rto_commit+0x44>)
 8009e38:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009e3c:	490c      	ldr	r1, [pc, #48]	; (8009e70 <tcp_rexmit_rto_commit+0x48>)
 8009e3e:	480d      	ldr	r0, [pc, #52]	; (8009e74 <tcp_rexmit_rto_commit+0x4c>)
 8009e40:	f003 fa1a 	bl	800d278 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e4a:	2bff      	cmp	r3, #255	; 0xff
 8009e4c:	d007      	beq.n	8009e5e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e54:	3301      	adds	r3, #1
 8009e56:	b2da      	uxtb	r2, r3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f7ff fc80 	bl	8009764 <tcp_output>
}
 8009e64:	bf00      	nop
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}
 8009e6c:	0800f9e4 	.word	0x0800f9e4
 8009e70:	08010044 	.word	0x08010044
 8009e74:	0800fa38 	.word	0x0800fa38

08009e78 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d106      	bne.n	8009e94 <tcp_rexmit_rto+0x1c>
 8009e86:	4b0a      	ldr	r3, [pc, #40]	; (8009eb0 <tcp_rexmit_rto+0x38>)
 8009e88:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8009e8c:	4909      	ldr	r1, [pc, #36]	; (8009eb4 <tcp_rexmit_rto+0x3c>)
 8009e8e:	480a      	ldr	r0, [pc, #40]	; (8009eb8 <tcp_rexmit_rto+0x40>)
 8009e90:	f003 f9f2 	bl	800d278 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f7ff ff57 	bl	8009d48 <tcp_rexmit_rto_prepare>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d102      	bne.n	8009ea6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f7ff ffc1 	bl	8009e28 <tcp_rexmit_rto_commit>
  }
}
 8009ea6:	bf00      	nop
 8009ea8:	3708      	adds	r7, #8
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	0800f9e4 	.word	0x0800f9e4
 8009eb4:	08010068 	.word	0x08010068
 8009eb8:	0800fa38 	.word	0x0800fa38

08009ebc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8009ebc:	b590      	push	{r4, r7, lr}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d106      	bne.n	8009ed8 <tcp_rexmit+0x1c>
 8009eca:	4b2f      	ldr	r3, [pc, #188]	; (8009f88 <tcp_rexmit+0xcc>)
 8009ecc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8009ed0:	492e      	ldr	r1, [pc, #184]	; (8009f8c <tcp_rexmit+0xd0>)
 8009ed2:	482f      	ldr	r0, [pc, #188]	; (8009f90 <tcp_rexmit+0xd4>)
 8009ed4:	f003 f9d0 	bl	800d278 <iprintf>

  if (pcb->unacked == NULL) {
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d102      	bne.n	8009ee6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8009ee0:	f06f 0305 	mvn.w	r3, #5
 8009ee4:	e04c      	b.n	8009f80 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eea:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8009eec:	68b8      	ldr	r0, [r7, #8]
 8009eee:	f7ff fe2d 	bl	8009b4c <tcp_output_segment_busy>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d002      	beq.n	8009efe <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8009ef8:	f06f 0305 	mvn.w	r3, #5
 8009efc:	e040      	b.n	8009f80 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	336c      	adds	r3, #108	; 0x6c
 8009f0a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009f0c:	e002      	b.n	8009f14 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d011      	beq.n	8009f40 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7f9 fc60 	bl	80037ea <lwip_htonl>
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7f9 fc59 	bl	80037ea <lwip_htonl>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	dbe6      	blt.n	8009f0e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	68ba      	ldr	r2, [r7, #8]
 8009f4c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d103      	bne.n	8009f5e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009f64:	2bff      	cmp	r3, #255	; 0xff
 8009f66:	d007      	beq.n	8009f78 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009f6e:	3301      	adds	r3, #1
 8009f70:	b2da      	uxtb	r2, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8009f7e:	2300      	movs	r3, #0
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3714      	adds	r7, #20
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd90      	pop	{r4, r7, pc}
 8009f88:	0800f9e4 	.word	0x0800f9e4
 8009f8c:	08010084 	.word	0x08010084
 8009f90:	0800fa38 	.word	0x0800fa38

08009f94 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d106      	bne.n	8009fb0 <tcp_rexmit_fast+0x1c>
 8009fa2:	4b2a      	ldr	r3, [pc, #168]	; (800a04c <tcp_rexmit_fast+0xb8>)
 8009fa4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8009fa8:	4929      	ldr	r1, [pc, #164]	; (800a050 <tcp_rexmit_fast+0xbc>)
 8009faa:	482a      	ldr	r0, [pc, #168]	; (800a054 <tcp_rexmit_fast+0xc0>)
 8009fac:	f003 f964 	bl	800d278 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d045      	beq.n	800a044 <tcp_rexmit_fast+0xb0>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	8b5b      	ldrh	r3, [r3, #26]
 8009fbc:	f003 0304 	and.w	r3, r3, #4
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d13f      	bne.n	800a044 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f7ff ff79 	bl	8009ebc <tcp_rexmit>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d139      	bne.n	800a044 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	bf28      	it	cs
 8009fe0:	4613      	movcs	r3, r2
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	da00      	bge.n	8009fea <tcp_rexmit_fast+0x56>
 8009fe8:	3301      	adds	r3, #1
 8009fea:	105b      	asrs	r3, r3, #1
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a000:	005b      	lsls	r3, r3, #1
 800a002:	429a      	cmp	r2, r3
 800a004:	d206      	bcs.n	800a014 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a00a:	005b      	lsls	r3, r3, #1
 800a00c:	b29a      	uxth	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a01e:	4619      	mov	r1, r3
 800a020:	0049      	lsls	r1, r1, #1
 800a022:	440b      	add	r3, r1
 800a024:	b29b      	uxth	r3, r3
 800a026:	4413      	add	r3, r2
 800a028:	b29a      	uxth	r2, r3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	8b5b      	ldrh	r3, [r3, #26]
 800a034:	f043 0304 	orr.w	r3, r3, #4
 800a038:	b29a      	uxth	r2, r3
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800a044:	bf00      	nop
 800a046:	3708      	adds	r7, #8
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	0800f9e4 	.word	0x0800f9e4
 800a050:	0801009c 	.word	0x0801009c
 800a054:	0800fa38 	.word	0x0800fa38

0800a058 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b086      	sub	sp, #24
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	607b      	str	r3, [r7, #4]
 800a062:	460b      	mov	r3, r1
 800a064:	817b      	strh	r3, [r7, #10]
 800a066:	4613      	mov	r3, r2
 800a068:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a06a:	897a      	ldrh	r2, [r7, #10]
 800a06c:	893b      	ldrh	r3, [r7, #8]
 800a06e:	4413      	add	r3, r2
 800a070:	b29b      	uxth	r3, r3
 800a072:	3314      	adds	r3, #20
 800a074:	b29b      	uxth	r3, r3
 800a076:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a07a:	4619      	mov	r1, r3
 800a07c:	2022      	movs	r0, #34	; 0x22
 800a07e:	f7fa fc19 	bl	80048b4 <pbuf_alloc>
 800a082:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d04d      	beq.n	800a126 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a08a:	897b      	ldrh	r3, [r7, #10]
 800a08c:	3313      	adds	r3, #19
 800a08e:	697a      	ldr	r2, [r7, #20]
 800a090:	8952      	ldrh	r2, [r2, #10]
 800a092:	4293      	cmp	r3, r2
 800a094:	db06      	blt.n	800a0a4 <tcp_output_alloc_header_common+0x4c>
 800a096:	4b26      	ldr	r3, [pc, #152]	; (800a130 <tcp_output_alloc_header_common+0xd8>)
 800a098:	f240 7223 	movw	r2, #1827	; 0x723
 800a09c:	4925      	ldr	r1, [pc, #148]	; (800a134 <tcp_output_alloc_header_common+0xdc>)
 800a09e:	4826      	ldr	r0, [pc, #152]	; (800a138 <tcp_output_alloc_header_common+0xe0>)
 800a0a0:	f003 f8ea 	bl	800d278 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800a0aa:	8c3b      	ldrh	r3, [r7, #32]
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7f9 fb87 	bl	80037c0 <lwip_htons>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800a0ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7f9 fb7f 	bl	80037c0 <lwip_htons>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	f7f9 fb8a 	bl	80037ea <lwip_htonl>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800a0dc:	897b      	ldrh	r3, [r7, #10]
 800a0de:	089b      	lsrs	r3, r3, #2
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	3305      	adds	r3, #5
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	031b      	lsls	r3, r3, #12
 800a0e8:	b29a      	uxth	r2, r3
 800a0ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7f9 fb63 	bl	80037c0 <lwip_htons>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800a102:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a104:	4618      	mov	r0, r3
 800a106:	f7f9 fb5b 	bl	80037c0 <lwip_htons>
 800a10a:	4603      	mov	r3, r0
 800a10c:	461a      	mov	r2, r3
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	2200      	movs	r2, #0
 800a116:	741a      	strb	r2, [r3, #16]
 800a118:	2200      	movs	r2, #0
 800a11a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	2200      	movs	r2, #0
 800a120:	749a      	strb	r2, [r3, #18]
 800a122:	2200      	movs	r2, #0
 800a124:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800a126:	697b      	ldr	r3, [r7, #20]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3718      	adds	r7, #24
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	0800f9e4 	.word	0x0800f9e4
 800a134:	080100bc 	.word	0x080100bc
 800a138:	0800fa38 	.word	0x0800fa38

0800a13c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800a13c:	b5b0      	push	{r4, r5, r7, lr}
 800a13e:	b08a      	sub	sp, #40	; 0x28
 800a140:	af04      	add	r7, sp, #16
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	607b      	str	r3, [r7, #4]
 800a146:	460b      	mov	r3, r1
 800a148:	817b      	strh	r3, [r7, #10]
 800a14a:	4613      	mov	r3, r2
 800a14c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d106      	bne.n	800a162 <tcp_output_alloc_header+0x26>
 800a154:	4b15      	ldr	r3, [pc, #84]	; (800a1ac <tcp_output_alloc_header+0x70>)
 800a156:	f240 7242 	movw	r2, #1858	; 0x742
 800a15a:	4915      	ldr	r1, [pc, #84]	; (800a1b0 <tcp_output_alloc_header+0x74>)
 800a15c:	4815      	ldr	r0, [pc, #84]	; (800a1b4 <tcp_output_alloc_header+0x78>)
 800a15e:	f003 f88b 	bl	800d278 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	8adb      	ldrh	r3, [r3, #22]
 800a16a:	68fa      	ldr	r2, [r7, #12]
 800a16c:	8b12      	ldrh	r2, [r2, #24]
 800a16e:	68f9      	ldr	r1, [r7, #12]
 800a170:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800a172:	893d      	ldrh	r5, [r7, #8]
 800a174:	897c      	ldrh	r4, [r7, #10]
 800a176:	9103      	str	r1, [sp, #12]
 800a178:	2110      	movs	r1, #16
 800a17a:	9102      	str	r1, [sp, #8]
 800a17c:	9201      	str	r2, [sp, #4]
 800a17e:	9300      	str	r3, [sp, #0]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	462a      	mov	r2, r5
 800a184:	4621      	mov	r1, r4
 800a186:	f7ff ff67 	bl	800a058 <tcp_output_alloc_header_common>
 800a18a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d006      	beq.n	800a1a0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a19a:	441a      	add	r2, r3
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800a1a0:	697b      	ldr	r3, [r7, #20]
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3718      	adds	r7, #24
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bdb0      	pop	{r4, r5, r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	0800f9e4 	.word	0x0800f9e4
 800a1b0:	080100ec 	.word	0x080100ec
 800a1b4:	0800fa38 	.word	0x0800fa38

0800a1b8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b088      	sub	sp, #32
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	4611      	mov	r1, r2
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	71fb      	strb	r3, [r7, #7]
 800a1ca:	4613      	mov	r3, r2
 800a1cc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d106      	bne.n	800a1e6 <tcp_output_fill_options+0x2e>
 800a1d8:	4b13      	ldr	r3, [pc, #76]	; (800a228 <tcp_output_fill_options+0x70>)
 800a1da:	f240 7256 	movw	r2, #1878	; 0x756
 800a1de:	4913      	ldr	r1, [pc, #76]	; (800a22c <tcp_output_fill_options+0x74>)
 800a1e0:	4813      	ldr	r0, [pc, #76]	; (800a230 <tcp_output_fill_options+0x78>)
 800a1e2:	f003 f849 	bl	800d278 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	3314      	adds	r3, #20
 800a1f0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	f103 0214 	add.w	r2, r3, #20
 800a1f8:	8bfb      	ldrh	r3, [r7, #30]
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	79fb      	ldrb	r3, [r7, #7]
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	f003 0304 	and.w	r3, r3, #4
 800a206:	440b      	add	r3, r1
 800a208:	4413      	add	r3, r2
 800a20a:	697a      	ldr	r2, [r7, #20]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d006      	beq.n	800a21e <tcp_output_fill_options+0x66>
 800a210:	4b05      	ldr	r3, [pc, #20]	; (800a228 <tcp_output_fill_options+0x70>)
 800a212:	f240 7275 	movw	r2, #1909	; 0x775
 800a216:	4907      	ldr	r1, [pc, #28]	; (800a234 <tcp_output_fill_options+0x7c>)
 800a218:	4805      	ldr	r0, [pc, #20]	; (800a230 <tcp_output_fill_options+0x78>)
 800a21a:	f003 f82d 	bl	800d278 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800a21e:	bf00      	nop
 800a220:	3720      	adds	r7, #32
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	0800f9e4 	.word	0x0800f9e4
 800a22c:	08010114 	.word	0x08010114
 800a230:	0800fa38 	.word	0x0800fa38
 800a234:	0801000c 	.word	0x0801000c

0800a238 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b08a      	sub	sp, #40	; 0x28
 800a23c:	af04      	add	r7, sp, #16
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]
 800a244:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d106      	bne.n	800a25a <tcp_output_control_segment+0x22>
 800a24c:	4b1c      	ldr	r3, [pc, #112]	; (800a2c0 <tcp_output_control_segment+0x88>)
 800a24e:	f240 7287 	movw	r2, #1927	; 0x787
 800a252:	491c      	ldr	r1, [pc, #112]	; (800a2c4 <tcp_output_control_segment+0x8c>)
 800a254:	481c      	ldr	r0, [pc, #112]	; (800a2c8 <tcp_output_control_segment+0x90>)
 800a256:	f003 f80f 	bl	800d278 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800a25a:	683a      	ldr	r2, [r7, #0]
 800a25c:	6879      	ldr	r1, [r7, #4]
 800a25e:	68f8      	ldr	r0, [r7, #12]
 800a260:	f7fe ff40 	bl	80090e4 <tcp_route>
 800a264:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d102      	bne.n	800a272 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800a26c:	23fc      	movs	r3, #252	; 0xfc
 800a26e:	75fb      	strb	r3, [r7, #23]
 800a270:	e01c      	b.n	800a2ac <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d006      	beq.n	800a286 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	7adb      	ldrb	r3, [r3, #11]
 800a27c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	7a9b      	ldrb	r3, [r3, #10]
 800a282:	757b      	strb	r3, [r7, #21]
 800a284:	e003      	b.n	800a28e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800a286:	23ff      	movs	r3, #255	; 0xff
 800a288:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800a28a:	2300      	movs	r3, #0
 800a28c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800a28e:	7dba      	ldrb	r2, [r7, #22]
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	9302      	str	r3, [sp, #8]
 800a294:	2306      	movs	r3, #6
 800a296:	9301      	str	r3, [sp, #4]
 800a298:	7d7b      	ldrb	r3, [r7, #21]
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	4613      	mov	r3, r2
 800a29e:	683a      	ldr	r2, [r7, #0]
 800a2a0:	6879      	ldr	r1, [r7, #4]
 800a2a2:	68b8      	ldr	r0, [r7, #8]
 800a2a4:	f001 ff70 	bl	800c188 <ip4_output_if>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800a2ac:	68b8      	ldr	r0, [r7, #8]
 800a2ae:	f7fa fde5 	bl	8004e7c <pbuf_free>
  return err;
 800a2b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3718      	adds	r7, #24
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	0800f9e4 	.word	0x0800f9e4
 800a2c4:	0801013c 	.word	0x0801013c
 800a2c8:	0800fa38 	.word	0x0800fa38

0800a2cc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800a2cc:	b590      	push	{r4, r7, lr}
 800a2ce:	b08b      	sub	sp, #44	; 0x2c
 800a2d0:	af04      	add	r7, sp, #16
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
 800a2d8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d106      	bne.n	800a2ee <tcp_rst+0x22>
 800a2e0:	4b1f      	ldr	r3, [pc, #124]	; (800a360 <tcp_rst+0x94>)
 800a2e2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800a2e6:	491f      	ldr	r1, [pc, #124]	; (800a364 <tcp_rst+0x98>)
 800a2e8:	481f      	ldr	r0, [pc, #124]	; (800a368 <tcp_rst+0x9c>)
 800a2ea:	f002 ffc5 	bl	800d278 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800a2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d106      	bne.n	800a302 <tcp_rst+0x36>
 800a2f4:	4b1a      	ldr	r3, [pc, #104]	; (800a360 <tcp_rst+0x94>)
 800a2f6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800a2fa:	491c      	ldr	r1, [pc, #112]	; (800a36c <tcp_rst+0xa0>)
 800a2fc:	481a      	ldr	r0, [pc, #104]	; (800a368 <tcp_rst+0x9c>)
 800a2fe:	f002 ffbb 	bl	800d278 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a302:	2300      	movs	r3, #0
 800a304:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800a306:	f246 0308 	movw	r3, #24584	; 0x6008
 800a30a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800a30c:	7dfb      	ldrb	r3, [r7, #23]
 800a30e:	b29c      	uxth	r4, r3
 800a310:	68b8      	ldr	r0, [r7, #8]
 800a312:	f7f9 fa6a 	bl	80037ea <lwip_htonl>
 800a316:	4602      	mov	r2, r0
 800a318:	8abb      	ldrh	r3, [r7, #20]
 800a31a:	9303      	str	r3, [sp, #12]
 800a31c:	2314      	movs	r3, #20
 800a31e:	9302      	str	r3, [sp, #8]
 800a320:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a322:	9301      	str	r3, [sp, #4]
 800a324:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a326:	9300      	str	r3, [sp, #0]
 800a328:	4613      	mov	r3, r2
 800a32a:	2200      	movs	r2, #0
 800a32c:	4621      	mov	r1, r4
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f7ff fe92 	bl	800a058 <tcp_output_alloc_header_common>
 800a334:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d00c      	beq.n	800a356 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a33c:	7dfb      	ldrb	r3, [r7, #23]
 800a33e:	2200      	movs	r2, #0
 800a340:	6939      	ldr	r1, [r7, #16]
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f7ff ff38 	bl	800a1b8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800a348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34a:	683a      	ldr	r2, [r7, #0]
 800a34c:	6939      	ldr	r1, [r7, #16]
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f7ff ff72 	bl	800a238 <tcp_output_control_segment>
 800a354:	e000      	b.n	800a358 <tcp_rst+0x8c>
    return;
 800a356:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a358:	371c      	adds	r7, #28
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd90      	pop	{r4, r7, pc}
 800a35e:	bf00      	nop
 800a360:	0800f9e4 	.word	0x0800f9e4
 800a364:	08010168 	.word	0x08010168
 800a368:	0800fa38 	.word	0x0800fa38
 800a36c:	08010184 	.word	0x08010184

0800a370 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a370:	b590      	push	{r4, r7, lr}
 800a372:	b087      	sub	sp, #28
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800a378:	2300      	movs	r3, #0
 800a37a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800a37c:	2300      	movs	r3, #0
 800a37e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d106      	bne.n	800a394 <tcp_send_empty_ack+0x24>
 800a386:	4b28      	ldr	r3, [pc, #160]	; (800a428 <tcp_send_empty_ack+0xb8>)
 800a388:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800a38c:	4927      	ldr	r1, [pc, #156]	; (800a42c <tcp_send_empty_ack+0xbc>)
 800a38e:	4828      	ldr	r0, [pc, #160]	; (800a430 <tcp_send_empty_ack+0xc0>)
 800a390:	f002 ff72 	bl	800d278 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a394:	7dfb      	ldrb	r3, [r7, #23]
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	f003 0304 	and.w	r3, r3, #4
 800a39e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a3a0:	7d7b      	ldrb	r3, [r7, #21]
 800a3a2:	b29c      	uxth	r4, r3
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7f9 fa1e 	bl	80037ea <lwip_htonl>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	4621      	mov	r1, r4
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f7ff fec1 	bl	800a13c <tcp_output_alloc_header>
 800a3ba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d109      	bne.n	800a3d6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	8b5b      	ldrh	r3, [r3, #26]
 800a3c6:	f043 0303 	orr.w	r3, r3, #3
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a3d0:	f06f 0301 	mvn.w	r3, #1
 800a3d4:	e023      	b.n	800a41e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800a3d6:	7dbb      	ldrb	r3, [r7, #22]
 800a3d8:	7dfa      	ldrb	r2, [r7, #23]
 800a3da:	6939      	ldr	r1, [r7, #16]
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f7ff feeb 	bl	800a1b8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	3304      	adds	r3, #4
 800a3e8:	6939      	ldr	r1, [r7, #16]
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f7ff ff24 	bl	800a238 <tcp_output_control_segment>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a3f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d007      	beq.n	800a40c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	8b5b      	ldrh	r3, [r3, #26]
 800a400:	f043 0303 	orr.w	r3, r3, #3
 800a404:	b29a      	uxth	r2, r3
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	835a      	strh	r2, [r3, #26]
 800a40a:	e006      	b.n	800a41a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	8b5b      	ldrh	r3, [r3, #26]
 800a410:	f023 0303 	bic.w	r3, r3, #3
 800a414:	b29a      	uxth	r2, r3
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800a41a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a41e:	4618      	mov	r0, r3
 800a420:	371c      	adds	r7, #28
 800a422:	46bd      	mov	sp, r7
 800a424:	bd90      	pop	{r4, r7, pc}
 800a426:	bf00      	nop
 800a428:	0800f9e4 	.word	0x0800f9e4
 800a42c:	080101a0 	.word	0x080101a0
 800a430:	0800fa38 	.word	0x0800fa38

0800a434 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a434:	b590      	push	{r4, r7, lr}
 800a436:	b087      	sub	sp, #28
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a43c:	2300      	movs	r3, #0
 800a43e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d106      	bne.n	800a454 <tcp_keepalive+0x20>
 800a446:	4b18      	ldr	r3, [pc, #96]	; (800a4a8 <tcp_keepalive+0x74>)
 800a448:	f640 0224 	movw	r2, #2084	; 0x824
 800a44c:	4917      	ldr	r1, [pc, #92]	; (800a4ac <tcp_keepalive+0x78>)
 800a44e:	4818      	ldr	r0, [pc, #96]	; (800a4b0 <tcp_keepalive+0x7c>)
 800a450:	f002 ff12 	bl	800d278 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a454:	7dfb      	ldrb	r3, [r7, #23]
 800a456:	b29c      	uxth	r4, r3
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a45c:	3b01      	subs	r3, #1
 800a45e:	4618      	mov	r0, r3
 800a460:	f7f9 f9c3 	bl	80037ea <lwip_htonl>
 800a464:	4603      	mov	r3, r0
 800a466:	2200      	movs	r2, #0
 800a468:	4621      	mov	r1, r4
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f7ff fe66 	bl	800a13c <tcp_output_alloc_header>
 800a470:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d102      	bne.n	800a47e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800a478:	f04f 33ff 	mov.w	r3, #4294967295
 800a47c:	e010      	b.n	800a4a0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a47e:	7dfb      	ldrb	r3, [r7, #23]
 800a480:	2200      	movs	r2, #0
 800a482:	6939      	ldr	r1, [r7, #16]
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f7ff fe97 	bl	800a1b8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	3304      	adds	r3, #4
 800a490:	6939      	ldr	r1, [r7, #16]
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f7ff fed0 	bl	800a238 <tcp_output_control_segment>
 800a498:	4603      	mov	r3, r0
 800a49a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a49c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	371c      	adds	r7, #28
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd90      	pop	{r4, r7, pc}
 800a4a8:	0800f9e4 	.word	0x0800f9e4
 800a4ac:	080101c0 	.word	0x080101c0
 800a4b0:	0800fa38 	.word	0x0800fa38

0800a4b4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a4b4:	b590      	push	{r4, r7, lr}
 800a4b6:	b08b      	sub	sp, #44	; 0x2c
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a4bc:	2300      	movs	r3, #0
 800a4be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d106      	bne.n	800a4d6 <tcp_zero_window_probe+0x22>
 800a4c8:	4b4c      	ldr	r3, [pc, #304]	; (800a5fc <tcp_zero_window_probe+0x148>)
 800a4ca:	f640 024f 	movw	r2, #2127	; 0x84f
 800a4ce:	494c      	ldr	r1, [pc, #304]	; (800a600 <tcp_zero_window_probe+0x14c>)
 800a4d0:	484c      	ldr	r0, [pc, #304]	; (800a604 <tcp_zero_window_probe+0x150>)
 800a4d2:	f002 fed1 	bl	800d278 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4da:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800a4dc:	6a3b      	ldr	r3, [r7, #32]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d101      	bne.n	800a4e6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	e086      	b.n	800a5f4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a4ec:	2bff      	cmp	r3, #255	; 0xff
 800a4ee:	d007      	beq.n	800a500 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	b2da      	uxtb	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a500:	6a3b      	ldr	r3, [r7, #32]
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	899b      	ldrh	r3, [r3, #12]
 800a506:	b29b      	uxth	r3, r3
 800a508:	4618      	mov	r0, r3
 800a50a:	f7f9 f959 	bl	80037c0 <lwip_htons>
 800a50e:	4603      	mov	r3, r0
 800a510:	b2db      	uxtb	r3, r3
 800a512:	f003 0301 	and.w	r3, r3, #1
 800a516:	2b00      	cmp	r3, #0
 800a518:	d005      	beq.n	800a526 <tcp_zero_window_probe+0x72>
 800a51a:	6a3b      	ldr	r3, [r7, #32]
 800a51c:	891b      	ldrh	r3, [r3, #8]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d101      	bne.n	800a526 <tcp_zero_window_probe+0x72>
 800a522:	2301      	movs	r3, #1
 800a524:	e000      	b.n	800a528 <tcp_zero_window_probe+0x74>
 800a526:	2300      	movs	r3, #0
 800a528:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800a52a:	7ffb      	ldrb	r3, [r7, #31]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	bf0c      	ite	eq
 800a530:	2301      	moveq	r3, #1
 800a532:	2300      	movne	r3, #0
 800a534:	b2db      	uxtb	r3, r3
 800a536:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800a538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a53c:	b299      	uxth	r1, r3
 800a53e:	6a3b      	ldr	r3, [r7, #32]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	8bba      	ldrh	r2, [r7, #28]
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f7ff fdf8 	bl	800a13c <tcp_output_alloc_header>
 800a54c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800a54e:	69bb      	ldr	r3, [r7, #24]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d102      	bne.n	800a55a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800a554:	f04f 33ff 	mov.w	r3, #4294967295
 800a558:	e04c      	b.n	800a5f4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800a560:	7ffb      	ldrb	r3, [r7, #31]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d011      	beq.n	800a58a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	899b      	ldrh	r3, [r3, #12]
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	b21b      	sxth	r3, r3
 800a56e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a572:	b21c      	sxth	r4, r3
 800a574:	2011      	movs	r0, #17
 800a576:	f7f9 f923 	bl	80037c0 <lwip_htons>
 800a57a:	4603      	mov	r3, r0
 800a57c:	b21b      	sxth	r3, r3
 800a57e:	4323      	orrs	r3, r4
 800a580:	b21b      	sxth	r3, r3
 800a582:	b29a      	uxth	r2, r3
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	819a      	strh	r2, [r3, #12]
 800a588:	e010      	b.n	800a5ac <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	3314      	adds	r3, #20
 800a590:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a592:	6a3b      	ldr	r3, [r7, #32]
 800a594:	6858      	ldr	r0, [r3, #4]
 800a596:	6a3b      	ldr	r3, [r7, #32]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	891a      	ldrh	r2, [r3, #8]
 800a59c:	6a3b      	ldr	r3, [r7, #32]
 800a59e:	891b      	ldrh	r3, [r3, #8]
 800a5a0:	1ad3      	subs	r3, r2, r3
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	6939      	ldr	r1, [r7, #16]
 800a5a8:	f7fa fe52 	bl	8005250 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a5ac:	6a3b      	ldr	r3, [r7, #32]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7f9 f919 	bl	80037ea <lwip_htonl>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	1ad3      	subs	r3, r2, r3
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	da02      	bge.n	800a5d0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a5d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	69b9      	ldr	r1, [r7, #24]
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f7ff fded 	bl	800a1b8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	3304      	adds	r3, #4
 800a5e4:	69b9      	ldr	r1, [r7, #24]
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f7ff fe26 	bl	800a238 <tcp_output_control_segment>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a5f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	372c      	adds	r7, #44	; 0x2c
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd90      	pop	{r4, r7, pc}
 800a5fc:	0800f9e4 	.word	0x0800f9e4
 800a600:	080101dc 	.word	0x080101dc
 800a604:	0800fa38 	.word	0x0800fa38

0800a608 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800a610:	f7fa ff0c 	bl	800542c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a614:	4b0a      	ldr	r3, [pc, #40]	; (800a640 <tcpip_tcp_timer+0x38>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d103      	bne.n	800a624 <tcpip_tcp_timer+0x1c>
 800a61c:	4b09      	ldr	r3, [pc, #36]	; (800a644 <tcpip_tcp_timer+0x3c>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d005      	beq.n	800a630 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a624:	2200      	movs	r2, #0
 800a626:	4908      	ldr	r1, [pc, #32]	; (800a648 <tcpip_tcp_timer+0x40>)
 800a628:	20fa      	movs	r0, #250	; 0xfa
 800a62a:	f000 f8f3 	bl	800a814 <sys_timeout>
 800a62e:	e003      	b.n	800a638 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800a630:	4b06      	ldr	r3, [pc, #24]	; (800a64c <tcpip_tcp_timer+0x44>)
 800a632:	2200      	movs	r2, #0
 800a634:	601a      	str	r2, [r3, #0]
  }
}
 800a636:	bf00      	nop
 800a638:	bf00      	nop
 800a63a:	3708      	adds	r7, #8
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	2000b410 	.word	0x2000b410
 800a644:	2000b414 	.word	0x2000b414
 800a648:	0800a609 	.word	0x0800a609
 800a64c:	2000b45c 	.word	0x2000b45c

0800a650 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a654:	4b0a      	ldr	r3, [pc, #40]	; (800a680 <tcp_timer_needed+0x30>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d10f      	bne.n	800a67c <tcp_timer_needed+0x2c>
 800a65c:	4b09      	ldr	r3, [pc, #36]	; (800a684 <tcp_timer_needed+0x34>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d103      	bne.n	800a66c <tcp_timer_needed+0x1c>
 800a664:	4b08      	ldr	r3, [pc, #32]	; (800a688 <tcp_timer_needed+0x38>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d007      	beq.n	800a67c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800a66c:	4b04      	ldr	r3, [pc, #16]	; (800a680 <tcp_timer_needed+0x30>)
 800a66e:	2201      	movs	r2, #1
 800a670:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a672:	2200      	movs	r2, #0
 800a674:	4905      	ldr	r1, [pc, #20]	; (800a68c <tcp_timer_needed+0x3c>)
 800a676:	20fa      	movs	r0, #250	; 0xfa
 800a678:	f000 f8cc 	bl	800a814 <sys_timeout>
  }
}
 800a67c:	bf00      	nop
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	2000b45c 	.word	0x2000b45c
 800a684:	2000b410 	.word	0x2000b410
 800a688:	2000b414 	.word	0x2000b414
 800a68c:	0800a609 	.word	0x0800a609

0800a690 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b086      	sub	sp, #24
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a69c:	2006      	movs	r0, #6
 800a69e:	f7f9 fd07 	bl	80040b0 <memp_malloc>
 800a6a2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d109      	bne.n	800a6be <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d151      	bne.n	800a754 <sys_timeout_abs+0xc4>
 800a6b0:	4b2a      	ldr	r3, [pc, #168]	; (800a75c <sys_timeout_abs+0xcc>)
 800a6b2:	22be      	movs	r2, #190	; 0xbe
 800a6b4:	492a      	ldr	r1, [pc, #168]	; (800a760 <sys_timeout_abs+0xd0>)
 800a6b6:	482b      	ldr	r0, [pc, #172]	; (800a764 <sys_timeout_abs+0xd4>)
 800a6b8:	f002 fdde 	bl	800d278 <iprintf>
    return;
 800a6bc:	e04a      	b.n	800a754 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	68ba      	ldr	r2, [r7, #8]
 800a6c8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	68fa      	ldr	r2, [r7, #12]
 800a6d4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800a6d6:	4b24      	ldr	r3, [pc, #144]	; (800a768 <sys_timeout_abs+0xd8>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d103      	bne.n	800a6e6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800a6de:	4a22      	ldr	r2, [pc, #136]	; (800a768 <sys_timeout_abs+0xd8>)
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	6013      	str	r3, [r2, #0]
    return;
 800a6e4:	e037      	b.n	800a756 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	685a      	ldr	r2, [r3, #4]
 800a6ea:	4b1f      	ldr	r3, [pc, #124]	; (800a768 <sys_timeout_abs+0xd8>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	1ad3      	subs	r3, r2, r3
 800a6f2:	0fdb      	lsrs	r3, r3, #31
 800a6f4:	f003 0301 	and.w	r3, r3, #1
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d007      	beq.n	800a70e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800a6fe:	4b1a      	ldr	r3, [pc, #104]	; (800a768 <sys_timeout_abs+0xd8>)
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800a706:	4a18      	ldr	r2, [pc, #96]	; (800a768 <sys_timeout_abs+0xd8>)
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	6013      	str	r3, [r2, #0]
 800a70c:	e023      	b.n	800a756 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800a70e:	4b16      	ldr	r3, [pc, #88]	; (800a768 <sys_timeout_abs+0xd8>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	617b      	str	r3, [r7, #20]
 800a714:	e01a      	b.n	800a74c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00b      	beq.n	800a736 <sys_timeout_abs+0xa6>
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	685a      	ldr	r2, [r3, #4]
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	1ad3      	subs	r3, r2, r3
 800a72a:	0fdb      	lsrs	r3, r3, #31
 800a72c:	f003 0301 	and.w	r3, r3, #1
 800a730:	b2db      	uxtb	r3, r3
 800a732:	2b00      	cmp	r3, #0
 800a734:	d007      	beq.n	800a746 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	601a      	str	r2, [r3, #0]
        break;
 800a744:	e007      	b.n	800a756 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	617b      	str	r3, [r7, #20]
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d1e1      	bne.n	800a716 <sys_timeout_abs+0x86>
 800a752:	e000      	b.n	800a756 <sys_timeout_abs+0xc6>
    return;
 800a754:	bf00      	nop
      }
    }
  }
}
 800a756:	3718      	adds	r7, #24
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	08010200 	.word	0x08010200
 800a760:	08010234 	.word	0x08010234
 800a764:	08010274 	.word	0x08010274
 800a768:	2000b454 	.word	0x2000b454

0800a76c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b086      	sub	sp, #24
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	4798      	blx	r3

  now = sys_now();
 800a77e:	f7f8 fe13 	bl	80033a8 <sys_now>
 800a782:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	4b0f      	ldr	r3, [pc, #60]	; (800a7c8 <lwip_cyclic_timer+0x5c>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4413      	add	r3, r2
 800a78e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	1ad3      	subs	r3, r2, r3
 800a796:	0fdb      	lsrs	r3, r3, #31
 800a798:	f003 0301 	and.w	r3, r3, #1
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d009      	beq.n	800a7b6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	4907      	ldr	r1, [pc, #28]	; (800a7cc <lwip_cyclic_timer+0x60>)
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7ff ff6e 	bl	800a690 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800a7b4:	e004      	b.n	800a7c0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	4904      	ldr	r1, [pc, #16]	; (800a7cc <lwip_cyclic_timer+0x60>)
 800a7ba:	68f8      	ldr	r0, [r7, #12]
 800a7bc:	f7ff ff68 	bl	800a690 <sys_timeout_abs>
}
 800a7c0:	bf00      	nop
 800a7c2:	3718      	adds	r7, #24
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	2000b458 	.word	0x2000b458
 800a7cc:	0800a76d 	.word	0x0800a76d

0800a7d0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	607b      	str	r3, [r7, #4]
 800a7da:	e00e      	b.n	800a7fa <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800a7dc:	4a0b      	ldr	r2, [pc, #44]	; (800a80c <sys_timeouts_init+0x3c>)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	00db      	lsls	r3, r3, #3
 800a7e8:	4a08      	ldr	r2, [pc, #32]	; (800a80c <sys_timeouts_init+0x3c>)
 800a7ea:	4413      	add	r3, r2
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	4908      	ldr	r1, [pc, #32]	; (800a810 <sys_timeouts_init+0x40>)
 800a7f0:	f000 f810 	bl	800a814 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	607b      	str	r3, [r7, #4]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2b02      	cmp	r3, #2
 800a7fe:	d9ed      	bls.n	800a7dc <sys_timeouts_init+0xc>
  }
}
 800a800:	bf00      	nop
 800a802:	bf00      	nop
 800a804:	3708      	adds	r7, #8
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	08010de4 	.word	0x08010de4
 800a810:	0800a76d 	.word	0x0800a76d

0800a814 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a826:	d306      	bcc.n	800a836 <sys_timeout+0x22>
 800a828:	4b0a      	ldr	r3, [pc, #40]	; (800a854 <sys_timeout+0x40>)
 800a82a:	f240 1229 	movw	r2, #297	; 0x129
 800a82e:	490a      	ldr	r1, [pc, #40]	; (800a858 <sys_timeout+0x44>)
 800a830:	480a      	ldr	r0, [pc, #40]	; (800a85c <sys_timeout+0x48>)
 800a832:	f002 fd21 	bl	800d278 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800a836:	f7f8 fdb7 	bl	80033a8 <sys_now>
 800a83a:	4602      	mov	r2, r0
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	4413      	add	r3, r2
 800a840:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	68b9      	ldr	r1, [r7, #8]
 800a846:	6978      	ldr	r0, [r7, #20]
 800a848:	f7ff ff22 	bl	800a690 <sys_timeout_abs>
#endif
}
 800a84c:	bf00      	nop
 800a84e:	3718      	adds	r7, #24
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}
 800a854:	08010200 	.word	0x08010200
 800a858:	0801029c 	.word	0x0801029c
 800a85c:	08010274 	.word	0x08010274

0800a860 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800a866:	f7f8 fd9f 	bl	80033a8 <sys_now>
 800a86a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800a86c:	4b1a      	ldr	r3, [pc, #104]	; (800a8d8 <sys_check_timeouts+0x78>)
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	b2db      	uxtb	r3, r3
 800a872:	2b00      	cmp	r3, #0
 800a874:	d001      	beq.n	800a87a <sys_check_timeouts+0x1a>
 800a876:	f7f9 ffc7 	bl	8004808 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800a87a:	4b18      	ldr	r3, [pc, #96]	; (800a8dc <sys_check_timeouts+0x7c>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d022      	beq.n	800a8cc <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	68fa      	ldr	r2, [r7, #12]
 800a88c:	1ad3      	subs	r3, r2, r3
 800a88e:	0fdb      	lsrs	r3, r3, #31
 800a890:	f003 0301 	and.w	r3, r3, #1
 800a894:	b2db      	uxtb	r3, r3
 800a896:	2b00      	cmp	r3, #0
 800a898:	d11a      	bne.n	800a8d0 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4a0f      	ldr	r2, [pc, #60]	; (800a8dc <sys_check_timeouts+0x7c>)
 800a8a0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	689b      	ldr	r3, [r3, #8]
 800a8a6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	4a0b      	ldr	r2, [pc, #44]	; (800a8e0 <sys_check_timeouts+0x80>)
 800a8b4:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800a8b6:	68b9      	ldr	r1, [r7, #8]
 800a8b8:	2006      	movs	r0, #6
 800a8ba:	f7f9 fc69 	bl	8004190 <memp_free>
    if (handler != NULL) {
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d0d3      	beq.n	800a86c <sys_check_timeouts+0xc>
      handler(arg);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6838      	ldr	r0, [r7, #0]
 800a8c8:	4798      	blx	r3
  do {
 800a8ca:	e7cf      	b.n	800a86c <sys_check_timeouts+0xc>
      return;
 800a8cc:	bf00      	nop
 800a8ce:	e000      	b.n	800a8d2 <sys_check_timeouts+0x72>
      return;
 800a8d0:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800a8d2:	3710      	adds	r7, #16
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	2000b401 	.word	0x2000b401
 800a8dc:	2000b454 	.word	0x2000b454
 800a8e0:	2000b458 	.word	0x2000b458

0800a8e4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a8e8:	f002 fcde 	bl	800d2a8 <rand>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a8fa:	b29a      	uxth	r2, r3
 800a8fc:	4b01      	ldr	r3, [pc, #4]	; (800a904 <udp_init+0x20>)
 800a8fe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a900:	bf00      	nop
 800a902:	bd80      	pop	{r7, pc}
 800a904:	20000028 	.word	0x20000028

0800a908 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	4613      	mov	r3, r2
 800a914:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d105      	bne.n	800a928 <udp_input_local_match+0x20>
 800a91c:	4b27      	ldr	r3, [pc, #156]	; (800a9bc <udp_input_local_match+0xb4>)
 800a91e:	2287      	movs	r2, #135	; 0x87
 800a920:	4927      	ldr	r1, [pc, #156]	; (800a9c0 <udp_input_local_match+0xb8>)
 800a922:	4828      	ldr	r0, [pc, #160]	; (800a9c4 <udp_input_local_match+0xbc>)
 800a924:	f002 fca8 	bl	800d278 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d105      	bne.n	800a93a <udp_input_local_match+0x32>
 800a92e:	4b23      	ldr	r3, [pc, #140]	; (800a9bc <udp_input_local_match+0xb4>)
 800a930:	2288      	movs	r2, #136	; 0x88
 800a932:	4925      	ldr	r1, [pc, #148]	; (800a9c8 <udp_input_local_match+0xc0>)
 800a934:	4823      	ldr	r0, [pc, #140]	; (800a9c4 <udp_input_local_match+0xbc>)
 800a936:	f002 fc9f 	bl	800d278 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	7a1b      	ldrb	r3, [r3, #8]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d00b      	beq.n	800a95a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	7a1a      	ldrb	r2, [r3, #8]
 800a946:	4b21      	ldr	r3, [pc, #132]	; (800a9cc <udp_input_local_match+0xc4>)
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a94e:	3301      	adds	r3, #1
 800a950:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a952:	429a      	cmp	r2, r3
 800a954:	d001      	beq.n	800a95a <udp_input_local_match+0x52>
    return 0;
 800a956:	2300      	movs	r3, #0
 800a958:	e02b      	b.n	800a9b2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800a95a:	79fb      	ldrb	r3, [r7, #7]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d018      	beq.n	800a992 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d013      	beq.n	800a98e <udp_input_local_match+0x86>
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00f      	beq.n	800a98e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a96e:	4b17      	ldr	r3, [pc, #92]	; (800a9cc <udp_input_local_match+0xc4>)
 800a970:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a976:	d00a      	beq.n	800a98e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	4b13      	ldr	r3, [pc, #76]	; (800a9cc <udp_input_local_match+0xc4>)
 800a97e:	695b      	ldr	r3, [r3, #20]
 800a980:	405a      	eors	r2, r3
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	3308      	adds	r3, #8
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d110      	bne.n	800a9b0 <udp_input_local_match+0xa8>
          return 1;
 800a98e:	2301      	movs	r3, #1
 800a990:	e00f      	b.n	800a9b2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d009      	beq.n	800a9ac <udp_input_local_match+0xa4>
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d005      	beq.n	800a9ac <udp_input_local_match+0xa4>
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	4b09      	ldr	r3, [pc, #36]	; (800a9cc <udp_input_local_match+0xc4>)
 800a9a6:	695b      	ldr	r3, [r3, #20]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d101      	bne.n	800a9b0 <udp_input_local_match+0xa8>
        return 1;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e000      	b.n	800a9b2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3710      	adds	r7, #16
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	080102e8 	.word	0x080102e8
 800a9c0:	08010318 	.word	0x08010318
 800a9c4:	0801033c 	.word	0x0801033c
 800a9c8:	08010364 	.word	0x08010364
 800a9cc:	20004cd4 	.word	0x20004cd4

0800a9d0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800a9d0:	b590      	push	{r4, r7, lr}
 800a9d2:	b08d      	sub	sp, #52	; 0x34
 800a9d4:	af02      	add	r7, sp, #8
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d105      	bne.n	800a9f0 <udp_input+0x20>
 800a9e4:	4b7c      	ldr	r3, [pc, #496]	; (800abd8 <udp_input+0x208>)
 800a9e6:	22cf      	movs	r2, #207	; 0xcf
 800a9e8:	497c      	ldr	r1, [pc, #496]	; (800abdc <udp_input+0x20c>)
 800a9ea:	487d      	ldr	r0, [pc, #500]	; (800abe0 <udp_input+0x210>)
 800a9ec:	f002 fc44 	bl	800d278 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d105      	bne.n	800aa02 <udp_input+0x32>
 800a9f6:	4b78      	ldr	r3, [pc, #480]	; (800abd8 <udp_input+0x208>)
 800a9f8:	22d0      	movs	r2, #208	; 0xd0
 800a9fa:	497a      	ldr	r1, [pc, #488]	; (800abe4 <udp_input+0x214>)
 800a9fc:	4878      	ldr	r0, [pc, #480]	; (800abe0 <udp_input+0x210>)
 800a9fe:	f002 fc3b 	bl	800d278 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	895b      	ldrh	r3, [r3, #10]
 800aa06:	2b07      	cmp	r3, #7
 800aa08:	d803      	bhi.n	800aa12 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f7fa fa36 	bl	8004e7c <pbuf_free>
    goto end;
 800aa10:	e0de      	b.n	800abd0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800aa18:	4b73      	ldr	r3, [pc, #460]	; (800abe8 <udp_input+0x218>)
 800aa1a:	695b      	ldr	r3, [r3, #20]
 800aa1c:	4a72      	ldr	r2, [pc, #456]	; (800abe8 <udp_input+0x218>)
 800aa1e:	6812      	ldr	r2, [r2, #0]
 800aa20:	4611      	mov	r1, r2
 800aa22:	4618      	mov	r0, r3
 800aa24:	f001 fc88 	bl	800c338 <ip4_addr_isbroadcast_u32>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	881b      	ldrh	r3, [r3, #0]
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7f8 fec4 	bl	80037c0 <lwip_htons>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	885b      	ldrh	r3, [r3, #2]
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7f8 febc 	bl	80037c0 <lwip_htons>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800aa50:	2300      	movs	r3, #0
 800aa52:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800aa54:	2300      	movs	r3, #0
 800aa56:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa58:	4b64      	ldr	r3, [pc, #400]	; (800abec <udp_input+0x21c>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	627b      	str	r3, [r7, #36]	; 0x24
 800aa5e:	e054      	b.n	800ab0a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800aa60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa62:	8a5b      	ldrh	r3, [r3, #18]
 800aa64:	89fa      	ldrh	r2, [r7, #14]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d14a      	bne.n	800ab00 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800aa6a:	7cfb      	ldrb	r3, [r7, #19]
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	6839      	ldr	r1, [r7, #0]
 800aa70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa72:	f7ff ff49 	bl	800a908 <udp_input_local_match>
 800aa76:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d041      	beq.n	800ab00 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800aa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7e:	7c1b      	ldrb	r3, [r3, #16]
 800aa80:	f003 0304 	and.w	r3, r3, #4
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d11d      	bne.n	800aac4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d102      	bne.n	800aa94 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800aa8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa90:	61fb      	str	r3, [r7, #28]
 800aa92:	e017      	b.n	800aac4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800aa94:	7cfb      	ldrb	r3, [r7, #19]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d014      	beq.n	800aac4 <udp_input+0xf4>
 800aa9a:	4b53      	ldr	r3, [pc, #332]	; (800abe8 <udp_input+0x218>)
 800aa9c:	695b      	ldr	r3, [r3, #20]
 800aa9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaa2:	d10f      	bne.n	800aac4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	3304      	adds	r3, #4
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d008      	beq.n	800aac4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800aab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	3304      	adds	r3, #4
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d101      	bne.n	800aac4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800aac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800aac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac6:	8a9b      	ldrh	r3, [r3, #20]
 800aac8:	8a3a      	ldrh	r2, [r7, #16]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d118      	bne.n	800ab00 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800aace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d005      	beq.n	800aae2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800aad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad8:	685a      	ldr	r2, [r3, #4]
 800aada:	4b43      	ldr	r3, [pc, #268]	; (800abe8 <udp_input+0x218>)
 800aadc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800aade:	429a      	cmp	r2, r3
 800aae0:	d10e      	bne.n	800ab00 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800aae2:	6a3b      	ldr	r3, [r7, #32]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d014      	beq.n	800ab12 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800aae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaea:	68da      	ldr	r2, [r3, #12]
 800aaec:	6a3b      	ldr	r3, [r7, #32]
 800aaee:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800aaf0:	4b3e      	ldr	r3, [pc, #248]	; (800abec <udp_input+0x21c>)
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800aaf8:	4a3c      	ldr	r2, [pc, #240]	; (800abec <udp_input+0x21c>)
 800aafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800aafe:	e008      	b.n	800ab12 <udp_input+0x142>
      }
    }

    prev = pcb;
 800ab00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab02:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	627b      	str	r3, [r7, #36]	; 0x24
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d1a7      	bne.n	800aa60 <udp_input+0x90>
 800ab10:	e000      	b.n	800ab14 <udp_input+0x144>
        break;
 800ab12:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ab14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d101      	bne.n	800ab1e <udp_input+0x14e>
    pcb = uncon_pcb;
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ab1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d002      	beq.n	800ab2a <udp_input+0x15a>
    for_us = 1;
 800ab24:	2301      	movs	r3, #1
 800ab26:	76fb      	strb	r3, [r7, #27]
 800ab28:	e00a      	b.n	800ab40 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	3304      	adds	r3, #4
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	4b2d      	ldr	r3, [pc, #180]	; (800abe8 <udp_input+0x218>)
 800ab32:	695b      	ldr	r3, [r3, #20]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	bf0c      	ite	eq
 800ab38:	2301      	moveq	r3, #1
 800ab3a:	2300      	movne	r3, #0
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ab40:	7efb      	ldrb	r3, [r7, #27]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d041      	beq.n	800abca <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ab46:	2108      	movs	r1, #8
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f7fa f911 	bl	8004d70 <pbuf_remove_header>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00a      	beq.n	800ab6a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ab54:	4b20      	ldr	r3, [pc, #128]	; (800abd8 <udp_input+0x208>)
 800ab56:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800ab5a:	4925      	ldr	r1, [pc, #148]	; (800abf0 <udp_input+0x220>)
 800ab5c:	4820      	ldr	r0, [pc, #128]	; (800abe0 <udp_input+0x210>)
 800ab5e:	f002 fb8b 	bl	800d278 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f7fa f98a 	bl	8004e7c <pbuf_free>
      goto end;
 800ab68:	e032      	b.n	800abd0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800ab6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d012      	beq.n	800ab96 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ab70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab72:	699b      	ldr	r3, [r3, #24]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d00a      	beq.n	800ab8e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ab78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7a:	699c      	ldr	r4, [r3, #24]
 800ab7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7e:	69d8      	ldr	r0, [r3, #28]
 800ab80:	8a3b      	ldrh	r3, [r7, #16]
 800ab82:	9300      	str	r3, [sp, #0]
 800ab84:	4b1b      	ldr	r3, [pc, #108]	; (800abf4 <udp_input+0x224>)
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab8a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ab8c:	e021      	b.n	800abd2 <udp_input+0x202>
        pbuf_free(p);
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f7fa f974 	bl	8004e7c <pbuf_free>
        goto end;
 800ab94:	e01c      	b.n	800abd0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ab96:	7cfb      	ldrb	r3, [r7, #19]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d112      	bne.n	800abc2 <udp_input+0x1f2>
 800ab9c:	4b12      	ldr	r3, [pc, #72]	; (800abe8 <udp_input+0x218>)
 800ab9e:	695b      	ldr	r3, [r3, #20]
 800aba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aba4:	2be0      	cmp	r3, #224	; 0xe0
 800aba6:	d00c      	beq.n	800abc2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800aba8:	4b0f      	ldr	r3, [pc, #60]	; (800abe8 <udp_input+0x218>)
 800abaa:	899b      	ldrh	r3, [r3, #12]
 800abac:	3308      	adds	r3, #8
 800abae:	b29b      	uxth	r3, r3
 800abb0:	b21b      	sxth	r3, r3
 800abb2:	4619      	mov	r1, r3
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f7fa f94e 	bl	8004e56 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800abba:	2103      	movs	r1, #3
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f001 f89b 	bl	800bcf8 <icmp_dest_unreach>
      pbuf_free(p);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f7fa f95a 	bl	8004e7c <pbuf_free>
  return;
 800abc8:	e003      	b.n	800abd2 <udp_input+0x202>
    pbuf_free(p);
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f7fa f956 	bl	8004e7c <pbuf_free>
  return;
 800abd0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800abd2:	372c      	adds	r7, #44	; 0x2c
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd90      	pop	{r4, r7, pc}
 800abd8:	080102e8 	.word	0x080102e8
 800abdc:	0801038c 	.word	0x0801038c
 800abe0:	0801033c 	.word	0x0801033c
 800abe4:	080103a4 	.word	0x080103a4
 800abe8:	20004cd4 	.word	0x20004cd4
 800abec:	2000b460 	.word	0x2000b460
 800abf0:	080103c0 	.word	0x080103c0
 800abf4:	20004ce4 	.word	0x20004ce4

0800abf8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b085      	sub	sp, #20
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d01e      	beq.n	800ac46 <udp_netif_ip_addr_changed+0x4e>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d01a      	beq.n	800ac46 <udp_netif_ip_addr_changed+0x4e>
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d017      	beq.n	800ac46 <udp_netif_ip_addr_changed+0x4e>
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d013      	beq.n	800ac46 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ac1e:	4b0d      	ldr	r3, [pc, #52]	; (800ac54 <udp_netif_ip_addr_changed+0x5c>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	60fb      	str	r3, [r7, #12]
 800ac24:	e00c      	b.n	800ac40 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d103      	bne.n	800ac3a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	60fb      	str	r3, [r7, #12]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d1ef      	bne.n	800ac26 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ac46:	bf00      	nop
 800ac48:	3714      	adds	r7, #20
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr
 800ac52:	bf00      	nop
 800ac54:	2000b460 	.word	0x2000b460

0800ac58 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ac60:	4915      	ldr	r1, [pc, #84]	; (800acb8 <etharp_free_entry+0x60>)
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	4613      	mov	r3, r2
 800ac66:	005b      	lsls	r3, r3, #1
 800ac68:	4413      	add	r3, r2
 800ac6a:	00db      	lsls	r3, r3, #3
 800ac6c:	440b      	add	r3, r1
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d013      	beq.n	800ac9c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ac74:	4910      	ldr	r1, [pc, #64]	; (800acb8 <etharp_free_entry+0x60>)
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	4613      	mov	r3, r2
 800ac7a:	005b      	lsls	r3, r3, #1
 800ac7c:	4413      	add	r3, r2
 800ac7e:	00db      	lsls	r3, r3, #3
 800ac80:	440b      	add	r3, r1
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7fa f8f9 	bl	8004e7c <pbuf_free>
    arp_table[i].q = NULL;
 800ac8a:	490b      	ldr	r1, [pc, #44]	; (800acb8 <etharp_free_entry+0x60>)
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	4613      	mov	r3, r2
 800ac90:	005b      	lsls	r3, r3, #1
 800ac92:	4413      	add	r3, r2
 800ac94:	00db      	lsls	r3, r3, #3
 800ac96:	440b      	add	r3, r1
 800ac98:	2200      	movs	r2, #0
 800ac9a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ac9c:	4906      	ldr	r1, [pc, #24]	; (800acb8 <etharp_free_entry+0x60>)
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	4613      	mov	r3, r2
 800aca2:	005b      	lsls	r3, r3, #1
 800aca4:	4413      	add	r3, r2
 800aca6:	00db      	lsls	r3, r3, #3
 800aca8:	440b      	add	r3, r1
 800acaa:	3314      	adds	r3, #20
 800acac:	2200      	movs	r2, #0
 800acae:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800acb0:	bf00      	nop
 800acb2:	3708      	adds	r7, #8
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	2000b464 	.word	0x2000b464

0800acbc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800acc2:	2300      	movs	r3, #0
 800acc4:	607b      	str	r3, [r7, #4]
 800acc6:	e096      	b.n	800adf6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800acc8:	494f      	ldr	r1, [pc, #316]	; (800ae08 <etharp_tmr+0x14c>)
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	4613      	mov	r3, r2
 800acce:	005b      	lsls	r3, r3, #1
 800acd0:	4413      	add	r3, r2
 800acd2:	00db      	lsls	r3, r3, #3
 800acd4:	440b      	add	r3, r1
 800acd6:	3314      	adds	r3, #20
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800acdc:	78fb      	ldrb	r3, [r7, #3]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	f000 8086 	beq.w	800adf0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800ace4:	4948      	ldr	r1, [pc, #288]	; (800ae08 <etharp_tmr+0x14c>)
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	4613      	mov	r3, r2
 800acea:	005b      	lsls	r3, r3, #1
 800acec:	4413      	add	r3, r2
 800acee:	00db      	lsls	r3, r3, #3
 800acf0:	440b      	add	r3, r1
 800acf2:	3312      	adds	r3, #18
 800acf4:	881b      	ldrh	r3, [r3, #0]
 800acf6:	3301      	adds	r3, #1
 800acf8:	b298      	uxth	r0, r3
 800acfa:	4943      	ldr	r1, [pc, #268]	; (800ae08 <etharp_tmr+0x14c>)
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	4613      	mov	r3, r2
 800ad00:	005b      	lsls	r3, r3, #1
 800ad02:	4413      	add	r3, r2
 800ad04:	00db      	lsls	r3, r3, #3
 800ad06:	440b      	add	r3, r1
 800ad08:	3312      	adds	r3, #18
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ad0e:	493e      	ldr	r1, [pc, #248]	; (800ae08 <etharp_tmr+0x14c>)
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	4613      	mov	r3, r2
 800ad14:	005b      	lsls	r3, r3, #1
 800ad16:	4413      	add	r3, r2
 800ad18:	00db      	lsls	r3, r3, #3
 800ad1a:	440b      	add	r3, r1
 800ad1c:	3312      	adds	r3, #18
 800ad1e:	881b      	ldrh	r3, [r3, #0]
 800ad20:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ad24:	d215      	bcs.n	800ad52 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ad26:	4938      	ldr	r1, [pc, #224]	; (800ae08 <etharp_tmr+0x14c>)
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	005b      	lsls	r3, r3, #1
 800ad2e:	4413      	add	r3, r2
 800ad30:	00db      	lsls	r3, r3, #3
 800ad32:	440b      	add	r3, r1
 800ad34:	3314      	adds	r3, #20
 800ad36:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d10e      	bne.n	800ad5a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ad3c:	4932      	ldr	r1, [pc, #200]	; (800ae08 <etharp_tmr+0x14c>)
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	4613      	mov	r3, r2
 800ad42:	005b      	lsls	r3, r3, #1
 800ad44:	4413      	add	r3, r2
 800ad46:	00db      	lsls	r3, r3, #3
 800ad48:	440b      	add	r3, r1
 800ad4a:	3312      	adds	r3, #18
 800ad4c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ad4e:	2b04      	cmp	r3, #4
 800ad50:	d903      	bls.n	800ad5a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f7ff ff80 	bl	800ac58 <etharp_free_entry>
 800ad58:	e04a      	b.n	800adf0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ad5a:	492b      	ldr	r1, [pc, #172]	; (800ae08 <etharp_tmr+0x14c>)
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	4613      	mov	r3, r2
 800ad60:	005b      	lsls	r3, r3, #1
 800ad62:	4413      	add	r3, r2
 800ad64:	00db      	lsls	r3, r3, #3
 800ad66:	440b      	add	r3, r1
 800ad68:	3314      	adds	r3, #20
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	2b03      	cmp	r3, #3
 800ad6e:	d10a      	bne.n	800ad86 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ad70:	4925      	ldr	r1, [pc, #148]	; (800ae08 <etharp_tmr+0x14c>)
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	4613      	mov	r3, r2
 800ad76:	005b      	lsls	r3, r3, #1
 800ad78:	4413      	add	r3, r2
 800ad7a:	00db      	lsls	r3, r3, #3
 800ad7c:	440b      	add	r3, r1
 800ad7e:	3314      	adds	r3, #20
 800ad80:	2204      	movs	r2, #4
 800ad82:	701a      	strb	r2, [r3, #0]
 800ad84:	e034      	b.n	800adf0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ad86:	4920      	ldr	r1, [pc, #128]	; (800ae08 <etharp_tmr+0x14c>)
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	005b      	lsls	r3, r3, #1
 800ad8e:	4413      	add	r3, r2
 800ad90:	00db      	lsls	r3, r3, #3
 800ad92:	440b      	add	r3, r1
 800ad94:	3314      	adds	r3, #20
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	2b04      	cmp	r3, #4
 800ad9a:	d10a      	bne.n	800adb2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ad9c:	491a      	ldr	r1, [pc, #104]	; (800ae08 <etharp_tmr+0x14c>)
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	4613      	mov	r3, r2
 800ada2:	005b      	lsls	r3, r3, #1
 800ada4:	4413      	add	r3, r2
 800ada6:	00db      	lsls	r3, r3, #3
 800ada8:	440b      	add	r3, r1
 800adaa:	3314      	adds	r3, #20
 800adac:	2202      	movs	r2, #2
 800adae:	701a      	strb	r2, [r3, #0]
 800adb0:	e01e      	b.n	800adf0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800adb2:	4915      	ldr	r1, [pc, #84]	; (800ae08 <etharp_tmr+0x14c>)
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	4613      	mov	r3, r2
 800adb8:	005b      	lsls	r3, r3, #1
 800adba:	4413      	add	r3, r2
 800adbc:	00db      	lsls	r3, r3, #3
 800adbe:	440b      	add	r3, r1
 800adc0:	3314      	adds	r3, #20
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d113      	bne.n	800adf0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800adc8:	490f      	ldr	r1, [pc, #60]	; (800ae08 <etharp_tmr+0x14c>)
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	4613      	mov	r3, r2
 800adce:	005b      	lsls	r3, r3, #1
 800add0:	4413      	add	r3, r2
 800add2:	00db      	lsls	r3, r3, #3
 800add4:	440b      	add	r3, r1
 800add6:	3308      	adds	r3, #8
 800add8:	6818      	ldr	r0, [r3, #0]
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	4613      	mov	r3, r2
 800adde:	005b      	lsls	r3, r3, #1
 800ade0:	4413      	add	r3, r2
 800ade2:	00db      	lsls	r3, r3, #3
 800ade4:	4a08      	ldr	r2, [pc, #32]	; (800ae08 <etharp_tmr+0x14c>)
 800ade6:	4413      	add	r3, r2
 800ade8:	3304      	adds	r3, #4
 800adea:	4619      	mov	r1, r3
 800adec:	f000 fe6e 	bl	800bacc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	3301      	adds	r3, #1
 800adf4:	607b      	str	r3, [r7, #4]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2b09      	cmp	r3, #9
 800adfa:	f77f af65 	ble.w	800acc8 <etharp_tmr+0xc>
      }
    }
  }
}
 800adfe:	bf00      	nop
 800ae00:	bf00      	nop
 800ae02:	3708      	adds	r7, #8
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}
 800ae08:	2000b464 	.word	0x2000b464

0800ae0c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b08a      	sub	sp, #40	; 0x28
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	460b      	mov	r3, r1
 800ae16:	607a      	str	r2, [r7, #4]
 800ae18:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ae1a:	230a      	movs	r3, #10
 800ae1c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ae1e:	230a      	movs	r3, #10
 800ae20:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800ae22:	230a      	movs	r3, #10
 800ae24:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800ae26:	2300      	movs	r3, #0
 800ae28:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ae2a:	230a      	movs	r3, #10
 800ae2c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	83bb      	strh	r3, [r7, #28]
 800ae32:	2300      	movs	r3, #0
 800ae34:	837b      	strh	r3, [r7, #26]
 800ae36:	2300      	movs	r3, #0
 800ae38:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	843b      	strh	r3, [r7, #32]
 800ae3e:	e0ae      	b.n	800af9e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ae40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ae44:	49a6      	ldr	r1, [pc, #664]	; (800b0e0 <etharp_find_entry+0x2d4>)
 800ae46:	4613      	mov	r3, r2
 800ae48:	005b      	lsls	r3, r3, #1
 800ae4a:	4413      	add	r3, r2
 800ae4c:	00db      	lsls	r3, r3, #3
 800ae4e:	440b      	add	r3, r1
 800ae50:	3314      	adds	r3, #20
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ae56:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ae5a:	2b0a      	cmp	r3, #10
 800ae5c:	d105      	bne.n	800ae6a <etharp_find_entry+0x5e>
 800ae5e:	7dfb      	ldrb	r3, [r7, #23]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d102      	bne.n	800ae6a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ae64:	8c3b      	ldrh	r3, [r7, #32]
 800ae66:	847b      	strh	r3, [r7, #34]	; 0x22
 800ae68:	e095      	b.n	800af96 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ae6a:	7dfb      	ldrb	r3, [r7, #23]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	f000 8092 	beq.w	800af96 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ae72:	7dfb      	ldrb	r3, [r7, #23]
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d009      	beq.n	800ae8c <etharp_find_entry+0x80>
 800ae78:	7dfb      	ldrb	r3, [r7, #23]
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d806      	bhi.n	800ae8c <etharp_find_entry+0x80>
 800ae7e:	4b99      	ldr	r3, [pc, #612]	; (800b0e4 <etharp_find_entry+0x2d8>)
 800ae80:	f240 1223 	movw	r2, #291	; 0x123
 800ae84:	4998      	ldr	r1, [pc, #608]	; (800b0e8 <etharp_find_entry+0x2dc>)
 800ae86:	4899      	ldr	r0, [pc, #612]	; (800b0ec <etharp_find_entry+0x2e0>)
 800ae88:	f002 f9f6 	bl	800d278 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d020      	beq.n	800aed4 <etharp_find_entry+0xc8>
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	6819      	ldr	r1, [r3, #0]
 800ae96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ae9a:	4891      	ldr	r0, [pc, #580]	; (800b0e0 <etharp_find_entry+0x2d4>)
 800ae9c:	4613      	mov	r3, r2
 800ae9e:	005b      	lsls	r3, r3, #1
 800aea0:	4413      	add	r3, r2
 800aea2:	00db      	lsls	r3, r3, #3
 800aea4:	4403      	add	r3, r0
 800aea6:	3304      	adds	r3, #4
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4299      	cmp	r1, r3
 800aeac:	d112      	bne.n	800aed4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d00c      	beq.n	800aece <etharp_find_entry+0xc2>
 800aeb4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aeb8:	4989      	ldr	r1, [pc, #548]	; (800b0e0 <etharp_find_entry+0x2d4>)
 800aeba:	4613      	mov	r3, r2
 800aebc:	005b      	lsls	r3, r3, #1
 800aebe:	4413      	add	r3, r2
 800aec0:	00db      	lsls	r3, r3, #3
 800aec2:	440b      	add	r3, r1
 800aec4:	3308      	adds	r3, #8
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d102      	bne.n	800aed4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800aece:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800aed2:	e100      	b.n	800b0d6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800aed4:	7dfb      	ldrb	r3, [r7, #23]
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d140      	bne.n	800af5c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800aeda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aede:	4980      	ldr	r1, [pc, #512]	; (800b0e0 <etharp_find_entry+0x2d4>)
 800aee0:	4613      	mov	r3, r2
 800aee2:	005b      	lsls	r3, r3, #1
 800aee4:	4413      	add	r3, r2
 800aee6:	00db      	lsls	r3, r3, #3
 800aee8:	440b      	add	r3, r1
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d01a      	beq.n	800af26 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800aef0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aef4:	497a      	ldr	r1, [pc, #488]	; (800b0e0 <etharp_find_entry+0x2d4>)
 800aef6:	4613      	mov	r3, r2
 800aef8:	005b      	lsls	r3, r3, #1
 800aefa:	4413      	add	r3, r2
 800aefc:	00db      	lsls	r3, r3, #3
 800aefe:	440b      	add	r3, r1
 800af00:	3312      	adds	r3, #18
 800af02:	881b      	ldrh	r3, [r3, #0]
 800af04:	8bba      	ldrh	r2, [r7, #28]
 800af06:	429a      	cmp	r2, r3
 800af08:	d845      	bhi.n	800af96 <etharp_find_entry+0x18a>
            old_queue = i;
 800af0a:	8c3b      	ldrh	r3, [r7, #32]
 800af0c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800af0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800af12:	4973      	ldr	r1, [pc, #460]	; (800b0e0 <etharp_find_entry+0x2d4>)
 800af14:	4613      	mov	r3, r2
 800af16:	005b      	lsls	r3, r3, #1
 800af18:	4413      	add	r3, r2
 800af1a:	00db      	lsls	r3, r3, #3
 800af1c:	440b      	add	r3, r1
 800af1e:	3312      	adds	r3, #18
 800af20:	881b      	ldrh	r3, [r3, #0]
 800af22:	83bb      	strh	r3, [r7, #28]
 800af24:	e037      	b.n	800af96 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800af26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800af2a:	496d      	ldr	r1, [pc, #436]	; (800b0e0 <etharp_find_entry+0x2d4>)
 800af2c:	4613      	mov	r3, r2
 800af2e:	005b      	lsls	r3, r3, #1
 800af30:	4413      	add	r3, r2
 800af32:	00db      	lsls	r3, r3, #3
 800af34:	440b      	add	r3, r1
 800af36:	3312      	adds	r3, #18
 800af38:	881b      	ldrh	r3, [r3, #0]
 800af3a:	8b7a      	ldrh	r2, [r7, #26]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d82a      	bhi.n	800af96 <etharp_find_entry+0x18a>
            old_pending = i;
 800af40:	8c3b      	ldrh	r3, [r7, #32]
 800af42:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800af44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800af48:	4965      	ldr	r1, [pc, #404]	; (800b0e0 <etharp_find_entry+0x2d4>)
 800af4a:	4613      	mov	r3, r2
 800af4c:	005b      	lsls	r3, r3, #1
 800af4e:	4413      	add	r3, r2
 800af50:	00db      	lsls	r3, r3, #3
 800af52:	440b      	add	r3, r1
 800af54:	3312      	adds	r3, #18
 800af56:	881b      	ldrh	r3, [r3, #0]
 800af58:	837b      	strh	r3, [r7, #26]
 800af5a:	e01c      	b.n	800af96 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800af5c:	7dfb      	ldrb	r3, [r7, #23]
 800af5e:	2b01      	cmp	r3, #1
 800af60:	d919      	bls.n	800af96 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800af62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800af66:	495e      	ldr	r1, [pc, #376]	; (800b0e0 <etharp_find_entry+0x2d4>)
 800af68:	4613      	mov	r3, r2
 800af6a:	005b      	lsls	r3, r3, #1
 800af6c:	4413      	add	r3, r2
 800af6e:	00db      	lsls	r3, r3, #3
 800af70:	440b      	add	r3, r1
 800af72:	3312      	adds	r3, #18
 800af74:	881b      	ldrh	r3, [r3, #0]
 800af76:	8b3a      	ldrh	r2, [r7, #24]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d80c      	bhi.n	800af96 <etharp_find_entry+0x18a>
            old_stable = i;
 800af7c:	8c3b      	ldrh	r3, [r7, #32]
 800af7e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800af80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800af84:	4956      	ldr	r1, [pc, #344]	; (800b0e0 <etharp_find_entry+0x2d4>)
 800af86:	4613      	mov	r3, r2
 800af88:	005b      	lsls	r3, r3, #1
 800af8a:	4413      	add	r3, r2
 800af8c:	00db      	lsls	r3, r3, #3
 800af8e:	440b      	add	r3, r1
 800af90:	3312      	adds	r3, #18
 800af92:	881b      	ldrh	r3, [r3, #0]
 800af94:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800af96:	8c3b      	ldrh	r3, [r7, #32]
 800af98:	3301      	adds	r3, #1
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	843b      	strh	r3, [r7, #32]
 800af9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800afa2:	2b09      	cmp	r3, #9
 800afa4:	f77f af4c 	ble.w	800ae40 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800afa8:	7afb      	ldrb	r3, [r7, #11]
 800afaa:	f003 0302 	and.w	r3, r3, #2
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d108      	bne.n	800afc4 <etharp_find_entry+0x1b8>
 800afb2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800afb6:	2b0a      	cmp	r3, #10
 800afb8:	d107      	bne.n	800afca <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800afba:	7afb      	ldrb	r3, [r7, #11]
 800afbc:	f003 0301 	and.w	r3, r3, #1
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d102      	bne.n	800afca <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800afc4:	f04f 33ff 	mov.w	r3, #4294967295
 800afc8:	e085      	b.n	800b0d6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800afca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800afce:	2b09      	cmp	r3, #9
 800afd0:	dc02      	bgt.n	800afd8 <etharp_find_entry+0x1cc>
    i = empty;
 800afd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800afd4:	843b      	strh	r3, [r7, #32]
 800afd6:	e039      	b.n	800b04c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800afd8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800afdc:	2b09      	cmp	r3, #9
 800afde:	dc14      	bgt.n	800b00a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800afe0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afe2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800afe4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800afe8:	493d      	ldr	r1, [pc, #244]	; (800b0e0 <etharp_find_entry+0x2d4>)
 800afea:	4613      	mov	r3, r2
 800afec:	005b      	lsls	r3, r3, #1
 800afee:	4413      	add	r3, r2
 800aff0:	00db      	lsls	r3, r3, #3
 800aff2:	440b      	add	r3, r1
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d018      	beq.n	800b02c <etharp_find_entry+0x220>
 800affa:	4b3a      	ldr	r3, [pc, #232]	; (800b0e4 <etharp_find_entry+0x2d8>)
 800affc:	f240 126d 	movw	r2, #365	; 0x16d
 800b000:	493b      	ldr	r1, [pc, #236]	; (800b0f0 <etharp_find_entry+0x2e4>)
 800b002:	483a      	ldr	r0, [pc, #232]	; (800b0ec <etharp_find_entry+0x2e0>)
 800b004:	f002 f938 	bl	800d278 <iprintf>
 800b008:	e010      	b.n	800b02c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800b00a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b00e:	2b09      	cmp	r3, #9
 800b010:	dc02      	bgt.n	800b018 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800b012:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b014:	843b      	strh	r3, [r7, #32]
 800b016:	e009      	b.n	800b02c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800b018:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b01c:	2b09      	cmp	r3, #9
 800b01e:	dc02      	bgt.n	800b026 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800b020:	8bfb      	ldrh	r3, [r7, #30]
 800b022:	843b      	strh	r3, [r7, #32]
 800b024:	e002      	b.n	800b02c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800b026:	f04f 33ff 	mov.w	r3, #4294967295
 800b02a:	e054      	b.n	800b0d6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b02c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b030:	2b09      	cmp	r3, #9
 800b032:	dd06      	ble.n	800b042 <etharp_find_entry+0x236>
 800b034:	4b2b      	ldr	r3, [pc, #172]	; (800b0e4 <etharp_find_entry+0x2d8>)
 800b036:	f240 127f 	movw	r2, #383	; 0x17f
 800b03a:	492e      	ldr	r1, [pc, #184]	; (800b0f4 <etharp_find_entry+0x2e8>)
 800b03c:	482b      	ldr	r0, [pc, #172]	; (800b0ec <etharp_find_entry+0x2e0>)
 800b03e:	f002 f91b 	bl	800d278 <iprintf>
    etharp_free_entry(i);
 800b042:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b046:	4618      	mov	r0, r3
 800b048:	f7ff fe06 	bl	800ac58 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b04c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b050:	2b09      	cmp	r3, #9
 800b052:	dd06      	ble.n	800b062 <etharp_find_entry+0x256>
 800b054:	4b23      	ldr	r3, [pc, #140]	; (800b0e4 <etharp_find_entry+0x2d8>)
 800b056:	f240 1283 	movw	r2, #387	; 0x183
 800b05a:	4926      	ldr	r1, [pc, #152]	; (800b0f4 <etharp_find_entry+0x2e8>)
 800b05c:	4823      	ldr	r0, [pc, #140]	; (800b0ec <etharp_find_entry+0x2e0>)
 800b05e:	f002 f90b 	bl	800d278 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800b062:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b066:	491e      	ldr	r1, [pc, #120]	; (800b0e0 <etharp_find_entry+0x2d4>)
 800b068:	4613      	mov	r3, r2
 800b06a:	005b      	lsls	r3, r3, #1
 800b06c:	4413      	add	r3, r2
 800b06e:	00db      	lsls	r3, r3, #3
 800b070:	440b      	add	r3, r1
 800b072:	3314      	adds	r3, #20
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d006      	beq.n	800b088 <etharp_find_entry+0x27c>
 800b07a:	4b1a      	ldr	r3, [pc, #104]	; (800b0e4 <etharp_find_entry+0x2d8>)
 800b07c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800b080:	491d      	ldr	r1, [pc, #116]	; (800b0f8 <etharp_find_entry+0x2ec>)
 800b082:	481a      	ldr	r0, [pc, #104]	; (800b0ec <etharp_find_entry+0x2e0>)
 800b084:	f002 f8f8 	bl	800d278 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00b      	beq.n	800b0a6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800b08e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	6819      	ldr	r1, [r3, #0]
 800b096:	4812      	ldr	r0, [pc, #72]	; (800b0e0 <etharp_find_entry+0x2d4>)
 800b098:	4613      	mov	r3, r2
 800b09a:	005b      	lsls	r3, r3, #1
 800b09c:	4413      	add	r3, r2
 800b09e:	00db      	lsls	r3, r3, #3
 800b0a0:	4403      	add	r3, r0
 800b0a2:	3304      	adds	r3, #4
 800b0a4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800b0a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b0aa:	490d      	ldr	r1, [pc, #52]	; (800b0e0 <etharp_find_entry+0x2d4>)
 800b0ac:	4613      	mov	r3, r2
 800b0ae:	005b      	lsls	r3, r3, #1
 800b0b0:	4413      	add	r3, r2
 800b0b2:	00db      	lsls	r3, r3, #3
 800b0b4:	440b      	add	r3, r1
 800b0b6:	3312      	adds	r3, #18
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800b0bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b0c0:	4907      	ldr	r1, [pc, #28]	; (800b0e0 <etharp_find_entry+0x2d4>)
 800b0c2:	4613      	mov	r3, r2
 800b0c4:	005b      	lsls	r3, r3, #1
 800b0c6:	4413      	add	r3, r2
 800b0c8:	00db      	lsls	r3, r3, #3
 800b0ca:	440b      	add	r3, r1
 800b0cc:	3308      	adds	r3, #8
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800b0d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3728      	adds	r7, #40	; 0x28
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	2000b464 	.word	0x2000b464
 800b0e4:	0801064c 	.word	0x0801064c
 800b0e8:	08010684 	.word	0x08010684
 800b0ec:	080106c4 	.word	0x080106c4
 800b0f0:	080106ec 	.word	0x080106ec
 800b0f4:	08010704 	.word	0x08010704
 800b0f8:	08010718 	.word	0x08010718

0800b0fc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b088      	sub	sp, #32
 800b100:	af02      	add	r7, sp, #8
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	60b9      	str	r1, [r7, #8]
 800b106:	607a      	str	r2, [r7, #4]
 800b108:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b110:	2b06      	cmp	r3, #6
 800b112:	d006      	beq.n	800b122 <etharp_update_arp_entry+0x26>
 800b114:	4b48      	ldr	r3, [pc, #288]	; (800b238 <etharp_update_arp_entry+0x13c>)
 800b116:	f240 12a9 	movw	r2, #425	; 0x1a9
 800b11a:	4948      	ldr	r1, [pc, #288]	; (800b23c <etharp_update_arp_entry+0x140>)
 800b11c:	4848      	ldr	r0, [pc, #288]	; (800b240 <etharp_update_arp_entry+0x144>)
 800b11e:	f002 f8ab 	bl	800d278 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d012      	beq.n	800b14e <etharp_update_arp_entry+0x52>
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d00e      	beq.n	800b14e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	68f9      	ldr	r1, [r7, #12]
 800b136:	4618      	mov	r0, r3
 800b138:	f001 f8fe 	bl	800c338 <ip4_addr_isbroadcast_u32>
 800b13c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d105      	bne.n	800b14e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b14a:	2be0      	cmp	r3, #224	; 0xe0
 800b14c:	d102      	bne.n	800b154 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b14e:	f06f 030f 	mvn.w	r3, #15
 800b152:	e06c      	b.n	800b22e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800b154:	78fb      	ldrb	r3, [r7, #3]
 800b156:	68fa      	ldr	r2, [r7, #12]
 800b158:	4619      	mov	r1, r3
 800b15a:	68b8      	ldr	r0, [r7, #8]
 800b15c:	f7ff fe56 	bl	800ae0c <etharp_find_entry>
 800b160:	4603      	mov	r3, r0
 800b162:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800b164:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	da02      	bge.n	800b172 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800b16c:	8afb      	ldrh	r3, [r7, #22]
 800b16e:	b25b      	sxtb	r3, r3
 800b170:	e05d      	b.n	800b22e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800b172:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b176:	4933      	ldr	r1, [pc, #204]	; (800b244 <etharp_update_arp_entry+0x148>)
 800b178:	4613      	mov	r3, r2
 800b17a:	005b      	lsls	r3, r3, #1
 800b17c:	4413      	add	r3, r2
 800b17e:	00db      	lsls	r3, r3, #3
 800b180:	440b      	add	r3, r1
 800b182:	3314      	adds	r3, #20
 800b184:	2202      	movs	r2, #2
 800b186:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800b188:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b18c:	492d      	ldr	r1, [pc, #180]	; (800b244 <etharp_update_arp_entry+0x148>)
 800b18e:	4613      	mov	r3, r2
 800b190:	005b      	lsls	r3, r3, #1
 800b192:	4413      	add	r3, r2
 800b194:	00db      	lsls	r3, r3, #3
 800b196:	440b      	add	r3, r1
 800b198:	3308      	adds	r3, #8
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800b19e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	005b      	lsls	r3, r3, #1
 800b1a6:	4413      	add	r3, r2
 800b1a8:	00db      	lsls	r3, r3, #3
 800b1aa:	3308      	adds	r3, #8
 800b1ac:	4a25      	ldr	r2, [pc, #148]	; (800b244 <etharp_update_arp_entry+0x148>)
 800b1ae:	4413      	add	r3, r2
 800b1b0:	3304      	adds	r3, #4
 800b1b2:	2206      	movs	r2, #6
 800b1b4:	6879      	ldr	r1, [r7, #4]
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f002 f848 	bl	800d24c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800b1bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b1c0:	4920      	ldr	r1, [pc, #128]	; (800b244 <etharp_update_arp_entry+0x148>)
 800b1c2:	4613      	mov	r3, r2
 800b1c4:	005b      	lsls	r3, r3, #1
 800b1c6:	4413      	add	r3, r2
 800b1c8:	00db      	lsls	r3, r3, #3
 800b1ca:	440b      	add	r3, r1
 800b1cc:	3312      	adds	r3, #18
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800b1d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b1d6:	491b      	ldr	r1, [pc, #108]	; (800b244 <etharp_update_arp_entry+0x148>)
 800b1d8:	4613      	mov	r3, r2
 800b1da:	005b      	lsls	r3, r3, #1
 800b1dc:	4413      	add	r3, r2
 800b1de:	00db      	lsls	r3, r3, #3
 800b1e0:	440b      	add	r3, r1
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d021      	beq.n	800b22c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800b1e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b1ec:	4915      	ldr	r1, [pc, #84]	; (800b244 <etharp_update_arp_entry+0x148>)
 800b1ee:	4613      	mov	r3, r2
 800b1f0:	005b      	lsls	r3, r3, #1
 800b1f2:	4413      	add	r3, r2
 800b1f4:	00db      	lsls	r3, r3, #3
 800b1f6:	440b      	add	r3, r1
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800b1fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b200:	4910      	ldr	r1, [pc, #64]	; (800b244 <etharp_update_arp_entry+0x148>)
 800b202:	4613      	mov	r3, r2
 800b204:	005b      	lsls	r3, r3, #1
 800b206:	4413      	add	r3, r2
 800b208:	00db      	lsls	r3, r3, #3
 800b20a:	440b      	add	r3, r1
 800b20c:	2200      	movs	r2, #0
 800b20e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800b216:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b21a:	9300      	str	r3, [sp, #0]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6939      	ldr	r1, [r7, #16]
 800b220:	68f8      	ldr	r0, [r7, #12]
 800b222:	f001 ff97 	bl	800d154 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800b226:	6938      	ldr	r0, [r7, #16]
 800b228:	f7f9 fe28 	bl	8004e7c <pbuf_free>
  }
  return ERR_OK;
 800b22c:	2300      	movs	r3, #0
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3718      	adds	r7, #24
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	0801064c 	.word	0x0801064c
 800b23c:	08010744 	.word	0x08010744
 800b240:	080106c4 	.word	0x080106c4
 800b244:	2000b464 	.word	0x2000b464

0800b248 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b250:	2300      	movs	r3, #0
 800b252:	60fb      	str	r3, [r7, #12]
 800b254:	e01e      	b.n	800b294 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800b256:	4913      	ldr	r1, [pc, #76]	; (800b2a4 <etharp_cleanup_netif+0x5c>)
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	4613      	mov	r3, r2
 800b25c:	005b      	lsls	r3, r3, #1
 800b25e:	4413      	add	r3, r2
 800b260:	00db      	lsls	r3, r3, #3
 800b262:	440b      	add	r3, r1
 800b264:	3314      	adds	r3, #20
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800b26a:	7afb      	ldrb	r3, [r7, #11]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d00e      	beq.n	800b28e <etharp_cleanup_netif+0x46>
 800b270:	490c      	ldr	r1, [pc, #48]	; (800b2a4 <etharp_cleanup_netif+0x5c>)
 800b272:	68fa      	ldr	r2, [r7, #12]
 800b274:	4613      	mov	r3, r2
 800b276:	005b      	lsls	r3, r3, #1
 800b278:	4413      	add	r3, r2
 800b27a:	00db      	lsls	r3, r3, #3
 800b27c:	440b      	add	r3, r1
 800b27e:	3308      	adds	r3, #8
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	687a      	ldr	r2, [r7, #4]
 800b284:	429a      	cmp	r2, r3
 800b286:	d102      	bne.n	800b28e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f7ff fce5 	bl	800ac58 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	3301      	adds	r3, #1
 800b292:	60fb      	str	r3, [r7, #12]
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2b09      	cmp	r3, #9
 800b298:	dddd      	ble.n	800b256 <etharp_cleanup_netif+0xe>
    }
  }
}
 800b29a:	bf00      	nop
 800b29c:	bf00      	nop
 800b29e:	3710      	adds	r7, #16
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}
 800b2a4:	2000b464 	.word	0x2000b464

0800b2a8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800b2a8:	b5b0      	push	{r4, r5, r7, lr}
 800b2aa:	b08a      	sub	sp, #40	; 0x28
 800b2ac:	af04      	add	r7, sp, #16
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d107      	bne.n	800b2c8 <etharp_input+0x20>
 800b2b8:	4b3d      	ldr	r3, [pc, #244]	; (800b3b0 <etharp_input+0x108>)
 800b2ba:	f240 228a 	movw	r2, #650	; 0x28a
 800b2be:	493d      	ldr	r1, [pc, #244]	; (800b3b4 <etharp_input+0x10c>)
 800b2c0:	483d      	ldr	r0, [pc, #244]	; (800b3b8 <etharp_input+0x110>)
 800b2c2:	f001 ffd9 	bl	800d278 <iprintf>
 800b2c6:	e06f      	b.n	800b3a8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	881b      	ldrh	r3, [r3, #0]
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2d8:	d10c      	bne.n	800b2f4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b2de:	2b06      	cmp	r3, #6
 800b2e0:	d108      	bne.n	800b2f4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b2e6:	2b04      	cmp	r3, #4
 800b2e8:	d104      	bne.n	800b2f4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	885b      	ldrh	r3, [r3, #2]
 800b2ee:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b2f0:	2b08      	cmp	r3, #8
 800b2f2:	d003      	beq.n	800b2fc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f7f9 fdc1 	bl	8004e7c <pbuf_free>
    return;
 800b2fa:	e055      	b.n	800b3a8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	330e      	adds	r3, #14
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	3318      	adds	r3, #24
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	3304      	adds	r3, #4
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d102      	bne.n	800b31c <etharp_input+0x74>
    for_us = 0;
 800b316:	2300      	movs	r3, #0
 800b318:	75fb      	strb	r3, [r7, #23]
 800b31a:	e009      	b.n	800b330 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800b31c:	68ba      	ldr	r2, [r7, #8]
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	3304      	adds	r3, #4
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	429a      	cmp	r2, r3
 800b326:	bf0c      	ite	eq
 800b328:	2301      	moveq	r3, #1
 800b32a:	2300      	movne	r3, #0
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	f103 0208 	add.w	r2, r3, #8
 800b336:	7dfb      	ldrb	r3, [r7, #23]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d001      	beq.n	800b340 <etharp_input+0x98>
 800b33c:	2301      	movs	r3, #1
 800b33e:	e000      	b.n	800b342 <etharp_input+0x9a>
 800b340:	2302      	movs	r3, #2
 800b342:	f107 010c 	add.w	r1, r7, #12
 800b346:	6838      	ldr	r0, [r7, #0]
 800b348:	f7ff fed8 	bl	800b0fc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	88db      	ldrh	r3, [r3, #6]
 800b350:	b29b      	uxth	r3, r3
 800b352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b356:	d003      	beq.n	800b360 <etharp_input+0xb8>
 800b358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b35c:	d01e      	beq.n	800b39c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800b35e:	e020      	b.n	800b3a2 <etharp_input+0xfa>
      if (for_us) {
 800b360:	7dfb      	ldrb	r3, [r7, #23]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d01c      	beq.n	800b3a0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800b37c:	693a      	ldr	r2, [r7, #16]
 800b37e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800b380:	2102      	movs	r1, #2
 800b382:	9103      	str	r1, [sp, #12]
 800b384:	f107 010c 	add.w	r1, r7, #12
 800b388:	9102      	str	r1, [sp, #8]
 800b38a:	9201      	str	r2, [sp, #4]
 800b38c:	9300      	str	r3, [sp, #0]
 800b38e:	462b      	mov	r3, r5
 800b390:	4622      	mov	r2, r4
 800b392:	4601      	mov	r1, r0
 800b394:	6838      	ldr	r0, [r7, #0]
 800b396:	f000 faeb 	bl	800b970 <etharp_raw>
      break;
 800b39a:	e001      	b.n	800b3a0 <etharp_input+0xf8>
      break;
 800b39c:	bf00      	nop
 800b39e:	e000      	b.n	800b3a2 <etharp_input+0xfa>
      break;
 800b3a0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f7f9 fd6a 	bl	8004e7c <pbuf_free>
}
 800b3a8:	3718      	adds	r7, #24
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bdb0      	pop	{r4, r5, r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	0801064c 	.word	0x0801064c
 800b3b4:	0801079c 	.word	0x0801079c
 800b3b8:	080106c4 	.word	0x080106c4

0800b3bc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b086      	sub	sp, #24
 800b3c0:	af02      	add	r7, sp, #8
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	4613      	mov	r3, r2
 800b3c8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b3ca:	79fa      	ldrb	r2, [r7, #7]
 800b3cc:	4944      	ldr	r1, [pc, #272]	; (800b4e0 <etharp_output_to_arp_index+0x124>)
 800b3ce:	4613      	mov	r3, r2
 800b3d0:	005b      	lsls	r3, r3, #1
 800b3d2:	4413      	add	r3, r2
 800b3d4:	00db      	lsls	r3, r3, #3
 800b3d6:	440b      	add	r3, r1
 800b3d8:	3314      	adds	r3, #20
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d806      	bhi.n	800b3ee <etharp_output_to_arp_index+0x32>
 800b3e0:	4b40      	ldr	r3, [pc, #256]	; (800b4e4 <etharp_output_to_arp_index+0x128>)
 800b3e2:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b3e6:	4940      	ldr	r1, [pc, #256]	; (800b4e8 <etharp_output_to_arp_index+0x12c>)
 800b3e8:	4840      	ldr	r0, [pc, #256]	; (800b4ec <etharp_output_to_arp_index+0x130>)
 800b3ea:	f001 ff45 	bl	800d278 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800b3ee:	79fa      	ldrb	r2, [r7, #7]
 800b3f0:	493b      	ldr	r1, [pc, #236]	; (800b4e0 <etharp_output_to_arp_index+0x124>)
 800b3f2:	4613      	mov	r3, r2
 800b3f4:	005b      	lsls	r3, r3, #1
 800b3f6:	4413      	add	r3, r2
 800b3f8:	00db      	lsls	r3, r3, #3
 800b3fa:	440b      	add	r3, r1
 800b3fc:	3314      	adds	r3, #20
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	2b02      	cmp	r3, #2
 800b402:	d153      	bne.n	800b4ac <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800b404:	79fa      	ldrb	r2, [r7, #7]
 800b406:	4936      	ldr	r1, [pc, #216]	; (800b4e0 <etharp_output_to_arp_index+0x124>)
 800b408:	4613      	mov	r3, r2
 800b40a:	005b      	lsls	r3, r3, #1
 800b40c:	4413      	add	r3, r2
 800b40e:	00db      	lsls	r3, r3, #3
 800b410:	440b      	add	r3, r1
 800b412:	3312      	adds	r3, #18
 800b414:	881b      	ldrh	r3, [r3, #0]
 800b416:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800b41a:	d919      	bls.n	800b450 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800b41c:	79fa      	ldrb	r2, [r7, #7]
 800b41e:	4613      	mov	r3, r2
 800b420:	005b      	lsls	r3, r3, #1
 800b422:	4413      	add	r3, r2
 800b424:	00db      	lsls	r3, r3, #3
 800b426:	4a2e      	ldr	r2, [pc, #184]	; (800b4e0 <etharp_output_to_arp_index+0x124>)
 800b428:	4413      	add	r3, r2
 800b42a:	3304      	adds	r3, #4
 800b42c:	4619      	mov	r1, r3
 800b42e:	68f8      	ldr	r0, [r7, #12]
 800b430:	f000 fb4c 	bl	800bacc <etharp_request>
 800b434:	4603      	mov	r3, r0
 800b436:	2b00      	cmp	r3, #0
 800b438:	d138      	bne.n	800b4ac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b43a:	79fa      	ldrb	r2, [r7, #7]
 800b43c:	4928      	ldr	r1, [pc, #160]	; (800b4e0 <etharp_output_to_arp_index+0x124>)
 800b43e:	4613      	mov	r3, r2
 800b440:	005b      	lsls	r3, r3, #1
 800b442:	4413      	add	r3, r2
 800b444:	00db      	lsls	r3, r3, #3
 800b446:	440b      	add	r3, r1
 800b448:	3314      	adds	r3, #20
 800b44a:	2203      	movs	r2, #3
 800b44c:	701a      	strb	r2, [r3, #0]
 800b44e:	e02d      	b.n	800b4ac <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800b450:	79fa      	ldrb	r2, [r7, #7]
 800b452:	4923      	ldr	r1, [pc, #140]	; (800b4e0 <etharp_output_to_arp_index+0x124>)
 800b454:	4613      	mov	r3, r2
 800b456:	005b      	lsls	r3, r3, #1
 800b458:	4413      	add	r3, r2
 800b45a:	00db      	lsls	r3, r3, #3
 800b45c:	440b      	add	r3, r1
 800b45e:	3312      	adds	r3, #18
 800b460:	881b      	ldrh	r3, [r3, #0]
 800b462:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800b466:	d321      	bcc.n	800b4ac <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b468:	79fa      	ldrb	r2, [r7, #7]
 800b46a:	4613      	mov	r3, r2
 800b46c:	005b      	lsls	r3, r3, #1
 800b46e:	4413      	add	r3, r2
 800b470:	00db      	lsls	r3, r3, #3
 800b472:	4a1b      	ldr	r2, [pc, #108]	; (800b4e0 <etharp_output_to_arp_index+0x124>)
 800b474:	4413      	add	r3, r2
 800b476:	1d19      	adds	r1, r3, #4
 800b478:	79fa      	ldrb	r2, [r7, #7]
 800b47a:	4613      	mov	r3, r2
 800b47c:	005b      	lsls	r3, r3, #1
 800b47e:	4413      	add	r3, r2
 800b480:	00db      	lsls	r3, r3, #3
 800b482:	3308      	adds	r3, #8
 800b484:	4a16      	ldr	r2, [pc, #88]	; (800b4e0 <etharp_output_to_arp_index+0x124>)
 800b486:	4413      	add	r3, r2
 800b488:	3304      	adds	r3, #4
 800b48a:	461a      	mov	r2, r3
 800b48c:	68f8      	ldr	r0, [r7, #12]
 800b48e:	f000 fafb 	bl	800ba88 <etharp_request_dst>
 800b492:	4603      	mov	r3, r0
 800b494:	2b00      	cmp	r3, #0
 800b496:	d109      	bne.n	800b4ac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b498:	79fa      	ldrb	r2, [r7, #7]
 800b49a:	4911      	ldr	r1, [pc, #68]	; (800b4e0 <etharp_output_to_arp_index+0x124>)
 800b49c:	4613      	mov	r3, r2
 800b49e:	005b      	lsls	r3, r3, #1
 800b4a0:	4413      	add	r3, r2
 800b4a2:	00db      	lsls	r3, r3, #3
 800b4a4:	440b      	add	r3, r1
 800b4a6:	3314      	adds	r3, #20
 800b4a8:	2203      	movs	r2, #3
 800b4aa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800b4b2:	79fa      	ldrb	r2, [r7, #7]
 800b4b4:	4613      	mov	r3, r2
 800b4b6:	005b      	lsls	r3, r3, #1
 800b4b8:	4413      	add	r3, r2
 800b4ba:	00db      	lsls	r3, r3, #3
 800b4bc:	3308      	adds	r3, #8
 800b4be:	4a08      	ldr	r2, [pc, #32]	; (800b4e0 <etharp_output_to_arp_index+0x124>)
 800b4c0:	4413      	add	r3, r2
 800b4c2:	3304      	adds	r3, #4
 800b4c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b4c8:	9200      	str	r2, [sp, #0]
 800b4ca:	460a      	mov	r2, r1
 800b4cc:	68b9      	ldr	r1, [r7, #8]
 800b4ce:	68f8      	ldr	r0, [r7, #12]
 800b4d0:	f001 fe40 	bl	800d154 <ethernet_output>
 800b4d4:	4603      	mov	r3, r0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3710      	adds	r7, #16
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	2000b464 	.word	0x2000b464
 800b4e4:	0801064c 	.word	0x0801064c
 800b4e8:	080107bc 	.word	0x080107bc
 800b4ec:	080106c4 	.word	0x080106c4

0800b4f0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b08a      	sub	sp, #40	; 0x28
 800b4f4:	af02      	add	r7, sp, #8
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	60b9      	str	r1, [r7, #8]
 800b4fa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d106      	bne.n	800b514 <etharp_output+0x24>
 800b506:	4b73      	ldr	r3, [pc, #460]	; (800b6d4 <etharp_output+0x1e4>)
 800b508:	f240 321e 	movw	r2, #798	; 0x31e
 800b50c:	4972      	ldr	r1, [pc, #456]	; (800b6d8 <etharp_output+0x1e8>)
 800b50e:	4873      	ldr	r0, [pc, #460]	; (800b6dc <etharp_output+0x1ec>)
 800b510:	f001 feb2 	bl	800d278 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d106      	bne.n	800b528 <etharp_output+0x38>
 800b51a:	4b6e      	ldr	r3, [pc, #440]	; (800b6d4 <etharp_output+0x1e4>)
 800b51c:	f240 321f 	movw	r2, #799	; 0x31f
 800b520:	496f      	ldr	r1, [pc, #444]	; (800b6e0 <etharp_output+0x1f0>)
 800b522:	486e      	ldr	r0, [pc, #440]	; (800b6dc <etharp_output+0x1ec>)
 800b524:	f001 fea8 	bl	800d278 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d106      	bne.n	800b53c <etharp_output+0x4c>
 800b52e:	4b69      	ldr	r3, [pc, #420]	; (800b6d4 <etharp_output+0x1e4>)
 800b530:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b534:	496b      	ldr	r1, [pc, #428]	; (800b6e4 <etharp_output+0x1f4>)
 800b536:	4869      	ldr	r0, [pc, #420]	; (800b6dc <etharp_output+0x1ec>)
 800b538:	f001 fe9e 	bl	800d278 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	68f9      	ldr	r1, [r7, #12]
 800b542:	4618      	mov	r0, r3
 800b544:	f000 fef8 	bl	800c338 <ip4_addr_isbroadcast_u32>
 800b548:	4603      	mov	r3, r0
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d002      	beq.n	800b554 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800b54e:	4b66      	ldr	r3, [pc, #408]	; (800b6e8 <etharp_output+0x1f8>)
 800b550:	61fb      	str	r3, [r7, #28]
 800b552:	e0af      	b.n	800b6b4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b55c:	2be0      	cmp	r3, #224	; 0xe0
 800b55e:	d118      	bne.n	800b592 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800b560:	2301      	movs	r3, #1
 800b562:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800b564:	2300      	movs	r3, #0
 800b566:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800b568:	235e      	movs	r3, #94	; 0x5e
 800b56a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	3301      	adds	r3, #1
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b576:	b2db      	uxtb	r3, r3
 800b578:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	3302      	adds	r3, #2
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	3303      	adds	r3, #3
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800b58a:	f107 0310 	add.w	r3, r7, #16
 800b58e:	61fb      	str	r3, [r7, #28]
 800b590:	e090      	b.n	800b6b4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681a      	ldr	r2, [r3, #0]
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	3304      	adds	r3, #4
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	405a      	eors	r2, r3
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	3308      	adds	r3, #8
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4013      	ands	r3, r2
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d012      	beq.n	800b5d0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b5b0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d00b      	beq.n	800b5d0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	330c      	adds	r3, #12
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d003      	beq.n	800b5ca <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	330c      	adds	r3, #12
 800b5c6:	61bb      	str	r3, [r7, #24]
 800b5c8:	e002      	b.n	800b5d0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800b5ca:	f06f 0303 	mvn.w	r3, #3
 800b5ce:	e07d      	b.n	800b6cc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b5d0:	4b46      	ldr	r3, [pc, #280]	; (800b6ec <etharp_output+0x1fc>)
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	4a46      	ldr	r2, [pc, #280]	; (800b6f0 <etharp_output+0x200>)
 800b5d8:	460b      	mov	r3, r1
 800b5da:	005b      	lsls	r3, r3, #1
 800b5dc:	440b      	add	r3, r1
 800b5de:	00db      	lsls	r3, r3, #3
 800b5e0:	4413      	add	r3, r2
 800b5e2:	3314      	adds	r3, #20
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d925      	bls.n	800b636 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800b5ea:	4b40      	ldr	r3, [pc, #256]	; (800b6ec <etharp_output+0x1fc>)
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	4a3f      	ldr	r2, [pc, #252]	; (800b6f0 <etharp_output+0x200>)
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	005b      	lsls	r3, r3, #1
 800b5f6:	440b      	add	r3, r1
 800b5f8:	00db      	lsls	r3, r3, #3
 800b5fa:	4413      	add	r3, r2
 800b5fc:	3308      	adds	r3, #8
 800b5fe:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b600:	68fa      	ldr	r2, [r7, #12]
 800b602:	429a      	cmp	r2, r3
 800b604:	d117      	bne.n	800b636 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800b606:	69bb      	ldr	r3, [r7, #24]
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	4b38      	ldr	r3, [pc, #224]	; (800b6ec <etharp_output+0x1fc>)
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	4618      	mov	r0, r3
 800b610:	4937      	ldr	r1, [pc, #220]	; (800b6f0 <etharp_output+0x200>)
 800b612:	4603      	mov	r3, r0
 800b614:	005b      	lsls	r3, r3, #1
 800b616:	4403      	add	r3, r0
 800b618:	00db      	lsls	r3, r3, #3
 800b61a:	440b      	add	r3, r1
 800b61c:	3304      	adds	r3, #4
 800b61e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800b620:	429a      	cmp	r2, r3
 800b622:	d108      	bne.n	800b636 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800b624:	4b31      	ldr	r3, [pc, #196]	; (800b6ec <etharp_output+0x1fc>)
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	461a      	mov	r2, r3
 800b62a:	68b9      	ldr	r1, [r7, #8]
 800b62c:	68f8      	ldr	r0, [r7, #12]
 800b62e:	f7ff fec5 	bl	800b3bc <etharp_output_to_arp_index>
 800b632:	4603      	mov	r3, r0
 800b634:	e04a      	b.n	800b6cc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b636:	2300      	movs	r3, #0
 800b638:	75fb      	strb	r3, [r7, #23]
 800b63a:	e031      	b.n	800b6a0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b63c:	7dfa      	ldrb	r2, [r7, #23]
 800b63e:	492c      	ldr	r1, [pc, #176]	; (800b6f0 <etharp_output+0x200>)
 800b640:	4613      	mov	r3, r2
 800b642:	005b      	lsls	r3, r3, #1
 800b644:	4413      	add	r3, r2
 800b646:	00db      	lsls	r3, r3, #3
 800b648:	440b      	add	r3, r1
 800b64a:	3314      	adds	r3, #20
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d923      	bls.n	800b69a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800b652:	7dfa      	ldrb	r2, [r7, #23]
 800b654:	4926      	ldr	r1, [pc, #152]	; (800b6f0 <etharp_output+0x200>)
 800b656:	4613      	mov	r3, r2
 800b658:	005b      	lsls	r3, r3, #1
 800b65a:	4413      	add	r3, r2
 800b65c:	00db      	lsls	r3, r3, #3
 800b65e:	440b      	add	r3, r1
 800b660:	3308      	adds	r3, #8
 800b662:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b664:	68fa      	ldr	r2, [r7, #12]
 800b666:	429a      	cmp	r2, r3
 800b668:	d117      	bne.n	800b69a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	6819      	ldr	r1, [r3, #0]
 800b66e:	7dfa      	ldrb	r2, [r7, #23]
 800b670:	481f      	ldr	r0, [pc, #124]	; (800b6f0 <etharp_output+0x200>)
 800b672:	4613      	mov	r3, r2
 800b674:	005b      	lsls	r3, r3, #1
 800b676:	4413      	add	r3, r2
 800b678:	00db      	lsls	r3, r3, #3
 800b67a:	4403      	add	r3, r0
 800b67c:	3304      	adds	r3, #4
 800b67e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800b680:	4299      	cmp	r1, r3
 800b682:	d10a      	bne.n	800b69a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800b684:	4a19      	ldr	r2, [pc, #100]	; (800b6ec <etharp_output+0x1fc>)
 800b686:	7dfb      	ldrb	r3, [r7, #23]
 800b688:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800b68a:	7dfb      	ldrb	r3, [r7, #23]
 800b68c:	461a      	mov	r2, r3
 800b68e:	68b9      	ldr	r1, [r7, #8]
 800b690:	68f8      	ldr	r0, [r7, #12]
 800b692:	f7ff fe93 	bl	800b3bc <etharp_output_to_arp_index>
 800b696:	4603      	mov	r3, r0
 800b698:	e018      	b.n	800b6cc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b69a:	7dfb      	ldrb	r3, [r7, #23]
 800b69c:	3301      	adds	r3, #1
 800b69e:	75fb      	strb	r3, [r7, #23]
 800b6a0:	7dfb      	ldrb	r3, [r7, #23]
 800b6a2:	2b09      	cmp	r3, #9
 800b6a4:	d9ca      	bls.n	800b63c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800b6a6:	68ba      	ldr	r2, [r7, #8]
 800b6a8:	69b9      	ldr	r1, [r7, #24]
 800b6aa:	68f8      	ldr	r0, [r7, #12]
 800b6ac:	f000 f822 	bl	800b6f4 <etharp_query>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	e00b      	b.n	800b6cc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800b6ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b6be:	9300      	str	r3, [sp, #0]
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	68b9      	ldr	r1, [r7, #8]
 800b6c4:	68f8      	ldr	r0, [r7, #12]
 800b6c6:	f001 fd45 	bl	800d154 <ethernet_output>
 800b6ca:	4603      	mov	r3, r0
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3720      	adds	r7, #32
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}
 800b6d4:	0801064c 	.word	0x0801064c
 800b6d8:	0801079c 	.word	0x0801079c
 800b6dc:	080106c4 	.word	0x080106c4
 800b6e0:	080107ec 	.word	0x080107ec
 800b6e4:	0801078c 	.word	0x0801078c
 800b6e8:	08010e00 	.word	0x08010e00
 800b6ec:	2000b554 	.word	0x2000b554
 800b6f0:	2000b464 	.word	0x2000b464

0800b6f4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b08c      	sub	sp, #48	; 0x30
 800b6f8:	af02      	add	r7, sp, #8
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	3326      	adds	r3, #38	; 0x26
 800b704:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800b706:	23ff      	movs	r3, #255	; 0xff
 800b708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800b70c:	2300      	movs	r3, #0
 800b70e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	68f9      	ldr	r1, [r7, #12]
 800b716:	4618      	mov	r0, r3
 800b718:	f000 fe0e 	bl	800c338 <ip4_addr_isbroadcast_u32>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d10c      	bne.n	800b73c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b72a:	2be0      	cmp	r3, #224	; 0xe0
 800b72c:	d006      	beq.n	800b73c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d003      	beq.n	800b73c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d102      	bne.n	800b742 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b73c:	f06f 030f 	mvn.w	r3, #15
 800b740:	e101      	b.n	800b946 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800b742:	68fa      	ldr	r2, [r7, #12]
 800b744:	2101      	movs	r1, #1
 800b746:	68b8      	ldr	r0, [r7, #8]
 800b748:	f7ff fb60 	bl	800ae0c <etharp_find_entry>
 800b74c:	4603      	mov	r3, r0
 800b74e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800b750:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b754:	2b00      	cmp	r3, #0
 800b756:	da02      	bge.n	800b75e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800b758:	8a7b      	ldrh	r3, [r7, #18]
 800b75a:	b25b      	sxtb	r3, r3
 800b75c:	e0f3      	b.n	800b946 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800b75e:	8a7b      	ldrh	r3, [r7, #18]
 800b760:	2b7e      	cmp	r3, #126	; 0x7e
 800b762:	d906      	bls.n	800b772 <etharp_query+0x7e>
 800b764:	4b7a      	ldr	r3, [pc, #488]	; (800b950 <etharp_query+0x25c>)
 800b766:	f240 32c1 	movw	r2, #961	; 0x3c1
 800b76a:	497a      	ldr	r1, [pc, #488]	; (800b954 <etharp_query+0x260>)
 800b76c:	487a      	ldr	r0, [pc, #488]	; (800b958 <etharp_query+0x264>)
 800b76e:	f001 fd83 	bl	800d278 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800b772:	8a7b      	ldrh	r3, [r7, #18]
 800b774:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800b776:	7c7a      	ldrb	r2, [r7, #17]
 800b778:	4978      	ldr	r1, [pc, #480]	; (800b95c <etharp_query+0x268>)
 800b77a:	4613      	mov	r3, r2
 800b77c:	005b      	lsls	r3, r3, #1
 800b77e:	4413      	add	r3, r2
 800b780:	00db      	lsls	r3, r3, #3
 800b782:	440b      	add	r3, r1
 800b784:	3314      	adds	r3, #20
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d115      	bne.n	800b7b8 <etharp_query+0xc4>
    is_new_entry = 1;
 800b78c:	2301      	movs	r3, #1
 800b78e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800b790:	7c7a      	ldrb	r2, [r7, #17]
 800b792:	4972      	ldr	r1, [pc, #456]	; (800b95c <etharp_query+0x268>)
 800b794:	4613      	mov	r3, r2
 800b796:	005b      	lsls	r3, r3, #1
 800b798:	4413      	add	r3, r2
 800b79a:	00db      	lsls	r3, r3, #3
 800b79c:	440b      	add	r3, r1
 800b79e:	3314      	adds	r3, #20
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800b7a4:	7c7a      	ldrb	r2, [r7, #17]
 800b7a6:	496d      	ldr	r1, [pc, #436]	; (800b95c <etharp_query+0x268>)
 800b7a8:	4613      	mov	r3, r2
 800b7aa:	005b      	lsls	r3, r3, #1
 800b7ac:	4413      	add	r3, r2
 800b7ae:	00db      	lsls	r3, r3, #3
 800b7b0:	440b      	add	r3, r1
 800b7b2:	3308      	adds	r3, #8
 800b7b4:	68fa      	ldr	r2, [r7, #12]
 800b7b6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800b7b8:	7c7a      	ldrb	r2, [r7, #17]
 800b7ba:	4968      	ldr	r1, [pc, #416]	; (800b95c <etharp_query+0x268>)
 800b7bc:	4613      	mov	r3, r2
 800b7be:	005b      	lsls	r3, r3, #1
 800b7c0:	4413      	add	r3, r2
 800b7c2:	00db      	lsls	r3, r3, #3
 800b7c4:	440b      	add	r3, r1
 800b7c6:	3314      	adds	r3, #20
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d011      	beq.n	800b7f2 <etharp_query+0xfe>
 800b7ce:	7c7a      	ldrb	r2, [r7, #17]
 800b7d0:	4962      	ldr	r1, [pc, #392]	; (800b95c <etharp_query+0x268>)
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	005b      	lsls	r3, r3, #1
 800b7d6:	4413      	add	r3, r2
 800b7d8:	00db      	lsls	r3, r3, #3
 800b7da:	440b      	add	r3, r1
 800b7dc:	3314      	adds	r3, #20
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d806      	bhi.n	800b7f2 <etharp_query+0xfe>
 800b7e4:	4b5a      	ldr	r3, [pc, #360]	; (800b950 <etharp_query+0x25c>)
 800b7e6:	f240 32cd 	movw	r2, #973	; 0x3cd
 800b7ea:	495d      	ldr	r1, [pc, #372]	; (800b960 <etharp_query+0x26c>)
 800b7ec:	485a      	ldr	r0, [pc, #360]	; (800b958 <etharp_query+0x264>)
 800b7ee:	f001 fd43 	bl	800d278 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800b7f2:	6a3b      	ldr	r3, [r7, #32]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d102      	bne.n	800b7fe <etharp_query+0x10a>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d10c      	bne.n	800b818 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800b7fe:	68b9      	ldr	r1, [r7, #8]
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	f000 f963 	bl	800bacc <etharp_request>
 800b806:	4603      	mov	r3, r0
 800b808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d102      	bne.n	800b818 <etharp_query+0x124>
      return result;
 800b812:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b816:	e096      	b.n	800b946 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d106      	bne.n	800b82c <etharp_query+0x138>
 800b81e:	4b4c      	ldr	r3, [pc, #304]	; (800b950 <etharp_query+0x25c>)
 800b820:	f240 32e1 	movw	r2, #993	; 0x3e1
 800b824:	494f      	ldr	r1, [pc, #316]	; (800b964 <etharp_query+0x270>)
 800b826:	484c      	ldr	r0, [pc, #304]	; (800b958 <etharp_query+0x264>)
 800b828:	f001 fd26 	bl	800d278 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800b82c:	7c7a      	ldrb	r2, [r7, #17]
 800b82e:	494b      	ldr	r1, [pc, #300]	; (800b95c <etharp_query+0x268>)
 800b830:	4613      	mov	r3, r2
 800b832:	005b      	lsls	r3, r3, #1
 800b834:	4413      	add	r3, r2
 800b836:	00db      	lsls	r3, r3, #3
 800b838:	440b      	add	r3, r1
 800b83a:	3314      	adds	r3, #20
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d917      	bls.n	800b872 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800b842:	4a49      	ldr	r2, [pc, #292]	; (800b968 <etharp_query+0x274>)
 800b844:	7c7b      	ldrb	r3, [r7, #17]
 800b846:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800b848:	7c7a      	ldrb	r2, [r7, #17]
 800b84a:	4613      	mov	r3, r2
 800b84c:	005b      	lsls	r3, r3, #1
 800b84e:	4413      	add	r3, r2
 800b850:	00db      	lsls	r3, r3, #3
 800b852:	3308      	adds	r3, #8
 800b854:	4a41      	ldr	r2, [pc, #260]	; (800b95c <etharp_query+0x268>)
 800b856:	4413      	add	r3, r2
 800b858:	3304      	adds	r3, #4
 800b85a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b85e:	9200      	str	r2, [sp, #0]
 800b860:	697a      	ldr	r2, [r7, #20]
 800b862:	6879      	ldr	r1, [r7, #4]
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	f001 fc75 	bl	800d154 <ethernet_output>
 800b86a:	4603      	mov	r3, r0
 800b86c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b870:	e067      	b.n	800b942 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b872:	7c7a      	ldrb	r2, [r7, #17]
 800b874:	4939      	ldr	r1, [pc, #228]	; (800b95c <etharp_query+0x268>)
 800b876:	4613      	mov	r3, r2
 800b878:	005b      	lsls	r3, r3, #1
 800b87a:	4413      	add	r3, r2
 800b87c:	00db      	lsls	r3, r3, #3
 800b87e:	440b      	add	r3, r1
 800b880:	3314      	adds	r3, #20
 800b882:	781b      	ldrb	r3, [r3, #0]
 800b884:	2b01      	cmp	r3, #1
 800b886:	d15c      	bne.n	800b942 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800b888:	2300      	movs	r3, #0
 800b88a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b890:	e01c      	b.n	800b8cc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800b892:	69fb      	ldr	r3, [r7, #28]
 800b894:	895a      	ldrh	r2, [r3, #10]
 800b896:	69fb      	ldr	r3, [r7, #28]
 800b898:	891b      	ldrh	r3, [r3, #8]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d10a      	bne.n	800b8b4 <etharp_query+0x1c0>
 800b89e:	69fb      	ldr	r3, [r7, #28]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d006      	beq.n	800b8b4 <etharp_query+0x1c0>
 800b8a6:	4b2a      	ldr	r3, [pc, #168]	; (800b950 <etharp_query+0x25c>)
 800b8a8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800b8ac:	492f      	ldr	r1, [pc, #188]	; (800b96c <etharp_query+0x278>)
 800b8ae:	482a      	ldr	r0, [pc, #168]	; (800b958 <etharp_query+0x264>)
 800b8b0:	f001 fce2 	bl	800d278 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800b8b4:	69fb      	ldr	r3, [r7, #28]
 800b8b6:	7b1b      	ldrb	r3, [r3, #12]
 800b8b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d002      	beq.n	800b8c6 <etharp_query+0x1d2>
        copy_needed = 1;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	61bb      	str	r3, [r7, #24]
        break;
 800b8c4:	e005      	b.n	800b8d2 <etharp_query+0x1de>
      }
      p = p->next;
 800b8c6:	69fb      	ldr	r3, [r7, #28]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b8cc:	69fb      	ldr	r3, [r7, #28]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d1df      	bne.n	800b892 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800b8d2:	69bb      	ldr	r3, [r7, #24]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d007      	beq.n	800b8e8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	f44f 7120 	mov.w	r1, #640	; 0x280
 800b8de:	200e      	movs	r0, #14
 800b8e0:	f7f9 fd28 	bl	8005334 <pbuf_clone>
 800b8e4:	61f8      	str	r0, [r7, #28]
 800b8e6:	e004      	b.n	800b8f2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800b8ec:	69f8      	ldr	r0, [r7, #28]
 800b8ee:	f7f9 fb65 	bl	8004fbc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800b8f2:	69fb      	ldr	r3, [r7, #28]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d021      	beq.n	800b93c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800b8f8:	7c7a      	ldrb	r2, [r7, #17]
 800b8fa:	4918      	ldr	r1, [pc, #96]	; (800b95c <etharp_query+0x268>)
 800b8fc:	4613      	mov	r3, r2
 800b8fe:	005b      	lsls	r3, r3, #1
 800b900:	4413      	add	r3, r2
 800b902:	00db      	lsls	r3, r3, #3
 800b904:	440b      	add	r3, r1
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d00a      	beq.n	800b922 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800b90c:	7c7a      	ldrb	r2, [r7, #17]
 800b90e:	4913      	ldr	r1, [pc, #76]	; (800b95c <etharp_query+0x268>)
 800b910:	4613      	mov	r3, r2
 800b912:	005b      	lsls	r3, r3, #1
 800b914:	4413      	add	r3, r2
 800b916:	00db      	lsls	r3, r3, #3
 800b918:	440b      	add	r3, r1
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7f9 faad 	bl	8004e7c <pbuf_free>
      }
      arp_table[i].q = p;
 800b922:	7c7a      	ldrb	r2, [r7, #17]
 800b924:	490d      	ldr	r1, [pc, #52]	; (800b95c <etharp_query+0x268>)
 800b926:	4613      	mov	r3, r2
 800b928:	005b      	lsls	r3, r3, #1
 800b92a:	4413      	add	r3, r2
 800b92c:	00db      	lsls	r3, r3, #3
 800b92e:	440b      	add	r3, r1
 800b930:	69fa      	ldr	r2, [r7, #28]
 800b932:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800b934:	2300      	movs	r3, #0
 800b936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b93a:	e002      	b.n	800b942 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800b93c:	23ff      	movs	r3, #255	; 0xff
 800b93e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800b942:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b946:	4618      	mov	r0, r3
 800b948:	3728      	adds	r7, #40	; 0x28
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	0801064c 	.word	0x0801064c
 800b954:	080107f8 	.word	0x080107f8
 800b958:	080106c4 	.word	0x080106c4
 800b95c:	2000b464 	.word	0x2000b464
 800b960:	08010808 	.word	0x08010808
 800b964:	080107ec 	.word	0x080107ec
 800b968:	2000b554 	.word	0x2000b554
 800b96c:	08010830 	.word	0x08010830

0800b970 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b08a      	sub	sp, #40	; 0x28
 800b974:	af02      	add	r7, sp, #8
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	607a      	str	r2, [r7, #4]
 800b97c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800b97e:	2300      	movs	r3, #0
 800b980:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d106      	bne.n	800b996 <etharp_raw+0x26>
 800b988:	4b3a      	ldr	r3, [pc, #232]	; (800ba74 <etharp_raw+0x104>)
 800b98a:	f240 4257 	movw	r2, #1111	; 0x457
 800b98e:	493a      	ldr	r1, [pc, #232]	; (800ba78 <etharp_raw+0x108>)
 800b990:	483a      	ldr	r0, [pc, #232]	; (800ba7c <etharp_raw+0x10c>)
 800b992:	f001 fc71 	bl	800d278 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800b996:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b99a:	211c      	movs	r1, #28
 800b99c:	200e      	movs	r0, #14
 800b99e:	f7f8 ff89 	bl	80048b4 <pbuf_alloc>
 800b9a2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800b9a4:	69bb      	ldr	r3, [r7, #24]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d102      	bne.n	800b9b0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800b9aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b9ae:	e05d      	b.n	800ba6c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800b9b0:	69bb      	ldr	r3, [r7, #24]
 800b9b2:	895b      	ldrh	r3, [r3, #10]
 800b9b4:	2b1b      	cmp	r3, #27
 800b9b6:	d806      	bhi.n	800b9c6 <etharp_raw+0x56>
 800b9b8:	4b2e      	ldr	r3, [pc, #184]	; (800ba74 <etharp_raw+0x104>)
 800b9ba:	f240 4262 	movw	r2, #1122	; 0x462
 800b9be:	4930      	ldr	r1, [pc, #192]	; (800ba80 <etharp_raw+0x110>)
 800b9c0:	482e      	ldr	r0, [pc, #184]	; (800ba7c <etharp_raw+0x10c>)
 800b9c2:	f001 fc59 	bl	800d278 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800b9c6:	69bb      	ldr	r3, [r7, #24]
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800b9cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7f7 fef6 	bl	80037c0 <lwip_htons>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b9e2:	2b06      	cmp	r3, #6
 800b9e4:	d006      	beq.n	800b9f4 <etharp_raw+0x84>
 800b9e6:	4b23      	ldr	r3, [pc, #140]	; (800ba74 <etharp_raw+0x104>)
 800b9e8:	f240 4269 	movw	r2, #1129	; 0x469
 800b9ec:	4925      	ldr	r1, [pc, #148]	; (800ba84 <etharp_raw+0x114>)
 800b9ee:	4823      	ldr	r0, [pc, #140]	; (800ba7c <etharp_raw+0x10c>)
 800b9f0:	f001 fc42 	bl	800d278 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	3308      	adds	r3, #8
 800b9f8:	2206      	movs	r2, #6
 800b9fa:	6839      	ldr	r1, [r7, #0]
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f001 fc25 	bl	800d24c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	3312      	adds	r3, #18
 800ba06:	2206      	movs	r2, #6
 800ba08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f001 fc1e 	bl	800d24c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	330e      	adds	r3, #14
 800ba14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba16:	6812      	ldr	r2, [r2, #0]
 800ba18:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	3318      	adds	r3, #24
 800ba1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba20:	6812      	ldr	r2, [r2, #0]
 800ba22:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	2200      	movs	r2, #0
 800ba28:	701a      	strb	r2, [r3, #0]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f042 0201 	orr.w	r2, r2, #1
 800ba30:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	2200      	movs	r2, #0
 800ba36:	f042 0208 	orr.w	r2, r2, #8
 800ba3a:	709a      	strb	r2, [r3, #2]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	2206      	movs	r2, #6
 800ba44:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	2204      	movs	r2, #4
 800ba4a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ba4c:	f640 0306 	movw	r3, #2054	; 0x806
 800ba50:	9300      	str	r3, [sp, #0]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	68ba      	ldr	r2, [r7, #8]
 800ba56:	69b9      	ldr	r1, [r7, #24]
 800ba58:	68f8      	ldr	r0, [r7, #12]
 800ba5a:	f001 fb7b 	bl	800d154 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ba5e:	69b8      	ldr	r0, [r7, #24]
 800ba60:	f7f9 fa0c 	bl	8004e7c <pbuf_free>
  p = NULL;
 800ba64:	2300      	movs	r3, #0
 800ba66:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800ba68:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3720      	adds	r7, #32
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	0801064c 	.word	0x0801064c
 800ba78:	0801079c 	.word	0x0801079c
 800ba7c:	080106c4 	.word	0x080106c4
 800ba80:	0801084c 	.word	0x0801084c
 800ba84:	08010880 	.word	0x08010880

0800ba88 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b088      	sub	sp, #32
 800ba8c:	af04      	add	r7, sp, #16
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800baa4:	2201      	movs	r2, #1
 800baa6:	9203      	str	r2, [sp, #12]
 800baa8:	68ba      	ldr	r2, [r7, #8]
 800baaa:	9202      	str	r2, [sp, #8]
 800baac:	4a06      	ldr	r2, [pc, #24]	; (800bac8 <etharp_request_dst+0x40>)
 800baae:	9201      	str	r2, [sp, #4]
 800bab0:	9300      	str	r3, [sp, #0]
 800bab2:	4603      	mov	r3, r0
 800bab4:	687a      	ldr	r2, [r7, #4]
 800bab6:	68f8      	ldr	r0, [r7, #12]
 800bab8:	f7ff ff5a 	bl	800b970 <etharp_raw>
 800babc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3710      	adds	r7, #16
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	08010e08 	.word	0x08010e08

0800bacc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800bad6:	4a05      	ldr	r2, [pc, #20]	; (800baec <etharp_request+0x20>)
 800bad8:	6839      	ldr	r1, [r7, #0]
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f7ff ffd4 	bl	800ba88 <etharp_request_dst>
 800bae0:	4603      	mov	r3, r0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3708      	adds	r7, #8
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	08010e00 	.word	0x08010e00

0800baf0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b08e      	sub	sp, #56	; 0x38
 800baf4:	af04      	add	r7, sp, #16
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800bafa:	4b79      	ldr	r3, [pc, #484]	; (800bce0 <icmp_input+0x1f0>)
 800bafc:	689b      	ldr	r3, [r3, #8]
 800bafe:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800bb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	f003 030f 	and.w	r3, r3, #15
 800bb08:	b2db      	uxtb	r3, r3
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800bb10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb12:	2b13      	cmp	r3, #19
 800bb14:	f240 80cd 	bls.w	800bcb2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	895b      	ldrh	r3, [r3, #10]
 800bb1c:	2b03      	cmp	r3, #3
 800bb1e:	f240 80ca 	bls.w	800bcb6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800bb2c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	f000 80b7 	beq.w	800bca4 <icmp_input+0x1b4>
 800bb36:	2b08      	cmp	r3, #8
 800bb38:	f040 80b7 	bne.w	800bcaa <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800bb3c:	4b69      	ldr	r3, [pc, #420]	; (800bce4 <icmp_input+0x1f4>)
 800bb3e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bb40:	4b67      	ldr	r3, [pc, #412]	; (800bce0 <icmp_input+0x1f0>)
 800bb42:	695b      	ldr	r3, [r3, #20]
 800bb44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb48:	2be0      	cmp	r3, #224	; 0xe0
 800bb4a:	f000 80bb 	beq.w	800bcc4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800bb4e:	4b64      	ldr	r3, [pc, #400]	; (800bce0 <icmp_input+0x1f0>)
 800bb50:	695b      	ldr	r3, [r3, #20]
 800bb52:	4a63      	ldr	r2, [pc, #396]	; (800bce0 <icmp_input+0x1f0>)
 800bb54:	6812      	ldr	r2, [r2, #0]
 800bb56:	4611      	mov	r1, r2
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f000 fbed 	bl	800c338 <ip4_addr_isbroadcast_u32>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	f040 80b1 	bne.w	800bcc8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	891b      	ldrh	r3, [r3, #8]
 800bb6a:	2b07      	cmp	r3, #7
 800bb6c:	f240 80a5 	bls.w	800bcba <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800bb70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb72:	330e      	adds	r3, #14
 800bb74:	4619      	mov	r1, r3
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f7f9 f8ea 	bl	8004d50 <pbuf_add_header>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d04b      	beq.n	800bc1a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	891a      	ldrh	r2, [r3, #8]
 800bb86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb88:	4413      	add	r3, r2
 800bb8a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	891b      	ldrh	r3, [r3, #8]
 800bb90:	8b7a      	ldrh	r2, [r7, #26]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	f0c0 809a 	bcc.w	800bccc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800bb98:	8b7b      	ldrh	r3, [r7, #26]
 800bb9a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bb9e:	4619      	mov	r1, r3
 800bba0:	200e      	movs	r0, #14
 800bba2:	f7f8 fe87 	bl	80048b4 <pbuf_alloc>
 800bba6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	f000 8090 	beq.w	800bcd0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	895b      	ldrh	r3, [r3, #10]
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bbb8:	3308      	adds	r3, #8
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d203      	bcs.n	800bbc6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800bbbe:	6978      	ldr	r0, [r7, #20]
 800bbc0:	f7f9 f95c 	bl	8004e7c <pbuf_free>
          goto icmperr;
 800bbc4:	e085      	b.n	800bcd2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bbcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f001 fb3c 	bl	800d24c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800bbd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	6978      	ldr	r0, [r7, #20]
 800bbda:	f7f9 f8c9 	bl	8004d70 <pbuf_remove_header>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d009      	beq.n	800bbf8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800bbe4:	4b40      	ldr	r3, [pc, #256]	; (800bce8 <icmp_input+0x1f8>)
 800bbe6:	22b6      	movs	r2, #182	; 0xb6
 800bbe8:	4940      	ldr	r1, [pc, #256]	; (800bcec <icmp_input+0x1fc>)
 800bbea:	4841      	ldr	r0, [pc, #260]	; (800bcf0 <icmp_input+0x200>)
 800bbec:	f001 fb44 	bl	800d278 <iprintf>
          pbuf_free(r);
 800bbf0:	6978      	ldr	r0, [r7, #20]
 800bbf2:	f7f9 f943 	bl	8004e7c <pbuf_free>
          goto icmperr;
 800bbf6:	e06c      	b.n	800bcd2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800bbf8:	6879      	ldr	r1, [r7, #4]
 800bbfa:	6978      	ldr	r0, [r7, #20]
 800bbfc:	f7f9 fa56 	bl	80050ac <pbuf_copy>
 800bc00:	4603      	mov	r3, r0
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d003      	beq.n	800bc0e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800bc06:	6978      	ldr	r0, [r7, #20]
 800bc08:	f7f9 f938 	bl	8004e7c <pbuf_free>
          goto icmperr;
 800bc0c:	e061      	b.n	800bcd2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f7f9 f934 	bl	8004e7c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	607b      	str	r3, [r7, #4]
 800bc18:	e00f      	b.n	800bc3a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800bc1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc1c:	330e      	adds	r3, #14
 800bc1e:	4619      	mov	r1, r3
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f7f9 f8a5 	bl	8004d70 <pbuf_remove_header>
 800bc26:	4603      	mov	r3, r0
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d006      	beq.n	800bc3a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800bc2c:	4b2e      	ldr	r3, [pc, #184]	; (800bce8 <icmp_input+0x1f8>)
 800bc2e:	22c7      	movs	r2, #199	; 0xc7
 800bc30:	4930      	ldr	r1, [pc, #192]	; (800bcf4 <icmp_input+0x204>)
 800bc32:	482f      	ldr	r0, [pc, #188]	; (800bcf0 <icmp_input+0x200>)
 800bc34:	f001 fb20 	bl	800d278 <iprintf>
          goto icmperr;
 800bc38:	e04b      	b.n	800bcd2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800bc40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc42:	4619      	mov	r1, r3
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f7f9 f883 	bl	8004d50 <pbuf_add_header>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d12b      	bne.n	800bca8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	685b      	ldr	r3, [r3, #4]
 800bc54:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800bc56:	69fb      	ldr	r3, [r7, #28]
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800bc5e:	4b20      	ldr	r3, [pc, #128]	; (800bce0 <icmp_input+0x1f0>)
 800bc60:	691a      	ldr	r2, [r3, #16]
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	709a      	strb	r2, [r3, #2]
 800bc72:	2200      	movs	r2, #0
 800bc74:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	22ff      	movs	r2, #255	; 0xff
 800bc7a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	729a      	strb	r2, [r3, #10]
 800bc82:	2200      	movs	r2, #0
 800bc84:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	9302      	str	r3, [sp, #8]
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	9301      	str	r3, [sp, #4]
 800bc8e:	2300      	movs	r3, #0
 800bc90:	9300      	str	r3, [sp, #0]
 800bc92:	23ff      	movs	r3, #255	; 0xff
 800bc94:	2200      	movs	r2, #0
 800bc96:	69f9      	ldr	r1, [r7, #28]
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f000 fa75 	bl	800c188 <ip4_output_if>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800bca2:	e001      	b.n	800bca8 <icmp_input+0x1b8>
      break;
 800bca4:	bf00      	nop
 800bca6:	e000      	b.n	800bcaa <icmp_input+0x1ba>
      break;
 800bca8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f7f9 f8e6 	bl	8004e7c <pbuf_free>
  return;
 800bcb0:	e013      	b.n	800bcda <icmp_input+0x1ea>
    goto lenerr;
 800bcb2:	bf00      	nop
 800bcb4:	e002      	b.n	800bcbc <icmp_input+0x1cc>
    goto lenerr;
 800bcb6:	bf00      	nop
 800bcb8:	e000      	b.n	800bcbc <icmp_input+0x1cc>
        goto lenerr;
 800bcba:	bf00      	nop
lenerr:
  pbuf_free(p);
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f7f9 f8dd 	bl	8004e7c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800bcc2:	e00a      	b.n	800bcda <icmp_input+0x1ea>
        goto icmperr;
 800bcc4:	bf00      	nop
 800bcc6:	e004      	b.n	800bcd2 <icmp_input+0x1e2>
        goto icmperr;
 800bcc8:	bf00      	nop
 800bcca:	e002      	b.n	800bcd2 <icmp_input+0x1e2>
          goto icmperr;
 800bccc:	bf00      	nop
 800bcce:	e000      	b.n	800bcd2 <icmp_input+0x1e2>
          goto icmperr;
 800bcd0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f7f9 f8d2 	bl	8004e7c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800bcd8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800bcda:	3728      	adds	r7, #40	; 0x28
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	20004cd4 	.word	0x20004cd4
 800bce4:	20004ce8 	.word	0x20004ce8
 800bce8:	080108c4 	.word	0x080108c4
 800bcec:	080108fc 	.word	0x080108fc
 800bcf0:	08010934 	.word	0x08010934
 800bcf4:	0801095c 	.word	0x0801095c

0800bcf8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	460b      	mov	r3, r1
 800bd02:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800bd04:	78fb      	ldrb	r3, [r7, #3]
 800bd06:	461a      	mov	r2, r3
 800bd08:	2103      	movs	r1, #3
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f000 f814 	bl	800bd38 <icmp_send_response>
}
 800bd10:	bf00      	nop
 800bd12:	3708      	adds	r7, #8
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	460b      	mov	r3, r1
 800bd22:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800bd24:	78fb      	ldrb	r3, [r7, #3]
 800bd26:	461a      	mov	r2, r3
 800bd28:	210b      	movs	r1, #11
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 f804 	bl	800bd38 <icmp_send_response>
}
 800bd30:	bf00      	nop
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b08c      	sub	sp, #48	; 0x30
 800bd3c:	af04      	add	r7, sp, #16
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	460b      	mov	r3, r1
 800bd42:	70fb      	strb	r3, [r7, #3]
 800bd44:	4613      	mov	r3, r2
 800bd46:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800bd48:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bd4c:	2124      	movs	r1, #36	; 0x24
 800bd4e:	2022      	movs	r0, #34	; 0x22
 800bd50:	f7f8 fdb0 	bl	80048b4 <pbuf_alloc>
 800bd54:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800bd56:	69fb      	ldr	r3, [r7, #28]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d04c      	beq.n	800bdf6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800bd5c:	69fb      	ldr	r3, [r7, #28]
 800bd5e:	895b      	ldrh	r3, [r3, #10]
 800bd60:	2b23      	cmp	r3, #35	; 0x23
 800bd62:	d806      	bhi.n	800bd72 <icmp_send_response+0x3a>
 800bd64:	4b26      	ldr	r3, [pc, #152]	; (800be00 <icmp_send_response+0xc8>)
 800bd66:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800bd6a:	4926      	ldr	r1, [pc, #152]	; (800be04 <icmp_send_response+0xcc>)
 800bd6c:	4826      	ldr	r0, [pc, #152]	; (800be08 <icmp_send_response+0xd0>)
 800bd6e:	f001 fa83 	bl	800d278 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800bd78:	69fb      	ldr	r3, [r7, #28]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	78fa      	ldrb	r2, [r7, #3]
 800bd82:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	78ba      	ldrb	r2, [r7, #2]
 800bd88:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	711a      	strb	r2, [r3, #4]
 800bd90:	2200      	movs	r2, #0
 800bd92:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	2200      	movs	r2, #0
 800bd98:	719a      	strb	r2, [r3, #6]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800bd9e:	69fb      	ldr	r3, [r7, #28]
 800bda0:	685b      	ldr	r3, [r3, #4]
 800bda2:	f103 0008 	add.w	r0, r3, #8
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	221c      	movs	r2, #28
 800bdac:	4619      	mov	r1, r3
 800bdae:	f001 fa4d 	bl	800d24c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800bdb2:	69bb      	ldr	r3, [r7, #24]
 800bdb4:	68db      	ldr	r3, [r3, #12]
 800bdb6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800bdb8:	f107 030c 	add.w	r3, r7, #12
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f000 f825 	bl	800be0c <ip4_route>
 800bdc2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d011      	beq.n	800bdee <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	709a      	strb	r2, [r3, #2]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800bdd4:	f107 020c 	add.w	r2, r7, #12
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	9302      	str	r3, [sp, #8]
 800bddc:	2301      	movs	r3, #1
 800bdde:	9301      	str	r3, [sp, #4]
 800bde0:	2300      	movs	r3, #0
 800bde2:	9300      	str	r3, [sp, #0]
 800bde4:	23ff      	movs	r3, #255	; 0xff
 800bde6:	2100      	movs	r1, #0
 800bde8:	69f8      	ldr	r0, [r7, #28]
 800bdea:	f000 f9cd 	bl	800c188 <ip4_output_if>
  }
  pbuf_free(q);
 800bdee:	69f8      	ldr	r0, [r7, #28]
 800bdf0:	f7f9 f844 	bl	8004e7c <pbuf_free>
 800bdf4:	e000      	b.n	800bdf8 <icmp_send_response+0xc0>
    return;
 800bdf6:	bf00      	nop
}
 800bdf8:	3720      	adds	r7, #32
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	080108c4 	.word	0x080108c4
 800be04:	08010990 	.word	0x08010990
 800be08:	08010934 	.word	0x08010934

0800be0c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b085      	sub	sp, #20
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800be14:	4b33      	ldr	r3, [pc, #204]	; (800bee4 <ip4_route+0xd8>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	60fb      	str	r3, [r7, #12]
 800be1a:	e036      	b.n	800be8a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800be22:	f003 0301 	and.w	r3, r3, #1
 800be26:	b2db      	uxtb	r3, r3
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d02b      	beq.n	800be84 <ip4_route+0x78>
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800be32:	089b      	lsrs	r3, r3, #2
 800be34:	f003 0301 	and.w	r3, r3, #1
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d022      	beq.n	800be84 <ip4_route+0x78>
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	3304      	adds	r3, #4
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d01d      	beq.n	800be84 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	3304      	adds	r3, #4
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	405a      	eors	r2, r3
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	3308      	adds	r3, #8
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4013      	ands	r3, r2
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d101      	bne.n	800be64 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	e038      	b.n	800bed6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800be6a:	f003 0302 	and.w	r3, r3, #2
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d108      	bne.n	800be84 <ip4_route+0x78>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	330c      	adds	r3, #12
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d101      	bne.n	800be84 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	e028      	b.n	800bed6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	60fb      	str	r3, [r7, #12]
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d1c5      	bne.n	800be1c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800be90:	4b15      	ldr	r3, [pc, #84]	; (800bee8 <ip4_route+0xdc>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d01a      	beq.n	800bece <ip4_route+0xc2>
 800be98:	4b13      	ldr	r3, [pc, #76]	; (800bee8 <ip4_route+0xdc>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bea0:	f003 0301 	and.w	r3, r3, #1
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d012      	beq.n	800bece <ip4_route+0xc2>
 800bea8:	4b0f      	ldr	r3, [pc, #60]	; (800bee8 <ip4_route+0xdc>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800beb0:	f003 0304 	and.w	r3, r3, #4
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d00a      	beq.n	800bece <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800beb8:	4b0b      	ldr	r3, [pc, #44]	; (800bee8 <ip4_route+0xdc>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	3304      	adds	r3, #4
 800bebe:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d004      	beq.n	800bece <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	2b7f      	cmp	r3, #127	; 0x7f
 800becc:	d101      	bne.n	800bed2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800bece:	2300      	movs	r3, #0
 800bed0:	e001      	b.n	800bed6 <ip4_route+0xca>
  }

  return netif_default;
 800bed2:	4b05      	ldr	r3, [pc, #20]	; (800bee8 <ip4_route+0xdc>)
 800bed4:	681b      	ldr	r3, [r3, #0]
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3714      	adds	r7, #20
 800beda:	46bd      	mov	sp, r7
 800bedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee0:	4770      	bx	lr
 800bee2:	bf00      	nop
 800bee4:	2000b3f8 	.word	0x2000b3f8
 800bee8:	2000b3fc 	.word	0x2000b3fc

0800beec <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b082      	sub	sp, #8
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800befa:	f003 0301 	and.w	r3, r3, #1
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d016      	beq.n	800bf32 <ip4_input_accept+0x46>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	3304      	adds	r3, #4
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d011      	beq.n	800bf32 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800bf0e:	4b0b      	ldr	r3, [pc, #44]	; (800bf3c <ip4_input_accept+0x50>)
 800bf10:	695a      	ldr	r2, [r3, #20]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	3304      	adds	r3, #4
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d008      	beq.n	800bf2e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800bf1c:	4b07      	ldr	r3, [pc, #28]	; (800bf3c <ip4_input_accept+0x50>)
 800bf1e:	695b      	ldr	r3, [r3, #20]
 800bf20:	6879      	ldr	r1, [r7, #4]
 800bf22:	4618      	mov	r0, r3
 800bf24:	f000 fa08 	bl	800c338 <ip4_addr_isbroadcast_u32>
 800bf28:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d001      	beq.n	800bf32 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	e000      	b.n	800bf34 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800bf32:	2300      	movs	r3, #0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3708      	adds	r7, #8
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	20004cd4 	.word	0x20004cd4

0800bf40 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b086      	sub	sp, #24
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	091b      	lsrs	r3, r3, #4
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	2b04      	cmp	r3, #4
 800bf5a:	d004      	beq.n	800bf66 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f7f8 ff8d 	bl	8004e7c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800bf62:	2300      	movs	r3, #0
 800bf64:	e107      	b.n	800c176 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	f003 030f 	and.w	r3, r3, #15
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	885b      	ldrh	r3, [r3, #2]
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7f7 fc1f 	bl	80037c0 <lwip_htons>
 800bf82:	4603      	mov	r3, r0
 800bf84:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	891b      	ldrh	r3, [r3, #8]
 800bf8a:	89ba      	ldrh	r2, [r7, #12]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d204      	bcs.n	800bf9a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800bf90:	89bb      	ldrh	r3, [r7, #12]
 800bf92:	4619      	mov	r1, r3
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f7f8 fdeb 	bl	8004b70 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	895b      	ldrh	r3, [r3, #10]
 800bf9e:	89fa      	ldrh	r2, [r7, #14]
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d807      	bhi.n	800bfb4 <ip4_input+0x74>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	891b      	ldrh	r3, [r3, #8]
 800bfa8:	89ba      	ldrh	r2, [r7, #12]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d802      	bhi.n	800bfb4 <ip4_input+0x74>
 800bfae:	89fb      	ldrh	r3, [r7, #14]
 800bfb0:	2b13      	cmp	r3, #19
 800bfb2:	d804      	bhi.n	800bfbe <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f7f8 ff61 	bl	8004e7c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	e0db      	b.n	800c176 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	691b      	ldr	r3, [r3, #16]
 800bfc2:	4a6f      	ldr	r2, [pc, #444]	; (800c180 <ip4_input+0x240>)
 800bfc4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	68db      	ldr	r3, [r3, #12]
 800bfca:	4a6d      	ldr	r2, [pc, #436]	; (800c180 <ip4_input+0x240>)
 800bfcc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bfce:	4b6c      	ldr	r3, [pc, #432]	; (800c180 <ip4_input+0x240>)
 800bfd0:	695b      	ldr	r3, [r3, #20]
 800bfd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bfd6:	2be0      	cmp	r3, #224	; 0xe0
 800bfd8:	d112      	bne.n	800c000 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bfe0:	f003 0301 	and.w	r3, r3, #1
 800bfe4:	b2db      	uxtb	r3, r3
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d007      	beq.n	800bffa <ip4_input+0xba>
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	3304      	adds	r3, #4
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d002      	beq.n	800bffa <ip4_input+0xba>
      netif = inp;
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	613b      	str	r3, [r7, #16]
 800bff8:	e02a      	b.n	800c050 <ip4_input+0x110>
    } else {
      netif = NULL;
 800bffa:	2300      	movs	r3, #0
 800bffc:	613b      	str	r3, [r7, #16]
 800bffe:	e027      	b.n	800c050 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800c000:	6838      	ldr	r0, [r7, #0]
 800c002:	f7ff ff73 	bl	800beec <ip4_input_accept>
 800c006:	4603      	mov	r3, r0
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d002      	beq.n	800c012 <ip4_input+0xd2>
      netif = inp;
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	613b      	str	r3, [r7, #16]
 800c010:	e01e      	b.n	800c050 <ip4_input+0x110>
    } else {
      netif = NULL;
 800c012:	2300      	movs	r3, #0
 800c014:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800c016:	4b5a      	ldr	r3, [pc, #360]	; (800c180 <ip4_input+0x240>)
 800c018:	695b      	ldr	r3, [r3, #20]
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	2b7f      	cmp	r3, #127	; 0x7f
 800c01e:	d017      	beq.n	800c050 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800c020:	4b58      	ldr	r3, [pc, #352]	; (800c184 <ip4_input+0x244>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	613b      	str	r3, [r7, #16]
 800c026:	e00e      	b.n	800c046 <ip4_input+0x106>
          if (netif == inp) {
 800c028:	693a      	ldr	r2, [r7, #16]
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d006      	beq.n	800c03e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800c030:	6938      	ldr	r0, [r7, #16]
 800c032:	f7ff ff5b 	bl	800beec <ip4_input_accept>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d108      	bne.n	800c04e <ip4_input+0x10e>
 800c03c:	e000      	b.n	800c040 <ip4_input+0x100>
            continue;
 800c03e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	613b      	str	r3, [r7, #16]
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d1ed      	bne.n	800c028 <ip4_input+0xe8>
 800c04c:	e000      	b.n	800c050 <ip4_input+0x110>
            break;
 800c04e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c050:	4b4b      	ldr	r3, [pc, #300]	; (800c180 <ip4_input+0x240>)
 800c052:	691b      	ldr	r3, [r3, #16]
 800c054:	6839      	ldr	r1, [r7, #0]
 800c056:	4618      	mov	r0, r3
 800c058:	f000 f96e 	bl	800c338 <ip4_addr_isbroadcast_u32>
 800c05c:	4603      	mov	r3, r0
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d105      	bne.n	800c06e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800c062:	4b47      	ldr	r3, [pc, #284]	; (800c180 <ip4_input+0x240>)
 800c064:	691b      	ldr	r3, [r3, #16]
 800c066:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c06a:	2be0      	cmp	r3, #224	; 0xe0
 800c06c:	d104      	bne.n	800c078 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f7f8 ff04 	bl	8004e7c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800c074:	2300      	movs	r3, #0
 800c076:	e07e      	b.n	800c176 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d104      	bne.n	800c088 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f7f8 fefc 	bl	8004e7c <pbuf_free>
    return ERR_OK;
 800c084:	2300      	movs	r3, #0
 800c086:	e076      	b.n	800c176 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	88db      	ldrh	r3, [r3, #6]
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	461a      	mov	r2, r3
 800c090:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800c094:	4013      	ands	r3, r2
 800c096:	2b00      	cmp	r3, #0
 800c098:	d00b      	beq.n	800c0b2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f000 fc92 	bl	800c9c4 <ip4_reass>
 800c0a0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d101      	bne.n	800c0ac <ip4_input+0x16c>
      return ERR_OK;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	e064      	b.n	800c176 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800c0b2:	4a33      	ldr	r2, [pc, #204]	; (800c180 <ip4_input+0x240>)
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800c0b8:	4a31      	ldr	r2, [pc, #196]	; (800c180 <ip4_input+0x240>)
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800c0be:	4a30      	ldr	r2, [pc, #192]	; (800c180 <ip4_input+0x240>)
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	f003 030f 	and.w	r3, r3, #15
 800c0cc:	b2db      	uxtb	r3, r3
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	b2db      	uxtb	r3, r3
 800c0d2:	b29a      	uxth	r2, r3
 800c0d4:	4b2a      	ldr	r3, [pc, #168]	; (800c180 <ip4_input+0x240>)
 800c0d6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800c0d8:	89fb      	ldrh	r3, [r7, #14]
 800c0da:	4619      	mov	r1, r3
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f7f8 fe47 	bl	8004d70 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	7a5b      	ldrb	r3, [r3, #9]
 800c0e6:	2b11      	cmp	r3, #17
 800c0e8:	d006      	beq.n	800c0f8 <ip4_input+0x1b8>
 800c0ea:	2b11      	cmp	r3, #17
 800c0ec:	dc13      	bgt.n	800c116 <ip4_input+0x1d6>
 800c0ee:	2b01      	cmp	r3, #1
 800c0f0:	d00c      	beq.n	800c10c <ip4_input+0x1cc>
 800c0f2:	2b06      	cmp	r3, #6
 800c0f4:	d005      	beq.n	800c102 <ip4_input+0x1c2>
 800c0f6:	e00e      	b.n	800c116 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800c0f8:	6839      	ldr	r1, [r7, #0]
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f7fe fc68 	bl	800a9d0 <udp_input>
        break;
 800c100:	e026      	b.n	800c150 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800c102:	6839      	ldr	r1, [r7, #0]
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f7fa fce1 	bl	8006acc <tcp_input>
        break;
 800c10a:	e021      	b.n	800c150 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800c10c:	6839      	ldr	r1, [r7, #0]
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f7ff fcee 	bl	800baf0 <icmp_input>
        break;
 800c114:	e01c      	b.n	800c150 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c116:	4b1a      	ldr	r3, [pc, #104]	; (800c180 <ip4_input+0x240>)
 800c118:	695b      	ldr	r3, [r3, #20]
 800c11a:	6939      	ldr	r1, [r7, #16]
 800c11c:	4618      	mov	r0, r3
 800c11e:	f000 f90b 	bl	800c338 <ip4_addr_isbroadcast_u32>
 800c122:	4603      	mov	r3, r0
 800c124:	2b00      	cmp	r3, #0
 800c126:	d10f      	bne.n	800c148 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c128:	4b15      	ldr	r3, [pc, #84]	; (800c180 <ip4_input+0x240>)
 800c12a:	695b      	ldr	r3, [r3, #20]
 800c12c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c130:	2be0      	cmp	r3, #224	; 0xe0
 800c132:	d009      	beq.n	800c148 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800c134:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c138:	4619      	mov	r1, r3
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f7f8 fe8b 	bl	8004e56 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800c140:	2102      	movs	r1, #2
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f7ff fdd8 	bl	800bcf8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f7f8 fe97 	bl	8004e7c <pbuf_free>
        break;
 800c14e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800c150:	4b0b      	ldr	r3, [pc, #44]	; (800c180 <ip4_input+0x240>)
 800c152:	2200      	movs	r2, #0
 800c154:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800c156:	4b0a      	ldr	r3, [pc, #40]	; (800c180 <ip4_input+0x240>)
 800c158:	2200      	movs	r2, #0
 800c15a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800c15c:	4b08      	ldr	r3, [pc, #32]	; (800c180 <ip4_input+0x240>)
 800c15e:	2200      	movs	r2, #0
 800c160:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800c162:	4b07      	ldr	r3, [pc, #28]	; (800c180 <ip4_input+0x240>)
 800c164:	2200      	movs	r2, #0
 800c166:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800c168:	4b05      	ldr	r3, [pc, #20]	; (800c180 <ip4_input+0x240>)
 800c16a:	2200      	movs	r2, #0
 800c16c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800c16e:	4b04      	ldr	r3, [pc, #16]	; (800c180 <ip4_input+0x240>)
 800c170:	2200      	movs	r2, #0
 800c172:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800c174:	2300      	movs	r3, #0
}
 800c176:	4618      	mov	r0, r3
 800c178:	3718      	adds	r7, #24
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	20004cd4 	.word	0x20004cd4
 800c184:	2000b3f8 	.word	0x2000b3f8

0800c188 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b08a      	sub	sp, #40	; 0x28
 800c18c:	af04      	add	r7, sp, #16
 800c18e:	60f8      	str	r0, [r7, #12]
 800c190:	60b9      	str	r1, [r7, #8]
 800c192:	607a      	str	r2, [r7, #4]
 800c194:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d009      	beq.n	800c1b4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d003      	beq.n	800c1ae <ip4_output_if+0x26>
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d102      	bne.n	800c1b4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800c1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b0:	3304      	adds	r3, #4
 800c1b2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800c1b4:	78fa      	ldrb	r2, [r7, #3]
 800c1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b8:	9302      	str	r3, [sp, #8]
 800c1ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c1be:	9301      	str	r3, [sp, #4]
 800c1c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c1c4:	9300      	str	r3, [sp, #0]
 800c1c6:	4613      	mov	r3, r2
 800c1c8:	687a      	ldr	r2, [r7, #4]
 800c1ca:	6979      	ldr	r1, [r7, #20]
 800c1cc:	68f8      	ldr	r0, [r7, #12]
 800c1ce:	f000 f805 	bl	800c1dc <ip4_output_if_src>
 800c1d2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3718      	adds	r7, #24
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b088      	sub	sp, #32
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	60f8      	str	r0, [r7, #12]
 800c1e4:	60b9      	str	r1, [r7, #8]
 800c1e6:	607a      	str	r2, [r7, #4]
 800c1e8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	7b9b      	ldrb	r3, [r3, #14]
 800c1ee:	2b01      	cmp	r3, #1
 800c1f0:	d006      	beq.n	800c200 <ip4_output_if_src+0x24>
 800c1f2:	4b4b      	ldr	r3, [pc, #300]	; (800c320 <ip4_output_if_src+0x144>)
 800c1f4:	f44f 7255 	mov.w	r2, #852	; 0x354
 800c1f8:	494a      	ldr	r1, [pc, #296]	; (800c324 <ip4_output_if_src+0x148>)
 800c1fa:	484b      	ldr	r0, [pc, #300]	; (800c328 <ip4_output_if_src+0x14c>)
 800c1fc:	f001 f83c 	bl	800d278 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d060      	beq.n	800c2c8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800c206:	2314      	movs	r3, #20
 800c208:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800c20a:	2114      	movs	r1, #20
 800c20c:	68f8      	ldr	r0, [r7, #12]
 800c20e:	f7f8 fd9f 	bl	8004d50 <pbuf_add_header>
 800c212:	4603      	mov	r3, r0
 800c214:	2b00      	cmp	r3, #0
 800c216:	d002      	beq.n	800c21e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c218:	f06f 0301 	mvn.w	r3, #1
 800c21c:	e07c      	b.n	800c318 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	895b      	ldrh	r3, [r3, #10]
 800c228:	2b13      	cmp	r3, #19
 800c22a:	d806      	bhi.n	800c23a <ip4_output_if_src+0x5e>
 800c22c:	4b3c      	ldr	r3, [pc, #240]	; (800c320 <ip4_output_if_src+0x144>)
 800c22e:	f44f 7262 	mov.w	r2, #904	; 0x388
 800c232:	493e      	ldr	r1, [pc, #248]	; (800c32c <ip4_output_if_src+0x150>)
 800c234:	483c      	ldr	r0, [pc, #240]	; (800c328 <ip4_output_if_src+0x14c>)
 800c236:	f001 f81f 	bl	800d278 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800c23a:	69fb      	ldr	r3, [r7, #28]
 800c23c:	78fa      	ldrb	r2, [r7, #3]
 800c23e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800c240:	69fb      	ldr	r3, [r7, #28]
 800c242:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c246:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	69fb      	ldr	r3, [r7, #28]
 800c24e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800c250:	8b7b      	ldrh	r3, [r7, #26]
 800c252:	089b      	lsrs	r3, r3, #2
 800c254:	b29b      	uxth	r3, r3
 800c256:	b2db      	uxtb	r3, r3
 800c258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c25c:	b2da      	uxtb	r2, r3
 800c25e:	69fb      	ldr	r3, [r7, #28]
 800c260:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800c262:	69fb      	ldr	r3, [r7, #28]
 800c264:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c268:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	891b      	ldrh	r3, [r3, #8]
 800c26e:	4618      	mov	r0, r3
 800c270:	f7f7 faa6 	bl	80037c0 <lwip_htons>
 800c274:	4603      	mov	r3, r0
 800c276:	461a      	mov	r2, r3
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800c27c:	69fb      	ldr	r3, [r7, #28]
 800c27e:	2200      	movs	r2, #0
 800c280:	719a      	strb	r2, [r3, #6]
 800c282:	2200      	movs	r2, #0
 800c284:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800c286:	4b2a      	ldr	r3, [pc, #168]	; (800c330 <ip4_output_if_src+0x154>)
 800c288:	881b      	ldrh	r3, [r3, #0]
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7f7 fa98 	bl	80037c0 <lwip_htons>
 800c290:	4603      	mov	r3, r0
 800c292:	461a      	mov	r2, r3
 800c294:	69fb      	ldr	r3, [r7, #28]
 800c296:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800c298:	4b25      	ldr	r3, [pc, #148]	; (800c330 <ip4_output_if_src+0x154>)
 800c29a:	881b      	ldrh	r3, [r3, #0]
 800c29c:	3301      	adds	r3, #1
 800c29e:	b29a      	uxth	r2, r3
 800c2a0:	4b23      	ldr	r3, [pc, #140]	; (800c330 <ip4_output_if_src+0x154>)
 800c2a2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d104      	bne.n	800c2b4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800c2aa:	4b22      	ldr	r3, [pc, #136]	; (800c334 <ip4_output_if_src+0x158>)
 800c2ac:	681a      	ldr	r2, [r3, #0]
 800c2ae:	69fb      	ldr	r3, [r7, #28]
 800c2b0:	60da      	str	r2, [r3, #12]
 800c2b2:	e003      	b.n	800c2bc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	681a      	ldr	r2, [r3, #0]
 800c2b8:	69fb      	ldr	r3, [r7, #28]
 800c2ba:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800c2bc:	69fb      	ldr	r3, [r7, #28]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	729a      	strb	r2, [r3, #10]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	72da      	strb	r2, [r3, #11]
 800c2c6:	e00f      	b.n	800c2e8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	895b      	ldrh	r3, [r3, #10]
 800c2cc:	2b13      	cmp	r3, #19
 800c2ce:	d802      	bhi.n	800c2d6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c2d0:	f06f 0301 	mvn.w	r3, #1
 800c2d4:	e020      	b.n	800c318 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	691b      	ldr	r3, [r3, #16]
 800c2e0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800c2e2:	f107 0314 	add.w	r3, r7, #20
 800c2e6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800c2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d00c      	beq.n	800c30a <ip4_output_if_src+0x12e>
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	891a      	ldrh	r2, [r3, #8]
 800c2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d906      	bls.n	800c30a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c300:	68f8      	ldr	r0, [r7, #12]
 800c302:	f000 fd53 	bl	800cdac <ip4_frag>
 800c306:	4603      	mov	r3, r0
 800c308:	e006      	b.n	800c318 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800c30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30c:	695b      	ldr	r3, [r3, #20]
 800c30e:	687a      	ldr	r2, [r7, #4]
 800c310:	68f9      	ldr	r1, [r7, #12]
 800c312:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c314:	4798      	blx	r3
 800c316:	4603      	mov	r3, r0
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3720      	adds	r7, #32
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	080109bc 	.word	0x080109bc
 800c324:	080109f0 	.word	0x080109f0
 800c328:	080109fc 	.word	0x080109fc
 800c32c:	08010a24 	.word	0x08010a24
 800c330:	2000b556 	.word	0x2000b556
 800c334:	08010dfc 	.word	0x08010dfc

0800c338 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800c338:	b480      	push	{r7}
 800c33a:	b085      	sub	sp, #20
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c34c:	d002      	beq.n	800c354 <ip4_addr_isbroadcast_u32+0x1c>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d101      	bne.n	800c358 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800c354:	2301      	movs	r3, #1
 800c356:	e02a      	b.n	800c3ae <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c35e:	f003 0302 	and.w	r3, r3, #2
 800c362:	2b00      	cmp	r3, #0
 800c364:	d101      	bne.n	800c36a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800c366:	2300      	movs	r3, #0
 800c368:	e021      	b.n	800c3ae <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	3304      	adds	r3, #4
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	429a      	cmp	r2, r3
 800c374:	d101      	bne.n	800c37a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800c376:	2300      	movs	r3, #0
 800c378:	e019      	b.n	800c3ae <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800c37a:	68fa      	ldr	r2, [r7, #12]
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	3304      	adds	r3, #4
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	405a      	eors	r2, r3
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	3308      	adds	r3, #8
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4013      	ands	r3, r2
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d10d      	bne.n	800c3ac <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	3308      	adds	r3, #8
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	43da      	mvns	r2, r3
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	3308      	adds	r3, #8
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d101      	bne.n	800c3ac <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	e000      	b.n	800c3ae <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800c3ac:	2300      	movs	r3, #0
  }
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3714      	adds	r7, #20
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr
	...

0800c3bc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800c3c6:	4b12      	ldr	r3, [pc, #72]	; (800c410 <ip_reass_tmr+0x54>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800c3cc:	e018      	b.n	800c400 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	7fdb      	ldrb	r3, [r3, #31]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d00b      	beq.n	800c3ee <ip_reass_tmr+0x32>
      r->timer--;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	7fdb      	ldrb	r3, [r3, #31]
 800c3da:	3b01      	subs	r3, #1
 800c3dc:	b2da      	uxtb	r2, r3
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	60fb      	str	r3, [r7, #12]
 800c3ec:	e008      	b.n	800c400 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800c3f8:	68b9      	ldr	r1, [r7, #8]
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f000 f80a 	bl	800c414 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d1e3      	bne.n	800c3ce <ip_reass_tmr+0x12>
    }
  }
}
 800c406:	bf00      	nop
 800c408:	bf00      	nop
 800c40a:	3710      	adds	r7, #16
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	2000b558 	.word	0x2000b558

0800c414 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b088      	sub	sp, #32
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800c41e:	2300      	movs	r3, #0
 800c420:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800c422:	683a      	ldr	r2, [r7, #0]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	429a      	cmp	r2, r3
 800c428:	d105      	bne.n	800c436 <ip_reass_free_complete_datagram+0x22>
 800c42a:	4b45      	ldr	r3, [pc, #276]	; (800c540 <ip_reass_free_complete_datagram+0x12c>)
 800c42c:	22ab      	movs	r2, #171	; 0xab
 800c42e:	4945      	ldr	r1, [pc, #276]	; (800c544 <ip_reass_free_complete_datagram+0x130>)
 800c430:	4845      	ldr	r0, [pc, #276]	; (800c548 <ip_reass_free_complete_datagram+0x134>)
 800c432:	f000 ff21 	bl	800d278 <iprintf>
  if (prev != NULL) {
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d00a      	beq.n	800c452 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	429a      	cmp	r2, r3
 800c444:	d005      	beq.n	800c452 <ip_reass_free_complete_datagram+0x3e>
 800c446:	4b3e      	ldr	r3, [pc, #248]	; (800c540 <ip_reass_free_complete_datagram+0x12c>)
 800c448:	22ad      	movs	r2, #173	; 0xad
 800c44a:	4940      	ldr	r1, [pc, #256]	; (800c54c <ip_reass_free_complete_datagram+0x138>)
 800c44c:	483e      	ldr	r0, [pc, #248]	; (800c548 <ip_reass_free_complete_datagram+0x134>)
 800c44e:	f000 ff13 	bl	800d278 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	685b      	ldr	r3, [r3, #4]
 800c456:	685b      	ldr	r3, [r3, #4]
 800c458:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	889b      	ldrh	r3, [r3, #4]
 800c45e:	b29b      	uxth	r3, r3
 800c460:	2b00      	cmp	r3, #0
 800c462:	d12a      	bne.n	800c4ba <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	685b      	ldr	r3, [r3, #4]
 800c468:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	681a      	ldr	r2, [r3, #0]
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c472:	69bb      	ldr	r3, [r7, #24]
 800c474:	6858      	ldr	r0, [r3, #4]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	3308      	adds	r3, #8
 800c47a:	2214      	movs	r2, #20
 800c47c:	4619      	mov	r1, r3
 800c47e:	f000 fee5 	bl	800d24c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c482:	2101      	movs	r1, #1
 800c484:	69b8      	ldr	r0, [r7, #24]
 800c486:	f7ff fc47 	bl	800bd18 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800c48a:	69b8      	ldr	r0, [r7, #24]
 800c48c:	f7f8 fd7e 	bl	8004f8c <pbuf_clen>
 800c490:	4603      	mov	r3, r0
 800c492:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c494:	8bfa      	ldrh	r2, [r7, #30]
 800c496:	8a7b      	ldrh	r3, [r7, #18]
 800c498:	4413      	add	r3, r2
 800c49a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c49e:	db05      	blt.n	800c4ac <ip_reass_free_complete_datagram+0x98>
 800c4a0:	4b27      	ldr	r3, [pc, #156]	; (800c540 <ip_reass_free_complete_datagram+0x12c>)
 800c4a2:	22bc      	movs	r2, #188	; 0xbc
 800c4a4:	492a      	ldr	r1, [pc, #168]	; (800c550 <ip_reass_free_complete_datagram+0x13c>)
 800c4a6:	4828      	ldr	r0, [pc, #160]	; (800c548 <ip_reass_free_complete_datagram+0x134>)
 800c4a8:	f000 fee6 	bl	800d278 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800c4ac:	8bfa      	ldrh	r2, [r7, #30]
 800c4ae:	8a7b      	ldrh	r3, [r7, #18]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800c4b4:	69b8      	ldr	r0, [r7, #24]
 800c4b6:	f7f8 fce1 	bl	8004e7c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800c4c0:	e01f      	b.n	800c502 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800c4c2:	69bb      	ldr	r3, [r7, #24]
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	617b      	str	r3, [r7, #20]
    pcur = p;
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800c4d2:	68f8      	ldr	r0, [r7, #12]
 800c4d4:	f7f8 fd5a 	bl	8004f8c <pbuf_clen>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c4dc:	8bfa      	ldrh	r2, [r7, #30]
 800c4de:	8a7b      	ldrh	r3, [r7, #18]
 800c4e0:	4413      	add	r3, r2
 800c4e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4e6:	db05      	blt.n	800c4f4 <ip_reass_free_complete_datagram+0xe0>
 800c4e8:	4b15      	ldr	r3, [pc, #84]	; (800c540 <ip_reass_free_complete_datagram+0x12c>)
 800c4ea:	22cc      	movs	r2, #204	; 0xcc
 800c4ec:	4918      	ldr	r1, [pc, #96]	; (800c550 <ip_reass_free_complete_datagram+0x13c>)
 800c4ee:	4816      	ldr	r0, [pc, #88]	; (800c548 <ip_reass_free_complete_datagram+0x134>)
 800c4f0:	f000 fec2 	bl	800d278 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800c4f4:	8bfa      	ldrh	r2, [r7, #30]
 800c4f6:	8a7b      	ldrh	r3, [r7, #18]
 800c4f8:	4413      	add	r3, r2
 800c4fa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800c4fc:	68f8      	ldr	r0, [r7, #12]
 800c4fe:	f7f8 fcbd 	bl	8004e7c <pbuf_free>
  while (p != NULL) {
 800c502:	69bb      	ldr	r3, [r7, #24]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d1dc      	bne.n	800c4c2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800c508:	6839      	ldr	r1, [r7, #0]
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 f8c2 	bl	800c694 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800c510:	4b10      	ldr	r3, [pc, #64]	; (800c554 <ip_reass_free_complete_datagram+0x140>)
 800c512:	881b      	ldrh	r3, [r3, #0]
 800c514:	8bfa      	ldrh	r2, [r7, #30]
 800c516:	429a      	cmp	r2, r3
 800c518:	d905      	bls.n	800c526 <ip_reass_free_complete_datagram+0x112>
 800c51a:	4b09      	ldr	r3, [pc, #36]	; (800c540 <ip_reass_free_complete_datagram+0x12c>)
 800c51c:	22d2      	movs	r2, #210	; 0xd2
 800c51e:	490e      	ldr	r1, [pc, #56]	; (800c558 <ip_reass_free_complete_datagram+0x144>)
 800c520:	4809      	ldr	r0, [pc, #36]	; (800c548 <ip_reass_free_complete_datagram+0x134>)
 800c522:	f000 fea9 	bl	800d278 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800c526:	4b0b      	ldr	r3, [pc, #44]	; (800c554 <ip_reass_free_complete_datagram+0x140>)
 800c528:	881a      	ldrh	r2, [r3, #0]
 800c52a:	8bfb      	ldrh	r3, [r7, #30]
 800c52c:	1ad3      	subs	r3, r2, r3
 800c52e:	b29a      	uxth	r2, r3
 800c530:	4b08      	ldr	r3, [pc, #32]	; (800c554 <ip_reass_free_complete_datagram+0x140>)
 800c532:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800c534:	8bfb      	ldrh	r3, [r7, #30]
}
 800c536:	4618      	mov	r0, r3
 800c538:	3720      	adds	r7, #32
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	08010a54 	.word	0x08010a54
 800c544:	08010a90 	.word	0x08010a90
 800c548:	08010a9c 	.word	0x08010a9c
 800c54c:	08010ac4 	.word	0x08010ac4
 800c550:	08010ad8 	.word	0x08010ad8
 800c554:	2000b55c 	.word	0x2000b55c
 800c558:	08010af8 	.word	0x08010af8

0800c55c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b08a      	sub	sp, #40	; 0x28
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800c566:	2300      	movs	r3, #0
 800c568:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800c56a:	2300      	movs	r3, #0
 800c56c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800c56e:	2300      	movs	r3, #0
 800c570:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800c572:	2300      	movs	r3, #0
 800c574:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800c576:	2300      	movs	r3, #0
 800c578:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800c57a:	4b28      	ldr	r3, [pc, #160]	; (800c61c <ip_reass_remove_oldest_datagram+0xc0>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c580:	e030      	b.n	800c5e4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800c582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c584:	695a      	ldr	r2, [r3, #20]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	68db      	ldr	r3, [r3, #12]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d10c      	bne.n	800c5a8 <ip_reass_remove_oldest_datagram+0x4c>
 800c58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c590:	699a      	ldr	r2, [r3, #24]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	691b      	ldr	r3, [r3, #16]
 800c596:	429a      	cmp	r2, r3
 800c598:	d106      	bne.n	800c5a8 <ip_reass_remove_oldest_datagram+0x4c>
 800c59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59c:	899a      	ldrh	r2, [r3, #12]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	889b      	ldrh	r3, [r3, #4]
 800c5a2:	b29b      	uxth	r3, r3
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d014      	beq.n	800c5d2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	3301      	adds	r3, #1
 800c5ac:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800c5ae:	6a3b      	ldr	r3, [r7, #32]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d104      	bne.n	800c5be <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800c5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	61bb      	str	r3, [r7, #24]
 800c5bc:	e009      	b.n	800c5d2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800c5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c0:	7fda      	ldrb	r2, [r3, #31]
 800c5c2:	6a3b      	ldr	r3, [r7, #32]
 800c5c4:	7fdb      	ldrb	r3, [r3, #31]
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d803      	bhi.n	800c5d2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800c5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5cc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c5ce:	69fb      	ldr	r3, [r7, #28]
 800c5d0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800c5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d001      	beq.n	800c5de <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800c5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5dc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800c5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d1cb      	bne.n	800c582 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800c5ea:	6a3b      	ldr	r3, [r7, #32]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d008      	beq.n	800c602 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800c5f0:	69b9      	ldr	r1, [r7, #24]
 800c5f2:	6a38      	ldr	r0, [r7, #32]
 800c5f4:	f7ff ff0e 	bl	800c414 <ip_reass_free_complete_datagram>
 800c5f8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800c5fa:	697a      	ldr	r2, [r7, #20]
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	4413      	add	r3, r2
 800c600:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800c602:	697a      	ldr	r2, [r7, #20]
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	429a      	cmp	r2, r3
 800c608:	da02      	bge.n	800c610 <ip_reass_remove_oldest_datagram+0xb4>
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	dcac      	bgt.n	800c56a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800c610:	697b      	ldr	r3, [r7, #20]
}
 800c612:	4618      	mov	r0, r3
 800c614:	3728      	adds	r7, #40	; 0x28
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	2000b558 	.word	0x2000b558

0800c620 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b084      	sub	sp, #16
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c62a:	2004      	movs	r0, #4
 800c62c:	f7f7 fd40 	bl	80040b0 <memp_malloc>
 800c630:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d110      	bne.n	800c65a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800c638:	6839      	ldr	r1, [r7, #0]
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f7ff ff8e 	bl	800c55c <ip_reass_remove_oldest_datagram>
 800c640:	4602      	mov	r2, r0
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	4293      	cmp	r3, r2
 800c646:	dc03      	bgt.n	800c650 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c648:	2004      	movs	r0, #4
 800c64a:	f7f7 fd31 	bl	80040b0 <memp_malloc>
 800c64e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d101      	bne.n	800c65a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800c656:	2300      	movs	r3, #0
 800c658:	e016      	b.n	800c688 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800c65a:	2220      	movs	r2, #32
 800c65c:	2100      	movs	r1, #0
 800c65e:	68f8      	ldr	r0, [r7, #12]
 800c660:	f000 fe02 	bl	800d268 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	220f      	movs	r2, #15
 800c668:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800c66a:	4b09      	ldr	r3, [pc, #36]	; (800c690 <ip_reass_enqueue_new_datagram+0x70>)
 800c66c:	681a      	ldr	r2, [r3, #0]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800c672:	4a07      	ldr	r2, [pc, #28]	; (800c690 <ip_reass_enqueue_new_datagram+0x70>)
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	3308      	adds	r3, #8
 800c67c:	2214      	movs	r2, #20
 800c67e:	6879      	ldr	r1, [r7, #4]
 800c680:	4618      	mov	r0, r3
 800c682:	f000 fde3 	bl	800d24c <memcpy>
  return ipr;
 800c686:	68fb      	ldr	r3, [r7, #12]
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3710      	adds	r7, #16
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	2000b558 	.word	0x2000b558

0800c694 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b082      	sub	sp, #8
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800c69e:	4b10      	ldr	r3, [pc, #64]	; (800c6e0 <ip_reass_dequeue_datagram+0x4c>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d104      	bne.n	800c6b2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4a0c      	ldr	r2, [pc, #48]	; (800c6e0 <ip_reass_dequeue_datagram+0x4c>)
 800c6ae:	6013      	str	r3, [r2, #0]
 800c6b0:	e00d      	b.n	800c6ce <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d106      	bne.n	800c6c6 <ip_reass_dequeue_datagram+0x32>
 800c6b8:	4b0a      	ldr	r3, [pc, #40]	; (800c6e4 <ip_reass_dequeue_datagram+0x50>)
 800c6ba:	f240 1245 	movw	r2, #325	; 0x145
 800c6be:	490a      	ldr	r1, [pc, #40]	; (800c6e8 <ip_reass_dequeue_datagram+0x54>)
 800c6c0:	480a      	ldr	r0, [pc, #40]	; (800c6ec <ip_reass_dequeue_datagram+0x58>)
 800c6c2:	f000 fdd9 	bl	800d278 <iprintf>
    prev->next = ipr->next;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681a      	ldr	r2, [r3, #0]
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800c6ce:	6879      	ldr	r1, [r7, #4]
 800c6d0:	2004      	movs	r0, #4
 800c6d2:	f7f7 fd5d 	bl	8004190 <memp_free>
}
 800c6d6:	bf00      	nop
 800c6d8:	3708      	adds	r7, #8
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	2000b558 	.word	0x2000b558
 800c6e4:	08010a54 	.word	0x08010a54
 800c6e8:	08010b1c 	.word	0x08010b1c
 800c6ec:	08010a9c 	.word	0x08010a9c

0800c6f0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b08c      	sub	sp, #48	; 0x30
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	60f8      	str	r0, [r7, #12]
 800c6f8:	60b9      	str	r1, [r7, #8]
 800c6fa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800c700:	2301      	movs	r3, #1
 800c702:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800c70a:	69fb      	ldr	r3, [r7, #28]
 800c70c:	885b      	ldrh	r3, [r3, #2]
 800c70e:	b29b      	uxth	r3, r3
 800c710:	4618      	mov	r0, r3
 800c712:	f7f7 f855 	bl	80037c0 <lwip_htons>
 800c716:	4603      	mov	r3, r0
 800c718:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800c71a:	69fb      	ldr	r3, [r7, #28]
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	f003 030f 	and.w	r3, r3, #15
 800c722:	b2db      	uxtb	r3, r3
 800c724:	009b      	lsls	r3, r3, #2
 800c726:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800c728:	7e7b      	ldrb	r3, [r7, #25]
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	8b7a      	ldrh	r2, [r7, #26]
 800c72e:	429a      	cmp	r2, r3
 800c730:	d202      	bcs.n	800c738 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c732:	f04f 33ff 	mov.w	r3, #4294967295
 800c736:	e135      	b.n	800c9a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800c738:	7e7b      	ldrb	r3, [r7, #25]
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	8b7a      	ldrh	r2, [r7, #26]
 800c73e:	1ad3      	subs	r3, r2, r3
 800c740:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800c742:	69fb      	ldr	r3, [r7, #28]
 800c744:	88db      	ldrh	r3, [r3, #6]
 800c746:	b29b      	uxth	r3, r3
 800c748:	4618      	mov	r0, r3
 800c74a:	f7f7 f839 	bl	80037c0 <lwip_htons>
 800c74e:	4603      	mov	r3, r0
 800c750:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c754:	b29b      	uxth	r3, r3
 800c756:	00db      	lsls	r3, r3, #3
 800c758:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	685b      	ldr	r3, [r3, #4]
 800c75e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800c760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c762:	2200      	movs	r2, #0
 800c764:	701a      	strb	r2, [r3, #0]
 800c766:	2200      	movs	r2, #0
 800c768:	705a      	strb	r2, [r3, #1]
 800c76a:	2200      	movs	r2, #0
 800c76c:	709a      	strb	r2, [r3, #2]
 800c76e:	2200      	movs	r2, #0
 800c770:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800c772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c774:	8afa      	ldrh	r2, [r7, #22]
 800c776:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800c778:	8afa      	ldrh	r2, [r7, #22]
 800c77a:	8b7b      	ldrh	r3, [r7, #26]
 800c77c:	4413      	add	r3, r2
 800c77e:	b29a      	uxth	r2, r3
 800c780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c782:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800c784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c786:	88db      	ldrh	r3, [r3, #6]
 800c788:	b29b      	uxth	r3, r3
 800c78a:	8afa      	ldrh	r2, [r7, #22]
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d902      	bls.n	800c796 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c790:	f04f 33ff 	mov.w	r3, #4294967295
 800c794:	e106      	b.n	800c9a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	685b      	ldr	r3, [r3, #4]
 800c79a:	627b      	str	r3, [r7, #36]	; 0x24
 800c79c:	e068      	b.n	800c870 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800c79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800c7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a6:	889b      	ldrh	r3, [r3, #4]
 800c7a8:	b29a      	uxth	r2, r3
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	889b      	ldrh	r3, [r3, #4]
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d235      	bcs.n	800c820 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800c7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7b8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800c7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d020      	beq.n	800c802 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800c7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c2:	889b      	ldrh	r3, [r3, #4]
 800c7c4:	b29a      	uxth	r2, r3
 800c7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c8:	88db      	ldrh	r3, [r3, #6]
 800c7ca:	b29b      	uxth	r3, r3
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d307      	bcc.n	800c7e0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800c7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d2:	88db      	ldrh	r3, [r3, #6]
 800c7d4:	b29a      	uxth	r2, r3
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	889b      	ldrh	r3, [r3, #4]
 800c7da:	b29b      	uxth	r3, r3
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d902      	bls.n	800c7e6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c7e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c7e4:	e0de      	b.n	800c9a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800c7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e8:	68ba      	ldr	r2, [r7, #8]
 800c7ea:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800c7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ee:	88db      	ldrh	r3, [r3, #6]
 800c7f0:	b29a      	uxth	r2, r3
 800c7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f4:	889b      	ldrh	r3, [r3, #4]
 800c7f6:	b29b      	uxth	r3, r3
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d03d      	beq.n	800c878 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800c800:	e03a      	b.n	800c878 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800c802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c804:	88db      	ldrh	r3, [r3, #6]
 800c806:	b29a      	uxth	r2, r3
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	889b      	ldrh	r3, [r3, #4]
 800c80c:	b29b      	uxth	r3, r3
 800c80e:	429a      	cmp	r2, r3
 800c810:	d902      	bls.n	800c818 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c812:	f04f 33ff 	mov.w	r3, #4294967295
 800c816:	e0c5      	b.n	800c9a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	68ba      	ldr	r2, [r7, #8]
 800c81c:	605a      	str	r2, [r3, #4]
      break;
 800c81e:	e02b      	b.n	800c878 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800c820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c822:	889b      	ldrh	r3, [r3, #4]
 800c824:	b29a      	uxth	r2, r3
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	889b      	ldrh	r3, [r3, #4]
 800c82a:	b29b      	uxth	r3, r3
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d102      	bne.n	800c836 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c830:	f04f 33ff 	mov.w	r3, #4294967295
 800c834:	e0b6      	b.n	800c9a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800c836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c838:	889b      	ldrh	r3, [r3, #4]
 800c83a:	b29a      	uxth	r2, r3
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	88db      	ldrh	r3, [r3, #6]
 800c840:	b29b      	uxth	r3, r3
 800c842:	429a      	cmp	r2, r3
 800c844:	d202      	bcs.n	800c84c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c846:	f04f 33ff 	mov.w	r3, #4294967295
 800c84a:	e0ab      	b.n	800c9a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800c84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d009      	beq.n	800c866 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800c852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c854:	88db      	ldrh	r3, [r3, #6]
 800c856:	b29a      	uxth	r2, r3
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	889b      	ldrh	r3, [r3, #4]
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	429a      	cmp	r2, r3
 800c860:	d001      	beq.n	800c866 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c862:	2300      	movs	r3, #0
 800c864:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800c870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c872:	2b00      	cmp	r3, #0
 800c874:	d193      	bne.n	800c79e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800c876:	e000      	b.n	800c87a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800c878:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800c87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d12d      	bne.n	800c8dc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800c880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c882:	2b00      	cmp	r3, #0
 800c884:	d01c      	beq.n	800c8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800c886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c888:	88db      	ldrh	r3, [r3, #6]
 800c88a:	b29a      	uxth	r2, r3
 800c88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c88e:	889b      	ldrh	r3, [r3, #4]
 800c890:	b29b      	uxth	r3, r3
 800c892:	429a      	cmp	r2, r3
 800c894:	d906      	bls.n	800c8a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800c896:	4b45      	ldr	r3, [pc, #276]	; (800c9ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c898:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800c89c:	4944      	ldr	r1, [pc, #272]	; (800c9b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c89e:	4845      	ldr	r0, [pc, #276]	; (800c9b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c8a0:	f000 fcea 	bl	800d278 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800c8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a6:	68ba      	ldr	r2, [r7, #8]
 800c8a8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800c8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ac:	88db      	ldrh	r3, [r3, #6]
 800c8ae:	b29a      	uxth	r2, r3
 800c8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b2:	889b      	ldrh	r3, [r3, #4]
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d010      	beq.n	800c8dc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	623b      	str	r3, [r7, #32]
 800c8be:	e00d      	b.n	800c8dc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d006      	beq.n	800c8d6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800c8c8:	4b38      	ldr	r3, [pc, #224]	; (800c9ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c8ca:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800c8ce:	493a      	ldr	r1, [pc, #232]	; (800c9b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800c8d0:	4838      	ldr	r0, [pc, #224]	; (800c9b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c8d2:	f000 fcd1 	bl	800d278 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	68ba      	ldr	r2, [r7, #8]
 800c8da:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d105      	bne.n	800c8ee <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	7f9b      	ldrb	r3, [r3, #30]
 800c8e6:	f003 0301 	and.w	r3, r3, #1
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d059      	beq.n	800c9a2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800c8ee:	6a3b      	ldr	r3, [r7, #32]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d04f      	beq.n	800c994 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d006      	beq.n	800c90a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	889b      	ldrh	r3, [r3, #4]
 800c904:	b29b      	uxth	r3, r3
 800c906:	2b00      	cmp	r3, #0
 800c908:	d002      	beq.n	800c910 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800c90a:	2300      	movs	r3, #0
 800c90c:	623b      	str	r3, [r7, #32]
 800c90e:	e041      	b.n	800c994 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800c910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c912:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800c914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c91a:	e012      	b.n	800c942 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800c91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91e:	685b      	ldr	r3, [r3, #4]
 800c920:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800c922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c924:	88db      	ldrh	r3, [r3, #6]
 800c926:	b29a      	uxth	r2, r3
 800c928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92a:	889b      	ldrh	r3, [r3, #4]
 800c92c:	b29b      	uxth	r3, r3
 800c92e:	429a      	cmp	r2, r3
 800c930:	d002      	beq.n	800c938 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800c932:	2300      	movs	r3, #0
 800c934:	623b      	str	r3, [r7, #32]
            break;
 800c936:	e007      	b.n	800c948 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800c938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c93a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800c93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c944:	2b00      	cmp	r3, #0
 800c946:	d1e9      	bne.n	800c91c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800c948:	6a3b      	ldr	r3, [r7, #32]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d022      	beq.n	800c994 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d106      	bne.n	800c964 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800c956:	4b15      	ldr	r3, [pc, #84]	; (800c9ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c958:	f240 12df 	movw	r2, #479	; 0x1df
 800c95c:	4917      	ldr	r1, [pc, #92]	; (800c9bc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c95e:	4815      	ldr	r0, [pc, #84]	; (800c9b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c960:	f000 fc8a 	bl	800d278 <iprintf>
          LWIP_ASSERT("sanity check",
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	685b      	ldr	r3, [r3, #4]
 800c96a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d106      	bne.n	800c97e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800c970:	4b0e      	ldr	r3, [pc, #56]	; (800c9ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c972:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c976:	4911      	ldr	r1, [pc, #68]	; (800c9bc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c978:	480e      	ldr	r0, [pc, #56]	; (800c9b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c97a:	f000 fc7d 	bl	800d278 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800c97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d006      	beq.n	800c994 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800c986:	4b09      	ldr	r3, [pc, #36]	; (800c9ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c988:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800c98c:	490c      	ldr	r1, [pc, #48]	; (800c9c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800c98e:	4809      	ldr	r0, [pc, #36]	; (800c9b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c990:	f000 fc72 	bl	800d278 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800c994:	6a3b      	ldr	r3, [r7, #32]
 800c996:	2b00      	cmp	r3, #0
 800c998:	bf14      	ite	ne
 800c99a:	2301      	movne	r3, #1
 800c99c:	2300      	moveq	r3, #0
 800c99e:	b2db      	uxtb	r3, r3
 800c9a0:	e000      	b.n	800c9a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800c9a2:	2300      	movs	r3, #0
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3730      	adds	r7, #48	; 0x30
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}
 800c9ac:	08010a54 	.word	0x08010a54
 800c9b0:	08010b38 	.word	0x08010b38
 800c9b4:	08010a9c 	.word	0x08010a9c
 800c9b8:	08010b58 	.word	0x08010b58
 800c9bc:	08010b90 	.word	0x08010b90
 800c9c0:	08010ba0 	.word	0x08010ba0

0800c9c4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b08e      	sub	sp, #56	; 0x38
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800c9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	f003 030f 	and.w	r3, r3, #15
 800c9da:	b2db      	uxtb	r3, r3
 800c9dc:	009b      	lsls	r3, r3, #2
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	2b14      	cmp	r3, #20
 800c9e2:	f040 8171 	bne.w	800ccc8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800c9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e8:	88db      	ldrh	r3, [r3, #6]
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7f6 fee7 	bl	80037c0 <lwip_htons>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9f8:	b29b      	uxth	r3, r3
 800c9fa:	00db      	lsls	r3, r3, #3
 800c9fc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800c9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca00:	885b      	ldrh	r3, [r3, #2]
 800ca02:	b29b      	uxth	r3, r3
 800ca04:	4618      	mov	r0, r3
 800ca06:	f7f6 fedb 	bl	80037c0 <lwip_htons>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800ca0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	f003 030f 	and.w	r3, r3, #15
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	009b      	lsls	r3, r3, #2
 800ca1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800ca1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ca22:	b29b      	uxth	r3, r3
 800ca24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ca26:	429a      	cmp	r2, r3
 800ca28:	f0c0 8150 	bcc.w	800cccc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800ca2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ca30:	b29b      	uxth	r3, r3
 800ca32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ca34:	1ad3      	subs	r3, r2, r3
 800ca36:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f7f8 faa7 	bl	8004f8c <pbuf_clen>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800ca42:	4b8c      	ldr	r3, [pc, #560]	; (800cc74 <ip4_reass+0x2b0>)
 800ca44:	881b      	ldrh	r3, [r3, #0]
 800ca46:	461a      	mov	r2, r3
 800ca48:	8c3b      	ldrh	r3, [r7, #32]
 800ca4a:	4413      	add	r3, r2
 800ca4c:	2b0a      	cmp	r3, #10
 800ca4e:	dd10      	ble.n	800ca72 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ca50:	8c3b      	ldrh	r3, [r7, #32]
 800ca52:	4619      	mov	r1, r3
 800ca54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca56:	f7ff fd81 	bl	800c55c <ip_reass_remove_oldest_datagram>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	f000 8137 	beq.w	800ccd0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800ca62:	4b84      	ldr	r3, [pc, #528]	; (800cc74 <ip4_reass+0x2b0>)
 800ca64:	881b      	ldrh	r3, [r3, #0]
 800ca66:	461a      	mov	r2, r3
 800ca68:	8c3b      	ldrh	r3, [r7, #32]
 800ca6a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ca6c:	2b0a      	cmp	r3, #10
 800ca6e:	f300 812f 	bgt.w	800ccd0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ca72:	4b81      	ldr	r3, [pc, #516]	; (800cc78 <ip4_reass+0x2b4>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	633b      	str	r3, [r7, #48]	; 0x30
 800ca78:	e015      	b.n	800caa6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ca7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7c:	695a      	ldr	r2, [r3, #20]
 800ca7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca80:	68db      	ldr	r3, [r3, #12]
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d10c      	bne.n	800caa0 <ip4_reass+0xdc>
 800ca86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca88:	699a      	ldr	r2, [r3, #24]
 800ca8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8c:	691b      	ldr	r3, [r3, #16]
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d106      	bne.n	800caa0 <ip4_reass+0xdc>
 800ca92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca94:	899a      	ldrh	r2, [r3, #12]
 800ca96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca98:	889b      	ldrh	r3, [r3, #4]
 800ca9a:	b29b      	uxth	r3, r3
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	d006      	beq.n	800caae <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800caa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	633b      	str	r3, [r7, #48]	; 0x30
 800caa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d1e6      	bne.n	800ca7a <ip4_reass+0xb6>
 800caac:	e000      	b.n	800cab0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800caae:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800cab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d109      	bne.n	800caca <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800cab6:	8c3b      	ldrh	r3, [r7, #32]
 800cab8:	4619      	mov	r1, r3
 800caba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cabc:	f7ff fdb0 	bl	800c620 <ip_reass_enqueue_new_datagram>
 800cac0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800cac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d11c      	bne.n	800cb02 <ip4_reass+0x13e>
      goto nullreturn;
 800cac8:	e105      	b.n	800ccd6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800caca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cacc:	88db      	ldrh	r3, [r3, #6]
 800cace:	b29b      	uxth	r3, r3
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7f6 fe75 	bl	80037c0 <lwip_htons>
 800cad6:	4603      	mov	r3, r0
 800cad8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d110      	bne.n	800cb02 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800cae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae2:	89db      	ldrh	r3, [r3, #14]
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7f6 fe6b 	bl	80037c0 <lwip_htons>
 800caea:	4603      	mov	r3, r0
 800caec:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d006      	beq.n	800cb02 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800caf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf6:	3308      	adds	r3, #8
 800caf8:	2214      	movs	r2, #20
 800cafa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cafc:	4618      	mov	r0, r3
 800cafe:	f000 fba5 	bl	800d24c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800cb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb04:	88db      	ldrh	r3, [r3, #6]
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	f003 0320 	and.w	r3, r3, #32
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	bf0c      	ite	eq
 800cb10:	2301      	moveq	r3, #1
 800cb12:	2300      	movne	r3, #0
 800cb14:	b2db      	uxtb	r3, r3
 800cb16:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800cb18:	69fb      	ldr	r3, [r7, #28]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d00e      	beq.n	800cb3c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800cb1e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cb20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb22:	4413      	add	r3, r2
 800cb24:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800cb26:	8b7a      	ldrh	r2, [r7, #26]
 800cb28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	f0c0 80a0 	bcc.w	800cc70 <ip4_reass+0x2ac>
 800cb30:	8b7b      	ldrh	r3, [r7, #26]
 800cb32:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800cb36:	4293      	cmp	r3, r2
 800cb38:	f200 809a 	bhi.w	800cc70 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800cb3c:	69fa      	ldr	r2, [r7, #28]
 800cb3e:	6879      	ldr	r1, [r7, #4]
 800cb40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb42:	f7ff fdd5 	bl	800c6f0 <ip_reass_chain_frag_into_datagram_and_validate>
 800cb46:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb4e:	f000 809b 	beq.w	800cc88 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800cb52:	4b48      	ldr	r3, [pc, #288]	; (800cc74 <ip4_reass+0x2b0>)
 800cb54:	881a      	ldrh	r2, [r3, #0]
 800cb56:	8c3b      	ldrh	r3, [r7, #32]
 800cb58:	4413      	add	r3, r2
 800cb5a:	b29a      	uxth	r2, r3
 800cb5c:	4b45      	ldr	r3, [pc, #276]	; (800cc74 <ip4_reass+0x2b0>)
 800cb5e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800cb60:	69fb      	ldr	r3, [r7, #28]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d00d      	beq.n	800cb82 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800cb66:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cb68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb6a:	4413      	add	r3, r2
 800cb6c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800cb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb70:	8a7a      	ldrh	r2, [r7, #18]
 800cb72:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800cb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb76:	7f9b      	ldrb	r3, [r3, #30]
 800cb78:	f043 0301 	orr.w	r3, r3, #1
 800cb7c:	b2da      	uxtb	r2, r3
 800cb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb80:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d171      	bne.n	800cc6c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800cb88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8a:	8b9b      	ldrh	r3, [r3, #28]
 800cb8c:	3314      	adds	r3, #20
 800cb8e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800cb90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800cb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	685b      	ldr	r3, [r3, #4]
 800cba0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800cba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba4:	3308      	adds	r3, #8
 800cba6:	2214      	movs	r2, #20
 800cba8:	4619      	mov	r1, r3
 800cbaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbac:	f000 fb4e 	bl	800d24c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800cbb0:	8a3b      	ldrh	r3, [r7, #16]
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7f6 fe04 	bl	80037c0 <lwip_htons>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	461a      	mov	r2, r3
 800cbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbbe:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800cbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	719a      	strb	r2, [r3, #6]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800cbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbcc:	2200      	movs	r2, #0
 800cbce:	729a      	strb	r2, [r3, #10]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800cbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd6:	685b      	ldr	r3, [r3, #4]
 800cbd8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800cbda:	e00d      	b.n	800cbf8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800cbdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800cbe2:	2114      	movs	r1, #20
 800cbe4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cbe6:	f7f8 f8c3 	bl	8004d70 <pbuf_remove_header>
      pbuf_cat(p, r);
 800cbea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f7f8 fa07 	bl	8005000 <pbuf_cat>
      r = iprh->next_pbuf;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800cbf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d1ee      	bne.n	800cbdc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800cbfe:	4b1e      	ldr	r3, [pc, #120]	; (800cc78 <ip4_reass+0x2b4>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc04:	429a      	cmp	r2, r3
 800cc06:	d102      	bne.n	800cc0e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc0c:	e010      	b.n	800cc30 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800cc0e:	4b1a      	ldr	r3, [pc, #104]	; (800cc78 <ip4_reass+0x2b4>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc14:	e007      	b.n	800cc26 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800cc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d006      	beq.n	800cc2e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800cc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d1f4      	bne.n	800cc16 <ip4_reass+0x252>
 800cc2c:	e000      	b.n	800cc30 <ip4_reass+0x26c>
          break;
 800cc2e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800cc30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc34:	f7ff fd2e 	bl	800c694 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f7f8 f9a7 	bl	8004f8c <pbuf_clen>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800cc42:	4b0c      	ldr	r3, [pc, #48]	; (800cc74 <ip4_reass+0x2b0>)
 800cc44:	881b      	ldrh	r3, [r3, #0]
 800cc46:	8c3a      	ldrh	r2, [r7, #32]
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d906      	bls.n	800cc5a <ip4_reass+0x296>
 800cc4c:	4b0b      	ldr	r3, [pc, #44]	; (800cc7c <ip4_reass+0x2b8>)
 800cc4e:	f240 229b 	movw	r2, #667	; 0x29b
 800cc52:	490b      	ldr	r1, [pc, #44]	; (800cc80 <ip4_reass+0x2bc>)
 800cc54:	480b      	ldr	r0, [pc, #44]	; (800cc84 <ip4_reass+0x2c0>)
 800cc56:	f000 fb0f 	bl	800d278 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800cc5a:	4b06      	ldr	r3, [pc, #24]	; (800cc74 <ip4_reass+0x2b0>)
 800cc5c:	881a      	ldrh	r2, [r3, #0]
 800cc5e:	8c3b      	ldrh	r3, [r7, #32]
 800cc60:	1ad3      	subs	r3, r2, r3
 800cc62:	b29a      	uxth	r2, r3
 800cc64:	4b03      	ldr	r3, [pc, #12]	; (800cc74 <ip4_reass+0x2b0>)
 800cc66:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	e038      	b.n	800ccde <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	e036      	b.n	800ccde <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800cc70:	bf00      	nop
 800cc72:	e00a      	b.n	800cc8a <ip4_reass+0x2c6>
 800cc74:	2000b55c 	.word	0x2000b55c
 800cc78:	2000b558 	.word	0x2000b558
 800cc7c:	08010a54 	.word	0x08010a54
 800cc80:	08010bc4 	.word	0x08010bc4
 800cc84:	08010a9c 	.word	0x08010a9c
    goto nullreturn_ipr;
 800cc88:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800cc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d106      	bne.n	800cc9e <ip4_reass+0x2da>
 800cc90:	4b15      	ldr	r3, [pc, #84]	; (800cce8 <ip4_reass+0x324>)
 800cc92:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800cc96:	4915      	ldr	r1, [pc, #84]	; (800ccec <ip4_reass+0x328>)
 800cc98:	4815      	ldr	r0, [pc, #84]	; (800ccf0 <ip4_reass+0x32c>)
 800cc9a:	f000 faed 	bl	800d278 <iprintf>
  if (ipr->p == NULL) {
 800cc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d116      	bne.n	800ccd4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800cca6:	4b13      	ldr	r3, [pc, #76]	; (800ccf4 <ip4_reass+0x330>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d006      	beq.n	800ccbe <ip4_reass+0x2fa>
 800ccb0:	4b0d      	ldr	r3, [pc, #52]	; (800cce8 <ip4_reass+0x324>)
 800ccb2:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ccb6:	4910      	ldr	r1, [pc, #64]	; (800ccf8 <ip4_reass+0x334>)
 800ccb8:	480d      	ldr	r0, [pc, #52]	; (800ccf0 <ip4_reass+0x32c>)
 800ccba:	f000 fadd 	bl	800d278 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ccbe:	2100      	movs	r1, #0
 800ccc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccc2:	f7ff fce7 	bl	800c694 <ip_reass_dequeue_datagram>
 800ccc6:	e006      	b.n	800ccd6 <ip4_reass+0x312>
    goto nullreturn;
 800ccc8:	bf00      	nop
 800ccca:	e004      	b.n	800ccd6 <ip4_reass+0x312>
    goto nullreturn;
 800cccc:	bf00      	nop
 800ccce:	e002      	b.n	800ccd6 <ip4_reass+0x312>
      goto nullreturn;
 800ccd0:	bf00      	nop
 800ccd2:	e000      	b.n	800ccd6 <ip4_reass+0x312>
  }

nullreturn:
 800ccd4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f7f8 f8d0 	bl	8004e7c <pbuf_free>
  return NULL;
 800ccdc:	2300      	movs	r3, #0
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3738      	adds	r7, #56	; 0x38
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
 800cce6:	bf00      	nop
 800cce8:	08010a54 	.word	0x08010a54
 800ccec:	08010be0 	.word	0x08010be0
 800ccf0:	08010a9c 	.word	0x08010a9c
 800ccf4:	2000b558 	.word	0x2000b558
 800ccf8:	08010bec 	.word	0x08010bec

0800ccfc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800cd00:	2005      	movs	r0, #5
 800cd02:	f7f7 f9d5 	bl	80040b0 <memp_malloc>
 800cd06:	4603      	mov	r3, r0
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	bd80      	pop	{r7, pc}

0800cd0c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b082      	sub	sp, #8
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d106      	bne.n	800cd28 <ip_frag_free_pbuf_custom_ref+0x1c>
 800cd1a:	4b07      	ldr	r3, [pc, #28]	; (800cd38 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800cd1c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800cd20:	4906      	ldr	r1, [pc, #24]	; (800cd3c <ip_frag_free_pbuf_custom_ref+0x30>)
 800cd22:	4807      	ldr	r0, [pc, #28]	; (800cd40 <ip_frag_free_pbuf_custom_ref+0x34>)
 800cd24:	f000 faa8 	bl	800d278 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800cd28:	6879      	ldr	r1, [r7, #4]
 800cd2a:	2005      	movs	r0, #5
 800cd2c:	f7f7 fa30 	bl	8004190 <memp_free>
}
 800cd30:	bf00      	nop
 800cd32:	3708      	adds	r7, #8
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	08010a54 	.word	0x08010a54
 800cd3c:	08010c0c 	.word	0x08010c0c
 800cd40:	08010a9c 	.word	0x08010a9c

0800cd44 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b084      	sub	sp, #16
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d106      	bne.n	800cd64 <ipfrag_free_pbuf_custom+0x20>
 800cd56:	4b11      	ldr	r3, [pc, #68]	; (800cd9c <ipfrag_free_pbuf_custom+0x58>)
 800cd58:	f240 22ce 	movw	r2, #718	; 0x2ce
 800cd5c:	4910      	ldr	r1, [pc, #64]	; (800cda0 <ipfrag_free_pbuf_custom+0x5c>)
 800cd5e:	4811      	ldr	r0, [pc, #68]	; (800cda4 <ipfrag_free_pbuf_custom+0x60>)
 800cd60:	f000 fa8a 	bl	800d278 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800cd64:	68fa      	ldr	r2, [r7, #12]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d006      	beq.n	800cd7a <ipfrag_free_pbuf_custom+0x36>
 800cd6c:	4b0b      	ldr	r3, [pc, #44]	; (800cd9c <ipfrag_free_pbuf_custom+0x58>)
 800cd6e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800cd72:	490d      	ldr	r1, [pc, #52]	; (800cda8 <ipfrag_free_pbuf_custom+0x64>)
 800cd74:	480b      	ldr	r0, [pc, #44]	; (800cda4 <ipfrag_free_pbuf_custom+0x60>)
 800cd76:	f000 fa7f 	bl	800d278 <iprintf>
  if (pcr->original != NULL) {
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	695b      	ldr	r3, [r3, #20]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d004      	beq.n	800cd8c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	695b      	ldr	r3, [r3, #20]
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7f8 f878 	bl	8004e7c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800cd8c:	68f8      	ldr	r0, [r7, #12]
 800cd8e:	f7ff ffbd 	bl	800cd0c <ip_frag_free_pbuf_custom_ref>
}
 800cd92:	bf00      	nop
 800cd94:	3710      	adds	r7, #16
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}
 800cd9a:	bf00      	nop
 800cd9c:	08010a54 	.word	0x08010a54
 800cda0:	08010c18 	.word	0x08010c18
 800cda4:	08010a9c 	.word	0x08010a9c
 800cda8:	08010c24 	.word	0x08010c24

0800cdac <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b094      	sub	sp, #80	; 0x50
 800cdb0:	af02      	add	r7, sp, #8
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	60b9      	str	r1, [r7, #8]
 800cdb6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cdc2:	3b14      	subs	r3, #20
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	da00      	bge.n	800cdca <ip4_frag+0x1e>
 800cdc8:	3307      	adds	r3, #7
 800cdca:	10db      	asrs	r3, r3, #3
 800cdcc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800cdce:	2314      	movs	r3, #20
 800cdd0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800cdd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdda:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800cddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	f003 030f 	and.w	r3, r3, #15
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	009b      	lsls	r3, r3, #2
 800cde8:	b2db      	uxtb	r3, r3
 800cdea:	2b14      	cmp	r3, #20
 800cdec:	d002      	beq.n	800cdf4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800cdee:	f06f 0305 	mvn.w	r3, #5
 800cdf2:	e110      	b.n	800d016 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	895b      	ldrh	r3, [r3, #10]
 800cdf8:	2b13      	cmp	r3, #19
 800cdfa:	d809      	bhi.n	800ce10 <ip4_frag+0x64>
 800cdfc:	4b88      	ldr	r3, [pc, #544]	; (800d020 <ip4_frag+0x274>)
 800cdfe:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800ce02:	4988      	ldr	r1, [pc, #544]	; (800d024 <ip4_frag+0x278>)
 800ce04:	4888      	ldr	r0, [pc, #544]	; (800d028 <ip4_frag+0x27c>)
 800ce06:	f000 fa37 	bl	800d278 <iprintf>
 800ce0a:	f06f 0305 	mvn.w	r3, #5
 800ce0e:	e102      	b.n	800d016 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ce10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce12:	88db      	ldrh	r3, [r3, #6]
 800ce14:	b29b      	uxth	r3, r3
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7f6 fcd2 	bl	80037c0 <lwip_htons>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800ce20:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ce22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ce2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ce2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ce30:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	891b      	ldrh	r3, [r3, #8]
 800ce36:	3b14      	subs	r3, #20
 800ce38:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800ce3c:	e0e1      	b.n	800d002 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ce3e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ce40:	00db      	lsls	r3, r3, #3
 800ce42:	b29b      	uxth	r3, r3
 800ce44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	bf28      	it	cs
 800ce4c:	4613      	movcs	r3, r2
 800ce4e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ce50:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ce54:	2114      	movs	r1, #20
 800ce56:	200e      	movs	r0, #14
 800ce58:	f7f7 fd2c 	bl	80048b4 <pbuf_alloc>
 800ce5c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800ce5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	f000 80d5 	beq.w	800d010 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ce66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce68:	895b      	ldrh	r3, [r3, #10]
 800ce6a:	2b13      	cmp	r3, #19
 800ce6c:	d806      	bhi.n	800ce7c <ip4_frag+0xd0>
 800ce6e:	4b6c      	ldr	r3, [pc, #432]	; (800d020 <ip4_frag+0x274>)
 800ce70:	f44f 7249 	mov.w	r2, #804	; 0x324
 800ce74:	496d      	ldr	r1, [pc, #436]	; (800d02c <ip4_frag+0x280>)
 800ce76:	486c      	ldr	r0, [pc, #432]	; (800d028 <ip4_frag+0x27c>)
 800ce78:	f000 f9fe 	bl	800d278 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ce7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce7e:	685b      	ldr	r3, [r3, #4]
 800ce80:	2214      	movs	r2, #20
 800ce82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ce84:	4618      	mov	r0, r3
 800ce86:	f000 f9e1 	bl	800d24c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ce8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800ce90:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ce92:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800ce96:	e064      	b.n	800cf62 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	895a      	ldrh	r2, [r3, #10]
 800ce9c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ce9e:	1ad3      	subs	r3, r2, r3
 800cea0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	895b      	ldrh	r3, [r3, #10]
 800cea6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d906      	bls.n	800ceba <ip4_frag+0x10e>
 800ceac:	4b5c      	ldr	r3, [pc, #368]	; (800d020 <ip4_frag+0x274>)
 800ceae:	f240 322d 	movw	r2, #813	; 0x32d
 800ceb2:	495f      	ldr	r1, [pc, #380]	; (800d030 <ip4_frag+0x284>)
 800ceb4:	485c      	ldr	r0, [pc, #368]	; (800d028 <ip4_frag+0x27c>)
 800ceb6:	f000 f9df 	bl	800d278 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800ceba:	8bfa      	ldrh	r2, [r7, #30]
 800cebc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cec0:	4293      	cmp	r3, r2
 800cec2:	bf28      	it	cs
 800cec4:	4613      	movcs	r3, r2
 800cec6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800ceca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d105      	bne.n	800cede <ip4_frag+0x132>
        poff = 0;
 800ced2:	2300      	movs	r3, #0
 800ced4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	60fb      	str	r3, [r7, #12]
        continue;
 800cedc:	e041      	b.n	800cf62 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800cede:	f7ff ff0d 	bl	800ccfc <ip_frag_alloc_pbuf_custom_ref>
 800cee2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800cee4:	69bb      	ldr	r3, [r7, #24]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d103      	bne.n	800cef2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800ceea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ceec:	f7f7 ffc6 	bl	8004e7c <pbuf_free>
        goto memerr;
 800cef0:	e08f      	b.n	800d012 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800cef2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800cef8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cefa:	4413      	add	r3, r2
 800cefc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800cf00:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800cf04:	9201      	str	r2, [sp, #4]
 800cf06:	9300      	str	r3, [sp, #0]
 800cf08:	4603      	mov	r3, r0
 800cf0a:	2241      	movs	r2, #65	; 0x41
 800cf0c:	2000      	movs	r0, #0
 800cf0e:	f7f7 fdfb 	bl	8004b08 <pbuf_alloced_custom>
 800cf12:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d106      	bne.n	800cf28 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800cf1a:	69b8      	ldr	r0, [r7, #24]
 800cf1c:	f7ff fef6 	bl	800cd0c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800cf20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf22:	f7f7 ffab 	bl	8004e7c <pbuf_free>
        goto memerr;
 800cf26:	e074      	b.n	800d012 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800cf28:	68f8      	ldr	r0, [r7, #12]
 800cf2a:	f7f8 f847 	bl	8004fbc <pbuf_ref>
      pcr->original = p;
 800cf2e:	69bb      	ldr	r3, [r7, #24]
 800cf30:	68fa      	ldr	r2, [r7, #12]
 800cf32:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800cf34:	69bb      	ldr	r3, [r7, #24]
 800cf36:	4a3f      	ldr	r2, [pc, #252]	; (800d034 <ip4_frag+0x288>)
 800cf38:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800cf3a:	6979      	ldr	r1, [r7, #20]
 800cf3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf3e:	f7f8 f85f 	bl	8005000 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800cf42:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800cf46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cf4a:	1ad3      	subs	r3, r2, r3
 800cf4c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800cf50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d004      	beq.n	800cf62 <ip4_frag+0x1b6>
        poff = 0;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800cf62:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d196      	bne.n	800ce98 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800cf6a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800cf6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cf70:	4413      	add	r3, r2
 800cf72:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cf78:	f1a3 0213 	sub.w	r2, r3, #19
 800cf7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cf80:	429a      	cmp	r2, r3
 800cf82:	bfcc      	ite	gt
 800cf84:	2301      	movgt	r3, #1
 800cf86:	2300      	movle	r3, #0
 800cf88:	b2db      	uxtb	r3, r3
 800cf8a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800cf8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cf90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf94:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800cf96:	6a3b      	ldr	r3, [r7, #32]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d002      	beq.n	800cfa2 <ip4_frag+0x1f6>
 800cf9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d003      	beq.n	800cfaa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800cfa2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cfa4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cfa8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800cfaa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7f6 fc07 	bl	80037c0 <lwip_htons>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800cfba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cfbc:	3314      	adds	r3, #20
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7f6 fbfd 	bl	80037c0 <lwip_htons>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	461a      	mov	r2, r3
 800cfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfcc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800cfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	729a      	strb	r2, [r3, #10]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	695b      	ldr	r3, [r3, #20]
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cfe0:	68b8      	ldr	r0, [r7, #8]
 800cfe2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800cfe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cfe6:	f7f7 ff49 	bl	8004e7c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800cfea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cfee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cff0:	1ad3      	subs	r3, r2, r3
 800cff2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800cff6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800cffa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cffc:	4413      	add	r3, r2
 800cffe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800d002:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d006:	2b00      	cmp	r3, #0
 800d008:	f47f af19 	bne.w	800ce3e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800d00c:	2300      	movs	r3, #0
 800d00e:	e002      	b.n	800d016 <ip4_frag+0x26a>
      goto memerr;
 800d010:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800d012:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d016:	4618      	mov	r0, r3
 800d018:	3748      	adds	r7, #72	; 0x48
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	bf00      	nop
 800d020:	08010a54 	.word	0x08010a54
 800d024:	08010c30 	.word	0x08010c30
 800d028:	08010a9c 	.word	0x08010a9c
 800d02c:	08010c4c 	.word	0x08010c4c
 800d030:	08010c6c 	.word	0x08010c6c
 800d034:	0800cd45 	.word	0x0800cd45

0800d038 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b086      	sub	sp, #24
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
 800d040:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800d042:	230e      	movs	r3, #14
 800d044:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	895b      	ldrh	r3, [r3, #10]
 800d04a:	2b0e      	cmp	r3, #14
 800d04c:	d96e      	bls.n	800d12c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	7bdb      	ldrb	r3, [r3, #15]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d106      	bne.n	800d064 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d05c:	3301      	adds	r3, #1
 800d05e:	b2da      	uxtb	r2, r3
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	7b1a      	ldrb	r2, [r3, #12]
 800d06e:	7b5b      	ldrb	r3, [r3, #13]
 800d070:	021b      	lsls	r3, r3, #8
 800d072:	4313      	orrs	r3, r2
 800d074:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	781b      	ldrb	r3, [r3, #0]
 800d07a:	f003 0301 	and.w	r3, r3, #1
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d023      	beq.n	800d0ca <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	2b01      	cmp	r3, #1
 800d088:	d10f      	bne.n	800d0aa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	785b      	ldrb	r3, [r3, #1]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d11b      	bne.n	800d0ca <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d096:	2b5e      	cmp	r3, #94	; 0x5e
 800d098:	d117      	bne.n	800d0ca <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	7b5b      	ldrb	r3, [r3, #13]
 800d09e:	f043 0310 	orr.w	r3, r3, #16
 800d0a2:	b2da      	uxtb	r2, r3
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	735a      	strb	r2, [r3, #13]
 800d0a8:	e00f      	b.n	800d0ca <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	2206      	movs	r2, #6
 800d0ae:	4928      	ldr	r1, [pc, #160]	; (800d150 <ethernet_input+0x118>)
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f000 f8bb 	bl	800d22c <memcmp>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d106      	bne.n	800d0ca <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	7b5b      	ldrb	r3, [r3, #13]
 800d0c0:	f043 0308 	orr.w	r3, r3, #8
 800d0c4:	b2da      	uxtb	r2, r3
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800d0ca:	89fb      	ldrh	r3, [r7, #14]
 800d0cc:	2b08      	cmp	r3, #8
 800d0ce:	d003      	beq.n	800d0d8 <ethernet_input+0xa0>
 800d0d0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800d0d4:	d014      	beq.n	800d100 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800d0d6:	e032      	b.n	800d13e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d0de:	f003 0308 	and.w	r3, r3, #8
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d024      	beq.n	800d130 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d0e6:	8afb      	ldrh	r3, [r7, #22]
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f7f7 fe40 	bl	8004d70 <pbuf_remove_header>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d11e      	bne.n	800d134 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800d0f6:	6839      	ldr	r1, [r7, #0]
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f7fe ff21 	bl	800bf40 <ip4_input>
      break;
 800d0fe:	e013      	b.n	800d128 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d106:	f003 0308 	and.w	r3, r3, #8
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d014      	beq.n	800d138 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d10e:	8afb      	ldrh	r3, [r7, #22]
 800d110:	4619      	mov	r1, r3
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f7f7 fe2c 	bl	8004d70 <pbuf_remove_header>
 800d118:	4603      	mov	r3, r0
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d10e      	bne.n	800d13c <ethernet_input+0x104>
        etharp_input(p, netif);
 800d11e:	6839      	ldr	r1, [r7, #0]
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f7fe f8c1 	bl	800b2a8 <etharp_input>
      break;
 800d126:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800d128:	2300      	movs	r3, #0
 800d12a:	e00c      	b.n	800d146 <ethernet_input+0x10e>
    goto free_and_return;
 800d12c:	bf00      	nop
 800d12e:	e006      	b.n	800d13e <ethernet_input+0x106>
        goto free_and_return;
 800d130:	bf00      	nop
 800d132:	e004      	b.n	800d13e <ethernet_input+0x106>
        goto free_and_return;
 800d134:	bf00      	nop
 800d136:	e002      	b.n	800d13e <ethernet_input+0x106>
        goto free_and_return;
 800d138:	bf00      	nop
 800d13a:	e000      	b.n	800d13e <ethernet_input+0x106>
        goto free_and_return;
 800d13c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f7f7 fe9c 	bl	8004e7c <pbuf_free>
  return ERR_OK;
 800d144:	2300      	movs	r3, #0
}
 800d146:	4618      	mov	r0, r3
 800d148:	3718      	adds	r7, #24
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}
 800d14e:	bf00      	nop
 800d150:	08010e00 	.word	0x08010e00

0800d154 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800d154:	b580      	push	{r7, lr}
 800d156:	b086      	sub	sp, #24
 800d158:	af00      	add	r7, sp, #0
 800d15a:	60f8      	str	r0, [r7, #12]
 800d15c:	60b9      	str	r1, [r7, #8]
 800d15e:	607a      	str	r2, [r7, #4]
 800d160:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d162:	8c3b      	ldrh	r3, [r7, #32]
 800d164:	4618      	mov	r0, r3
 800d166:	f7f6 fb2b 	bl	80037c0 <lwip_htons>
 800d16a:	4603      	mov	r3, r0
 800d16c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800d16e:	210e      	movs	r1, #14
 800d170:	68b8      	ldr	r0, [r7, #8]
 800d172:	f7f7 fded 	bl	8004d50 <pbuf_add_header>
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d125      	bne.n	800d1c8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	8afa      	ldrh	r2, [r7, #22]
 800d186:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	2206      	movs	r2, #6
 800d18c:	6839      	ldr	r1, [r7, #0]
 800d18e:	4618      	mov	r0, r3
 800d190:	f000 f85c 	bl	800d24c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	3306      	adds	r3, #6
 800d198:	2206      	movs	r2, #6
 800d19a:	6879      	ldr	r1, [r7, #4]
 800d19c:	4618      	mov	r0, r3
 800d19e:	f000 f855 	bl	800d24c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d1a8:	2b06      	cmp	r3, #6
 800d1aa:	d006      	beq.n	800d1ba <ethernet_output+0x66>
 800d1ac:	4b0a      	ldr	r3, [pc, #40]	; (800d1d8 <ethernet_output+0x84>)
 800d1ae:	f44f 7299 	mov.w	r2, #306	; 0x132
 800d1b2:	490a      	ldr	r1, [pc, #40]	; (800d1dc <ethernet_output+0x88>)
 800d1b4:	480a      	ldr	r0, [pc, #40]	; (800d1e0 <ethernet_output+0x8c>)
 800d1b6:	f000 f85f 	bl	800d278 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	699b      	ldr	r3, [r3, #24]
 800d1be:	68b9      	ldr	r1, [r7, #8]
 800d1c0:	68f8      	ldr	r0, [r7, #12]
 800d1c2:	4798      	blx	r3
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	e002      	b.n	800d1ce <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800d1c8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800d1ca:	f06f 0301 	mvn.w	r3, #1
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3718      	adds	r7, #24
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	08010c7c 	.word	0x08010c7c
 800d1dc:	08010cb4 	.word	0x08010cb4
 800d1e0:	08010ce8 	.word	0x08010ce8

0800d1e4 <__libc_init_array>:
 800d1e4:	b570      	push	{r4, r5, r6, lr}
 800d1e6:	4d0d      	ldr	r5, [pc, #52]	; (800d21c <__libc_init_array+0x38>)
 800d1e8:	4c0d      	ldr	r4, [pc, #52]	; (800d220 <__libc_init_array+0x3c>)
 800d1ea:	1b64      	subs	r4, r4, r5
 800d1ec:	10a4      	asrs	r4, r4, #2
 800d1ee:	2600      	movs	r6, #0
 800d1f0:	42a6      	cmp	r6, r4
 800d1f2:	d109      	bne.n	800d208 <__libc_init_array+0x24>
 800d1f4:	4d0b      	ldr	r5, [pc, #44]	; (800d224 <__libc_init_array+0x40>)
 800d1f6:	4c0c      	ldr	r4, [pc, #48]	; (800d228 <__libc_init_array+0x44>)
 800d1f8:	f001 f88e 	bl	800e318 <_init>
 800d1fc:	1b64      	subs	r4, r4, r5
 800d1fe:	10a4      	asrs	r4, r4, #2
 800d200:	2600      	movs	r6, #0
 800d202:	42a6      	cmp	r6, r4
 800d204:	d105      	bne.n	800d212 <__libc_init_array+0x2e>
 800d206:	bd70      	pop	{r4, r5, r6, pc}
 800d208:	f855 3b04 	ldr.w	r3, [r5], #4
 800d20c:	4798      	blx	r3
 800d20e:	3601      	adds	r6, #1
 800d210:	e7ee      	b.n	800d1f0 <__libc_init_array+0xc>
 800d212:	f855 3b04 	ldr.w	r3, [r5], #4
 800d216:	4798      	blx	r3
 800d218:	3601      	adds	r6, #1
 800d21a:	e7f2      	b.n	800d202 <__libc_init_array+0x1e>
 800d21c:	08010f60 	.word	0x08010f60
 800d220:	08010f60 	.word	0x08010f60
 800d224:	08010f60 	.word	0x08010f60
 800d228:	08010f64 	.word	0x08010f64

0800d22c <memcmp>:
 800d22c:	b510      	push	{r4, lr}
 800d22e:	3901      	subs	r1, #1
 800d230:	4402      	add	r2, r0
 800d232:	4290      	cmp	r0, r2
 800d234:	d101      	bne.n	800d23a <memcmp+0xe>
 800d236:	2000      	movs	r0, #0
 800d238:	e005      	b.n	800d246 <memcmp+0x1a>
 800d23a:	7803      	ldrb	r3, [r0, #0]
 800d23c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d240:	42a3      	cmp	r3, r4
 800d242:	d001      	beq.n	800d248 <memcmp+0x1c>
 800d244:	1b18      	subs	r0, r3, r4
 800d246:	bd10      	pop	{r4, pc}
 800d248:	3001      	adds	r0, #1
 800d24a:	e7f2      	b.n	800d232 <memcmp+0x6>

0800d24c <memcpy>:
 800d24c:	440a      	add	r2, r1
 800d24e:	4291      	cmp	r1, r2
 800d250:	f100 33ff 	add.w	r3, r0, #4294967295
 800d254:	d100      	bne.n	800d258 <memcpy+0xc>
 800d256:	4770      	bx	lr
 800d258:	b510      	push	{r4, lr}
 800d25a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d25e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d262:	4291      	cmp	r1, r2
 800d264:	d1f9      	bne.n	800d25a <memcpy+0xe>
 800d266:	bd10      	pop	{r4, pc}

0800d268 <memset>:
 800d268:	4402      	add	r2, r0
 800d26a:	4603      	mov	r3, r0
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d100      	bne.n	800d272 <memset+0xa>
 800d270:	4770      	bx	lr
 800d272:	f803 1b01 	strb.w	r1, [r3], #1
 800d276:	e7f9      	b.n	800d26c <memset+0x4>

0800d278 <iprintf>:
 800d278:	b40f      	push	{r0, r1, r2, r3}
 800d27a:	4b0a      	ldr	r3, [pc, #40]	; (800d2a4 <iprintf+0x2c>)
 800d27c:	b513      	push	{r0, r1, r4, lr}
 800d27e:	681c      	ldr	r4, [r3, #0]
 800d280:	b124      	cbz	r4, 800d28c <iprintf+0x14>
 800d282:	69a3      	ldr	r3, [r4, #24]
 800d284:	b913      	cbnz	r3, 800d28c <iprintf+0x14>
 800d286:	4620      	mov	r0, r4
 800d288:	f000 f8c2 	bl	800d410 <__sinit>
 800d28c:	ab05      	add	r3, sp, #20
 800d28e:	9a04      	ldr	r2, [sp, #16]
 800d290:	68a1      	ldr	r1, [r4, #8]
 800d292:	9301      	str	r3, [sp, #4]
 800d294:	4620      	mov	r0, r4
 800d296:	f000 fa7f 	bl	800d798 <_vfiprintf_r>
 800d29a:	b002      	add	sp, #8
 800d29c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2a0:	b004      	add	sp, #16
 800d2a2:	4770      	bx	lr
 800d2a4:	2000002c 	.word	0x2000002c

0800d2a8 <rand>:
 800d2a8:	4b16      	ldr	r3, [pc, #88]	; (800d304 <rand+0x5c>)
 800d2aa:	b510      	push	{r4, lr}
 800d2ac:	681c      	ldr	r4, [r3, #0]
 800d2ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d2b0:	b9b3      	cbnz	r3, 800d2e0 <rand+0x38>
 800d2b2:	2018      	movs	r0, #24
 800d2b4:	f000 f95e 	bl	800d574 <malloc>
 800d2b8:	63a0      	str	r0, [r4, #56]	; 0x38
 800d2ba:	b928      	cbnz	r0, 800d2c8 <rand+0x20>
 800d2bc:	4602      	mov	r2, r0
 800d2be:	4b12      	ldr	r3, [pc, #72]	; (800d308 <rand+0x60>)
 800d2c0:	4812      	ldr	r0, [pc, #72]	; (800d30c <rand+0x64>)
 800d2c2:	214e      	movs	r1, #78	; 0x4e
 800d2c4:	f000 f82e 	bl	800d324 <__assert_func>
 800d2c8:	4a11      	ldr	r2, [pc, #68]	; (800d310 <rand+0x68>)
 800d2ca:	4b12      	ldr	r3, [pc, #72]	; (800d314 <rand+0x6c>)
 800d2cc:	e9c0 2300 	strd	r2, r3, [r0]
 800d2d0:	4b11      	ldr	r3, [pc, #68]	; (800d318 <rand+0x70>)
 800d2d2:	6083      	str	r3, [r0, #8]
 800d2d4:	230b      	movs	r3, #11
 800d2d6:	8183      	strh	r3, [r0, #12]
 800d2d8:	2201      	movs	r2, #1
 800d2da:	2300      	movs	r3, #0
 800d2dc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800d2e0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800d2e2:	4a0e      	ldr	r2, [pc, #56]	; (800d31c <rand+0x74>)
 800d2e4:	6920      	ldr	r0, [r4, #16]
 800d2e6:	6963      	ldr	r3, [r4, #20]
 800d2e8:	490d      	ldr	r1, [pc, #52]	; (800d320 <rand+0x78>)
 800d2ea:	4342      	muls	r2, r0
 800d2ec:	fb01 2203 	mla	r2, r1, r3, r2
 800d2f0:	fba0 0101 	umull	r0, r1, r0, r1
 800d2f4:	1c43      	adds	r3, r0, #1
 800d2f6:	eb42 0001 	adc.w	r0, r2, r1
 800d2fa:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800d2fe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d302:	bd10      	pop	{r4, pc}
 800d304:	2000002c 	.word	0x2000002c
 800d308:	08010e14 	.word	0x08010e14
 800d30c:	08010e2b 	.word	0x08010e2b
 800d310:	abcd330e 	.word	0xabcd330e
 800d314:	e66d1234 	.word	0xe66d1234
 800d318:	0005deec 	.word	0x0005deec
 800d31c:	5851f42d 	.word	0x5851f42d
 800d320:	4c957f2d 	.word	0x4c957f2d

0800d324 <__assert_func>:
 800d324:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d326:	4614      	mov	r4, r2
 800d328:	461a      	mov	r2, r3
 800d32a:	4b09      	ldr	r3, [pc, #36]	; (800d350 <__assert_func+0x2c>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	4605      	mov	r5, r0
 800d330:	68d8      	ldr	r0, [r3, #12]
 800d332:	b14c      	cbz	r4, 800d348 <__assert_func+0x24>
 800d334:	4b07      	ldr	r3, [pc, #28]	; (800d354 <__assert_func+0x30>)
 800d336:	9100      	str	r1, [sp, #0]
 800d338:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d33c:	4906      	ldr	r1, [pc, #24]	; (800d358 <__assert_func+0x34>)
 800d33e:	462b      	mov	r3, r5
 800d340:	f000 f8e4 	bl	800d50c <fiprintf>
 800d344:	f000 fe12 	bl	800df6c <abort>
 800d348:	4b04      	ldr	r3, [pc, #16]	; (800d35c <__assert_func+0x38>)
 800d34a:	461c      	mov	r4, r3
 800d34c:	e7f3      	b.n	800d336 <__assert_func+0x12>
 800d34e:	bf00      	nop
 800d350:	2000002c 	.word	0x2000002c
 800d354:	08010e86 	.word	0x08010e86
 800d358:	08010e93 	.word	0x08010e93
 800d35c:	08010ec1 	.word	0x08010ec1

0800d360 <std>:
 800d360:	2300      	movs	r3, #0
 800d362:	b510      	push	{r4, lr}
 800d364:	4604      	mov	r4, r0
 800d366:	e9c0 3300 	strd	r3, r3, [r0]
 800d36a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d36e:	6083      	str	r3, [r0, #8]
 800d370:	8181      	strh	r1, [r0, #12]
 800d372:	6643      	str	r3, [r0, #100]	; 0x64
 800d374:	81c2      	strh	r2, [r0, #14]
 800d376:	6183      	str	r3, [r0, #24]
 800d378:	4619      	mov	r1, r3
 800d37a:	2208      	movs	r2, #8
 800d37c:	305c      	adds	r0, #92	; 0x5c
 800d37e:	f7ff ff73 	bl	800d268 <memset>
 800d382:	4b05      	ldr	r3, [pc, #20]	; (800d398 <std+0x38>)
 800d384:	6263      	str	r3, [r4, #36]	; 0x24
 800d386:	4b05      	ldr	r3, [pc, #20]	; (800d39c <std+0x3c>)
 800d388:	62a3      	str	r3, [r4, #40]	; 0x28
 800d38a:	4b05      	ldr	r3, [pc, #20]	; (800d3a0 <std+0x40>)
 800d38c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d38e:	4b05      	ldr	r3, [pc, #20]	; (800d3a4 <std+0x44>)
 800d390:	6224      	str	r4, [r4, #32]
 800d392:	6323      	str	r3, [r4, #48]	; 0x30
 800d394:	bd10      	pop	{r4, pc}
 800d396:	bf00      	nop
 800d398:	0800dd41 	.word	0x0800dd41
 800d39c:	0800dd63 	.word	0x0800dd63
 800d3a0:	0800dd9b 	.word	0x0800dd9b
 800d3a4:	0800ddbf 	.word	0x0800ddbf

0800d3a8 <_cleanup_r>:
 800d3a8:	4901      	ldr	r1, [pc, #4]	; (800d3b0 <_cleanup_r+0x8>)
 800d3aa:	f000 b8c1 	b.w	800d530 <_fwalk_reent>
 800d3ae:	bf00      	nop
 800d3b0:	0800e0a9 	.word	0x0800e0a9

0800d3b4 <__sfmoreglue>:
 800d3b4:	b570      	push	{r4, r5, r6, lr}
 800d3b6:	2268      	movs	r2, #104	; 0x68
 800d3b8:	1e4d      	subs	r5, r1, #1
 800d3ba:	4355      	muls	r5, r2
 800d3bc:	460e      	mov	r6, r1
 800d3be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d3c2:	f000 f94b 	bl	800d65c <_malloc_r>
 800d3c6:	4604      	mov	r4, r0
 800d3c8:	b140      	cbz	r0, 800d3dc <__sfmoreglue+0x28>
 800d3ca:	2100      	movs	r1, #0
 800d3cc:	e9c0 1600 	strd	r1, r6, [r0]
 800d3d0:	300c      	adds	r0, #12
 800d3d2:	60a0      	str	r0, [r4, #8]
 800d3d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d3d8:	f7ff ff46 	bl	800d268 <memset>
 800d3dc:	4620      	mov	r0, r4
 800d3de:	bd70      	pop	{r4, r5, r6, pc}

0800d3e0 <__sfp_lock_acquire>:
 800d3e0:	4801      	ldr	r0, [pc, #4]	; (800d3e8 <__sfp_lock_acquire+0x8>)
 800d3e2:	f000 b8c5 	b.w	800d570 <__retarget_lock_acquire_recursive>
 800d3e6:	bf00      	nop
 800d3e8:	2000b565 	.word	0x2000b565

0800d3ec <__sfp_lock_release>:
 800d3ec:	4801      	ldr	r0, [pc, #4]	; (800d3f4 <__sfp_lock_release+0x8>)
 800d3ee:	f000 b8c0 	b.w	800d572 <__retarget_lock_release_recursive>
 800d3f2:	bf00      	nop
 800d3f4:	2000b565 	.word	0x2000b565

0800d3f8 <__sinit_lock_acquire>:
 800d3f8:	4801      	ldr	r0, [pc, #4]	; (800d400 <__sinit_lock_acquire+0x8>)
 800d3fa:	f000 b8b9 	b.w	800d570 <__retarget_lock_acquire_recursive>
 800d3fe:	bf00      	nop
 800d400:	2000b566 	.word	0x2000b566

0800d404 <__sinit_lock_release>:
 800d404:	4801      	ldr	r0, [pc, #4]	; (800d40c <__sinit_lock_release+0x8>)
 800d406:	f000 b8b4 	b.w	800d572 <__retarget_lock_release_recursive>
 800d40a:	bf00      	nop
 800d40c:	2000b566 	.word	0x2000b566

0800d410 <__sinit>:
 800d410:	b510      	push	{r4, lr}
 800d412:	4604      	mov	r4, r0
 800d414:	f7ff fff0 	bl	800d3f8 <__sinit_lock_acquire>
 800d418:	69a3      	ldr	r3, [r4, #24]
 800d41a:	b11b      	cbz	r3, 800d424 <__sinit+0x14>
 800d41c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d420:	f7ff bff0 	b.w	800d404 <__sinit_lock_release>
 800d424:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d428:	6523      	str	r3, [r4, #80]	; 0x50
 800d42a:	4b13      	ldr	r3, [pc, #76]	; (800d478 <__sinit+0x68>)
 800d42c:	4a13      	ldr	r2, [pc, #76]	; (800d47c <__sinit+0x6c>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	62a2      	str	r2, [r4, #40]	; 0x28
 800d432:	42a3      	cmp	r3, r4
 800d434:	bf04      	itt	eq
 800d436:	2301      	moveq	r3, #1
 800d438:	61a3      	streq	r3, [r4, #24]
 800d43a:	4620      	mov	r0, r4
 800d43c:	f000 f820 	bl	800d480 <__sfp>
 800d440:	6060      	str	r0, [r4, #4]
 800d442:	4620      	mov	r0, r4
 800d444:	f000 f81c 	bl	800d480 <__sfp>
 800d448:	60a0      	str	r0, [r4, #8]
 800d44a:	4620      	mov	r0, r4
 800d44c:	f000 f818 	bl	800d480 <__sfp>
 800d450:	2200      	movs	r2, #0
 800d452:	60e0      	str	r0, [r4, #12]
 800d454:	2104      	movs	r1, #4
 800d456:	6860      	ldr	r0, [r4, #4]
 800d458:	f7ff ff82 	bl	800d360 <std>
 800d45c:	68a0      	ldr	r0, [r4, #8]
 800d45e:	2201      	movs	r2, #1
 800d460:	2109      	movs	r1, #9
 800d462:	f7ff ff7d 	bl	800d360 <std>
 800d466:	68e0      	ldr	r0, [r4, #12]
 800d468:	2202      	movs	r2, #2
 800d46a:	2112      	movs	r1, #18
 800d46c:	f7ff ff78 	bl	800d360 <std>
 800d470:	2301      	movs	r3, #1
 800d472:	61a3      	str	r3, [r4, #24]
 800d474:	e7d2      	b.n	800d41c <__sinit+0xc>
 800d476:	bf00      	nop
 800d478:	08010e10 	.word	0x08010e10
 800d47c:	0800d3a9 	.word	0x0800d3a9

0800d480 <__sfp>:
 800d480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d482:	4607      	mov	r7, r0
 800d484:	f7ff ffac 	bl	800d3e0 <__sfp_lock_acquire>
 800d488:	4b1e      	ldr	r3, [pc, #120]	; (800d504 <__sfp+0x84>)
 800d48a:	681e      	ldr	r6, [r3, #0]
 800d48c:	69b3      	ldr	r3, [r6, #24]
 800d48e:	b913      	cbnz	r3, 800d496 <__sfp+0x16>
 800d490:	4630      	mov	r0, r6
 800d492:	f7ff ffbd 	bl	800d410 <__sinit>
 800d496:	3648      	adds	r6, #72	; 0x48
 800d498:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d49c:	3b01      	subs	r3, #1
 800d49e:	d503      	bpl.n	800d4a8 <__sfp+0x28>
 800d4a0:	6833      	ldr	r3, [r6, #0]
 800d4a2:	b30b      	cbz	r3, 800d4e8 <__sfp+0x68>
 800d4a4:	6836      	ldr	r6, [r6, #0]
 800d4a6:	e7f7      	b.n	800d498 <__sfp+0x18>
 800d4a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d4ac:	b9d5      	cbnz	r5, 800d4e4 <__sfp+0x64>
 800d4ae:	4b16      	ldr	r3, [pc, #88]	; (800d508 <__sfp+0x88>)
 800d4b0:	60e3      	str	r3, [r4, #12]
 800d4b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d4b6:	6665      	str	r5, [r4, #100]	; 0x64
 800d4b8:	f000 f859 	bl	800d56e <__retarget_lock_init_recursive>
 800d4bc:	f7ff ff96 	bl	800d3ec <__sfp_lock_release>
 800d4c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d4c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d4c8:	6025      	str	r5, [r4, #0]
 800d4ca:	61a5      	str	r5, [r4, #24]
 800d4cc:	2208      	movs	r2, #8
 800d4ce:	4629      	mov	r1, r5
 800d4d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d4d4:	f7ff fec8 	bl	800d268 <memset>
 800d4d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d4dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4e4:	3468      	adds	r4, #104	; 0x68
 800d4e6:	e7d9      	b.n	800d49c <__sfp+0x1c>
 800d4e8:	2104      	movs	r1, #4
 800d4ea:	4638      	mov	r0, r7
 800d4ec:	f7ff ff62 	bl	800d3b4 <__sfmoreglue>
 800d4f0:	4604      	mov	r4, r0
 800d4f2:	6030      	str	r0, [r6, #0]
 800d4f4:	2800      	cmp	r0, #0
 800d4f6:	d1d5      	bne.n	800d4a4 <__sfp+0x24>
 800d4f8:	f7ff ff78 	bl	800d3ec <__sfp_lock_release>
 800d4fc:	230c      	movs	r3, #12
 800d4fe:	603b      	str	r3, [r7, #0]
 800d500:	e7ee      	b.n	800d4e0 <__sfp+0x60>
 800d502:	bf00      	nop
 800d504:	08010e10 	.word	0x08010e10
 800d508:	ffff0001 	.word	0xffff0001

0800d50c <fiprintf>:
 800d50c:	b40e      	push	{r1, r2, r3}
 800d50e:	b503      	push	{r0, r1, lr}
 800d510:	4601      	mov	r1, r0
 800d512:	ab03      	add	r3, sp, #12
 800d514:	4805      	ldr	r0, [pc, #20]	; (800d52c <fiprintf+0x20>)
 800d516:	f853 2b04 	ldr.w	r2, [r3], #4
 800d51a:	6800      	ldr	r0, [r0, #0]
 800d51c:	9301      	str	r3, [sp, #4]
 800d51e:	f000 f93b 	bl	800d798 <_vfiprintf_r>
 800d522:	b002      	add	sp, #8
 800d524:	f85d eb04 	ldr.w	lr, [sp], #4
 800d528:	b003      	add	sp, #12
 800d52a:	4770      	bx	lr
 800d52c:	2000002c 	.word	0x2000002c

0800d530 <_fwalk_reent>:
 800d530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d534:	4606      	mov	r6, r0
 800d536:	4688      	mov	r8, r1
 800d538:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d53c:	2700      	movs	r7, #0
 800d53e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d542:	f1b9 0901 	subs.w	r9, r9, #1
 800d546:	d505      	bpl.n	800d554 <_fwalk_reent+0x24>
 800d548:	6824      	ldr	r4, [r4, #0]
 800d54a:	2c00      	cmp	r4, #0
 800d54c:	d1f7      	bne.n	800d53e <_fwalk_reent+0xe>
 800d54e:	4638      	mov	r0, r7
 800d550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d554:	89ab      	ldrh	r3, [r5, #12]
 800d556:	2b01      	cmp	r3, #1
 800d558:	d907      	bls.n	800d56a <_fwalk_reent+0x3a>
 800d55a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d55e:	3301      	adds	r3, #1
 800d560:	d003      	beq.n	800d56a <_fwalk_reent+0x3a>
 800d562:	4629      	mov	r1, r5
 800d564:	4630      	mov	r0, r6
 800d566:	47c0      	blx	r8
 800d568:	4307      	orrs	r7, r0
 800d56a:	3568      	adds	r5, #104	; 0x68
 800d56c:	e7e9      	b.n	800d542 <_fwalk_reent+0x12>

0800d56e <__retarget_lock_init_recursive>:
 800d56e:	4770      	bx	lr

0800d570 <__retarget_lock_acquire_recursive>:
 800d570:	4770      	bx	lr

0800d572 <__retarget_lock_release_recursive>:
 800d572:	4770      	bx	lr

0800d574 <malloc>:
 800d574:	4b02      	ldr	r3, [pc, #8]	; (800d580 <malloc+0xc>)
 800d576:	4601      	mov	r1, r0
 800d578:	6818      	ldr	r0, [r3, #0]
 800d57a:	f000 b86f 	b.w	800d65c <_malloc_r>
 800d57e:	bf00      	nop
 800d580:	2000002c 	.word	0x2000002c

0800d584 <_free_r>:
 800d584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d586:	2900      	cmp	r1, #0
 800d588:	d044      	beq.n	800d614 <_free_r+0x90>
 800d58a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d58e:	9001      	str	r0, [sp, #4]
 800d590:	2b00      	cmp	r3, #0
 800d592:	f1a1 0404 	sub.w	r4, r1, #4
 800d596:	bfb8      	it	lt
 800d598:	18e4      	addlt	r4, r4, r3
 800d59a:	f000 fe39 	bl	800e210 <__malloc_lock>
 800d59e:	4a1e      	ldr	r2, [pc, #120]	; (800d618 <_free_r+0x94>)
 800d5a0:	9801      	ldr	r0, [sp, #4]
 800d5a2:	6813      	ldr	r3, [r2, #0]
 800d5a4:	b933      	cbnz	r3, 800d5b4 <_free_r+0x30>
 800d5a6:	6063      	str	r3, [r4, #4]
 800d5a8:	6014      	str	r4, [r2, #0]
 800d5aa:	b003      	add	sp, #12
 800d5ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d5b0:	f000 be34 	b.w	800e21c <__malloc_unlock>
 800d5b4:	42a3      	cmp	r3, r4
 800d5b6:	d908      	bls.n	800d5ca <_free_r+0x46>
 800d5b8:	6825      	ldr	r5, [r4, #0]
 800d5ba:	1961      	adds	r1, r4, r5
 800d5bc:	428b      	cmp	r3, r1
 800d5be:	bf01      	itttt	eq
 800d5c0:	6819      	ldreq	r1, [r3, #0]
 800d5c2:	685b      	ldreq	r3, [r3, #4]
 800d5c4:	1949      	addeq	r1, r1, r5
 800d5c6:	6021      	streq	r1, [r4, #0]
 800d5c8:	e7ed      	b.n	800d5a6 <_free_r+0x22>
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	685b      	ldr	r3, [r3, #4]
 800d5ce:	b10b      	cbz	r3, 800d5d4 <_free_r+0x50>
 800d5d0:	42a3      	cmp	r3, r4
 800d5d2:	d9fa      	bls.n	800d5ca <_free_r+0x46>
 800d5d4:	6811      	ldr	r1, [r2, #0]
 800d5d6:	1855      	adds	r5, r2, r1
 800d5d8:	42a5      	cmp	r5, r4
 800d5da:	d10b      	bne.n	800d5f4 <_free_r+0x70>
 800d5dc:	6824      	ldr	r4, [r4, #0]
 800d5de:	4421      	add	r1, r4
 800d5e0:	1854      	adds	r4, r2, r1
 800d5e2:	42a3      	cmp	r3, r4
 800d5e4:	6011      	str	r1, [r2, #0]
 800d5e6:	d1e0      	bne.n	800d5aa <_free_r+0x26>
 800d5e8:	681c      	ldr	r4, [r3, #0]
 800d5ea:	685b      	ldr	r3, [r3, #4]
 800d5ec:	6053      	str	r3, [r2, #4]
 800d5ee:	4421      	add	r1, r4
 800d5f0:	6011      	str	r1, [r2, #0]
 800d5f2:	e7da      	b.n	800d5aa <_free_r+0x26>
 800d5f4:	d902      	bls.n	800d5fc <_free_r+0x78>
 800d5f6:	230c      	movs	r3, #12
 800d5f8:	6003      	str	r3, [r0, #0]
 800d5fa:	e7d6      	b.n	800d5aa <_free_r+0x26>
 800d5fc:	6825      	ldr	r5, [r4, #0]
 800d5fe:	1961      	adds	r1, r4, r5
 800d600:	428b      	cmp	r3, r1
 800d602:	bf04      	itt	eq
 800d604:	6819      	ldreq	r1, [r3, #0]
 800d606:	685b      	ldreq	r3, [r3, #4]
 800d608:	6063      	str	r3, [r4, #4]
 800d60a:	bf04      	itt	eq
 800d60c:	1949      	addeq	r1, r1, r5
 800d60e:	6021      	streq	r1, [r4, #0]
 800d610:	6054      	str	r4, [r2, #4]
 800d612:	e7ca      	b.n	800d5aa <_free_r+0x26>
 800d614:	b003      	add	sp, #12
 800d616:	bd30      	pop	{r4, r5, pc}
 800d618:	2000b568 	.word	0x2000b568

0800d61c <sbrk_aligned>:
 800d61c:	b570      	push	{r4, r5, r6, lr}
 800d61e:	4e0e      	ldr	r6, [pc, #56]	; (800d658 <sbrk_aligned+0x3c>)
 800d620:	460c      	mov	r4, r1
 800d622:	6831      	ldr	r1, [r6, #0]
 800d624:	4605      	mov	r5, r0
 800d626:	b911      	cbnz	r1, 800d62e <sbrk_aligned+0x12>
 800d628:	f000 fb7a 	bl	800dd20 <_sbrk_r>
 800d62c:	6030      	str	r0, [r6, #0]
 800d62e:	4621      	mov	r1, r4
 800d630:	4628      	mov	r0, r5
 800d632:	f000 fb75 	bl	800dd20 <_sbrk_r>
 800d636:	1c43      	adds	r3, r0, #1
 800d638:	d00a      	beq.n	800d650 <sbrk_aligned+0x34>
 800d63a:	1cc4      	adds	r4, r0, #3
 800d63c:	f024 0403 	bic.w	r4, r4, #3
 800d640:	42a0      	cmp	r0, r4
 800d642:	d007      	beq.n	800d654 <sbrk_aligned+0x38>
 800d644:	1a21      	subs	r1, r4, r0
 800d646:	4628      	mov	r0, r5
 800d648:	f000 fb6a 	bl	800dd20 <_sbrk_r>
 800d64c:	3001      	adds	r0, #1
 800d64e:	d101      	bne.n	800d654 <sbrk_aligned+0x38>
 800d650:	f04f 34ff 	mov.w	r4, #4294967295
 800d654:	4620      	mov	r0, r4
 800d656:	bd70      	pop	{r4, r5, r6, pc}
 800d658:	2000b56c 	.word	0x2000b56c

0800d65c <_malloc_r>:
 800d65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d660:	1ccd      	adds	r5, r1, #3
 800d662:	f025 0503 	bic.w	r5, r5, #3
 800d666:	3508      	adds	r5, #8
 800d668:	2d0c      	cmp	r5, #12
 800d66a:	bf38      	it	cc
 800d66c:	250c      	movcc	r5, #12
 800d66e:	2d00      	cmp	r5, #0
 800d670:	4607      	mov	r7, r0
 800d672:	db01      	blt.n	800d678 <_malloc_r+0x1c>
 800d674:	42a9      	cmp	r1, r5
 800d676:	d905      	bls.n	800d684 <_malloc_r+0x28>
 800d678:	230c      	movs	r3, #12
 800d67a:	603b      	str	r3, [r7, #0]
 800d67c:	2600      	movs	r6, #0
 800d67e:	4630      	mov	r0, r6
 800d680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d684:	4e2e      	ldr	r6, [pc, #184]	; (800d740 <_malloc_r+0xe4>)
 800d686:	f000 fdc3 	bl	800e210 <__malloc_lock>
 800d68a:	6833      	ldr	r3, [r6, #0]
 800d68c:	461c      	mov	r4, r3
 800d68e:	bb34      	cbnz	r4, 800d6de <_malloc_r+0x82>
 800d690:	4629      	mov	r1, r5
 800d692:	4638      	mov	r0, r7
 800d694:	f7ff ffc2 	bl	800d61c <sbrk_aligned>
 800d698:	1c43      	adds	r3, r0, #1
 800d69a:	4604      	mov	r4, r0
 800d69c:	d14d      	bne.n	800d73a <_malloc_r+0xde>
 800d69e:	6834      	ldr	r4, [r6, #0]
 800d6a0:	4626      	mov	r6, r4
 800d6a2:	2e00      	cmp	r6, #0
 800d6a4:	d140      	bne.n	800d728 <_malloc_r+0xcc>
 800d6a6:	6823      	ldr	r3, [r4, #0]
 800d6a8:	4631      	mov	r1, r6
 800d6aa:	4638      	mov	r0, r7
 800d6ac:	eb04 0803 	add.w	r8, r4, r3
 800d6b0:	f000 fb36 	bl	800dd20 <_sbrk_r>
 800d6b4:	4580      	cmp	r8, r0
 800d6b6:	d13a      	bne.n	800d72e <_malloc_r+0xd2>
 800d6b8:	6821      	ldr	r1, [r4, #0]
 800d6ba:	3503      	adds	r5, #3
 800d6bc:	1a6d      	subs	r5, r5, r1
 800d6be:	f025 0503 	bic.w	r5, r5, #3
 800d6c2:	3508      	adds	r5, #8
 800d6c4:	2d0c      	cmp	r5, #12
 800d6c6:	bf38      	it	cc
 800d6c8:	250c      	movcc	r5, #12
 800d6ca:	4629      	mov	r1, r5
 800d6cc:	4638      	mov	r0, r7
 800d6ce:	f7ff ffa5 	bl	800d61c <sbrk_aligned>
 800d6d2:	3001      	adds	r0, #1
 800d6d4:	d02b      	beq.n	800d72e <_malloc_r+0xd2>
 800d6d6:	6823      	ldr	r3, [r4, #0]
 800d6d8:	442b      	add	r3, r5
 800d6da:	6023      	str	r3, [r4, #0]
 800d6dc:	e00e      	b.n	800d6fc <_malloc_r+0xa0>
 800d6de:	6822      	ldr	r2, [r4, #0]
 800d6e0:	1b52      	subs	r2, r2, r5
 800d6e2:	d41e      	bmi.n	800d722 <_malloc_r+0xc6>
 800d6e4:	2a0b      	cmp	r2, #11
 800d6e6:	d916      	bls.n	800d716 <_malloc_r+0xba>
 800d6e8:	1961      	adds	r1, r4, r5
 800d6ea:	42a3      	cmp	r3, r4
 800d6ec:	6025      	str	r5, [r4, #0]
 800d6ee:	bf18      	it	ne
 800d6f0:	6059      	strne	r1, [r3, #4]
 800d6f2:	6863      	ldr	r3, [r4, #4]
 800d6f4:	bf08      	it	eq
 800d6f6:	6031      	streq	r1, [r6, #0]
 800d6f8:	5162      	str	r2, [r4, r5]
 800d6fa:	604b      	str	r3, [r1, #4]
 800d6fc:	4638      	mov	r0, r7
 800d6fe:	f104 060b 	add.w	r6, r4, #11
 800d702:	f000 fd8b 	bl	800e21c <__malloc_unlock>
 800d706:	f026 0607 	bic.w	r6, r6, #7
 800d70a:	1d23      	adds	r3, r4, #4
 800d70c:	1af2      	subs	r2, r6, r3
 800d70e:	d0b6      	beq.n	800d67e <_malloc_r+0x22>
 800d710:	1b9b      	subs	r3, r3, r6
 800d712:	50a3      	str	r3, [r4, r2]
 800d714:	e7b3      	b.n	800d67e <_malloc_r+0x22>
 800d716:	6862      	ldr	r2, [r4, #4]
 800d718:	42a3      	cmp	r3, r4
 800d71a:	bf0c      	ite	eq
 800d71c:	6032      	streq	r2, [r6, #0]
 800d71e:	605a      	strne	r2, [r3, #4]
 800d720:	e7ec      	b.n	800d6fc <_malloc_r+0xa0>
 800d722:	4623      	mov	r3, r4
 800d724:	6864      	ldr	r4, [r4, #4]
 800d726:	e7b2      	b.n	800d68e <_malloc_r+0x32>
 800d728:	4634      	mov	r4, r6
 800d72a:	6876      	ldr	r6, [r6, #4]
 800d72c:	e7b9      	b.n	800d6a2 <_malloc_r+0x46>
 800d72e:	230c      	movs	r3, #12
 800d730:	603b      	str	r3, [r7, #0]
 800d732:	4638      	mov	r0, r7
 800d734:	f000 fd72 	bl	800e21c <__malloc_unlock>
 800d738:	e7a1      	b.n	800d67e <_malloc_r+0x22>
 800d73a:	6025      	str	r5, [r4, #0]
 800d73c:	e7de      	b.n	800d6fc <_malloc_r+0xa0>
 800d73e:	bf00      	nop
 800d740:	2000b568 	.word	0x2000b568

0800d744 <__sfputc_r>:
 800d744:	6893      	ldr	r3, [r2, #8]
 800d746:	3b01      	subs	r3, #1
 800d748:	2b00      	cmp	r3, #0
 800d74a:	b410      	push	{r4}
 800d74c:	6093      	str	r3, [r2, #8]
 800d74e:	da08      	bge.n	800d762 <__sfputc_r+0x1e>
 800d750:	6994      	ldr	r4, [r2, #24]
 800d752:	42a3      	cmp	r3, r4
 800d754:	db01      	blt.n	800d75a <__sfputc_r+0x16>
 800d756:	290a      	cmp	r1, #10
 800d758:	d103      	bne.n	800d762 <__sfputc_r+0x1e>
 800d75a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d75e:	f000 bb33 	b.w	800ddc8 <__swbuf_r>
 800d762:	6813      	ldr	r3, [r2, #0]
 800d764:	1c58      	adds	r0, r3, #1
 800d766:	6010      	str	r0, [r2, #0]
 800d768:	7019      	strb	r1, [r3, #0]
 800d76a:	4608      	mov	r0, r1
 800d76c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d770:	4770      	bx	lr

0800d772 <__sfputs_r>:
 800d772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d774:	4606      	mov	r6, r0
 800d776:	460f      	mov	r7, r1
 800d778:	4614      	mov	r4, r2
 800d77a:	18d5      	adds	r5, r2, r3
 800d77c:	42ac      	cmp	r4, r5
 800d77e:	d101      	bne.n	800d784 <__sfputs_r+0x12>
 800d780:	2000      	movs	r0, #0
 800d782:	e007      	b.n	800d794 <__sfputs_r+0x22>
 800d784:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d788:	463a      	mov	r2, r7
 800d78a:	4630      	mov	r0, r6
 800d78c:	f7ff ffda 	bl	800d744 <__sfputc_r>
 800d790:	1c43      	adds	r3, r0, #1
 800d792:	d1f3      	bne.n	800d77c <__sfputs_r+0xa>
 800d794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d798 <_vfiprintf_r>:
 800d798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d79c:	460d      	mov	r5, r1
 800d79e:	b09d      	sub	sp, #116	; 0x74
 800d7a0:	4614      	mov	r4, r2
 800d7a2:	4698      	mov	r8, r3
 800d7a4:	4606      	mov	r6, r0
 800d7a6:	b118      	cbz	r0, 800d7b0 <_vfiprintf_r+0x18>
 800d7a8:	6983      	ldr	r3, [r0, #24]
 800d7aa:	b90b      	cbnz	r3, 800d7b0 <_vfiprintf_r+0x18>
 800d7ac:	f7ff fe30 	bl	800d410 <__sinit>
 800d7b0:	4b89      	ldr	r3, [pc, #548]	; (800d9d8 <_vfiprintf_r+0x240>)
 800d7b2:	429d      	cmp	r5, r3
 800d7b4:	d11b      	bne.n	800d7ee <_vfiprintf_r+0x56>
 800d7b6:	6875      	ldr	r5, [r6, #4]
 800d7b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7ba:	07d9      	lsls	r1, r3, #31
 800d7bc:	d405      	bmi.n	800d7ca <_vfiprintf_r+0x32>
 800d7be:	89ab      	ldrh	r3, [r5, #12]
 800d7c0:	059a      	lsls	r2, r3, #22
 800d7c2:	d402      	bmi.n	800d7ca <_vfiprintf_r+0x32>
 800d7c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7c6:	f7ff fed3 	bl	800d570 <__retarget_lock_acquire_recursive>
 800d7ca:	89ab      	ldrh	r3, [r5, #12]
 800d7cc:	071b      	lsls	r3, r3, #28
 800d7ce:	d501      	bpl.n	800d7d4 <_vfiprintf_r+0x3c>
 800d7d0:	692b      	ldr	r3, [r5, #16]
 800d7d2:	b9eb      	cbnz	r3, 800d810 <_vfiprintf_r+0x78>
 800d7d4:	4629      	mov	r1, r5
 800d7d6:	4630      	mov	r0, r6
 800d7d8:	f000 fb5a 	bl	800de90 <__swsetup_r>
 800d7dc:	b1c0      	cbz	r0, 800d810 <_vfiprintf_r+0x78>
 800d7de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7e0:	07dc      	lsls	r4, r3, #31
 800d7e2:	d50e      	bpl.n	800d802 <_vfiprintf_r+0x6a>
 800d7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7e8:	b01d      	add	sp, #116	; 0x74
 800d7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ee:	4b7b      	ldr	r3, [pc, #492]	; (800d9dc <_vfiprintf_r+0x244>)
 800d7f0:	429d      	cmp	r5, r3
 800d7f2:	d101      	bne.n	800d7f8 <_vfiprintf_r+0x60>
 800d7f4:	68b5      	ldr	r5, [r6, #8]
 800d7f6:	e7df      	b.n	800d7b8 <_vfiprintf_r+0x20>
 800d7f8:	4b79      	ldr	r3, [pc, #484]	; (800d9e0 <_vfiprintf_r+0x248>)
 800d7fa:	429d      	cmp	r5, r3
 800d7fc:	bf08      	it	eq
 800d7fe:	68f5      	ldreq	r5, [r6, #12]
 800d800:	e7da      	b.n	800d7b8 <_vfiprintf_r+0x20>
 800d802:	89ab      	ldrh	r3, [r5, #12]
 800d804:	0598      	lsls	r0, r3, #22
 800d806:	d4ed      	bmi.n	800d7e4 <_vfiprintf_r+0x4c>
 800d808:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d80a:	f7ff feb2 	bl	800d572 <__retarget_lock_release_recursive>
 800d80e:	e7e9      	b.n	800d7e4 <_vfiprintf_r+0x4c>
 800d810:	2300      	movs	r3, #0
 800d812:	9309      	str	r3, [sp, #36]	; 0x24
 800d814:	2320      	movs	r3, #32
 800d816:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d81a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d81e:	2330      	movs	r3, #48	; 0x30
 800d820:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d9e4 <_vfiprintf_r+0x24c>
 800d824:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d828:	f04f 0901 	mov.w	r9, #1
 800d82c:	4623      	mov	r3, r4
 800d82e:	469a      	mov	sl, r3
 800d830:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d834:	b10a      	cbz	r2, 800d83a <_vfiprintf_r+0xa2>
 800d836:	2a25      	cmp	r2, #37	; 0x25
 800d838:	d1f9      	bne.n	800d82e <_vfiprintf_r+0x96>
 800d83a:	ebba 0b04 	subs.w	fp, sl, r4
 800d83e:	d00b      	beq.n	800d858 <_vfiprintf_r+0xc0>
 800d840:	465b      	mov	r3, fp
 800d842:	4622      	mov	r2, r4
 800d844:	4629      	mov	r1, r5
 800d846:	4630      	mov	r0, r6
 800d848:	f7ff ff93 	bl	800d772 <__sfputs_r>
 800d84c:	3001      	adds	r0, #1
 800d84e:	f000 80aa 	beq.w	800d9a6 <_vfiprintf_r+0x20e>
 800d852:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d854:	445a      	add	r2, fp
 800d856:	9209      	str	r2, [sp, #36]	; 0x24
 800d858:	f89a 3000 	ldrb.w	r3, [sl]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	f000 80a2 	beq.w	800d9a6 <_vfiprintf_r+0x20e>
 800d862:	2300      	movs	r3, #0
 800d864:	f04f 32ff 	mov.w	r2, #4294967295
 800d868:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d86c:	f10a 0a01 	add.w	sl, sl, #1
 800d870:	9304      	str	r3, [sp, #16]
 800d872:	9307      	str	r3, [sp, #28]
 800d874:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d878:	931a      	str	r3, [sp, #104]	; 0x68
 800d87a:	4654      	mov	r4, sl
 800d87c:	2205      	movs	r2, #5
 800d87e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d882:	4858      	ldr	r0, [pc, #352]	; (800d9e4 <_vfiprintf_r+0x24c>)
 800d884:	f7f2 fcc4 	bl	8000210 <memchr>
 800d888:	9a04      	ldr	r2, [sp, #16]
 800d88a:	b9d8      	cbnz	r0, 800d8c4 <_vfiprintf_r+0x12c>
 800d88c:	06d1      	lsls	r1, r2, #27
 800d88e:	bf44      	itt	mi
 800d890:	2320      	movmi	r3, #32
 800d892:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d896:	0713      	lsls	r3, r2, #28
 800d898:	bf44      	itt	mi
 800d89a:	232b      	movmi	r3, #43	; 0x2b
 800d89c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8a0:	f89a 3000 	ldrb.w	r3, [sl]
 800d8a4:	2b2a      	cmp	r3, #42	; 0x2a
 800d8a6:	d015      	beq.n	800d8d4 <_vfiprintf_r+0x13c>
 800d8a8:	9a07      	ldr	r2, [sp, #28]
 800d8aa:	4654      	mov	r4, sl
 800d8ac:	2000      	movs	r0, #0
 800d8ae:	f04f 0c0a 	mov.w	ip, #10
 800d8b2:	4621      	mov	r1, r4
 800d8b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8b8:	3b30      	subs	r3, #48	; 0x30
 800d8ba:	2b09      	cmp	r3, #9
 800d8bc:	d94e      	bls.n	800d95c <_vfiprintf_r+0x1c4>
 800d8be:	b1b0      	cbz	r0, 800d8ee <_vfiprintf_r+0x156>
 800d8c0:	9207      	str	r2, [sp, #28]
 800d8c2:	e014      	b.n	800d8ee <_vfiprintf_r+0x156>
 800d8c4:	eba0 0308 	sub.w	r3, r0, r8
 800d8c8:	fa09 f303 	lsl.w	r3, r9, r3
 800d8cc:	4313      	orrs	r3, r2
 800d8ce:	9304      	str	r3, [sp, #16]
 800d8d0:	46a2      	mov	sl, r4
 800d8d2:	e7d2      	b.n	800d87a <_vfiprintf_r+0xe2>
 800d8d4:	9b03      	ldr	r3, [sp, #12]
 800d8d6:	1d19      	adds	r1, r3, #4
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	9103      	str	r1, [sp, #12]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	bfbb      	ittet	lt
 800d8e0:	425b      	neglt	r3, r3
 800d8e2:	f042 0202 	orrlt.w	r2, r2, #2
 800d8e6:	9307      	strge	r3, [sp, #28]
 800d8e8:	9307      	strlt	r3, [sp, #28]
 800d8ea:	bfb8      	it	lt
 800d8ec:	9204      	strlt	r2, [sp, #16]
 800d8ee:	7823      	ldrb	r3, [r4, #0]
 800d8f0:	2b2e      	cmp	r3, #46	; 0x2e
 800d8f2:	d10c      	bne.n	800d90e <_vfiprintf_r+0x176>
 800d8f4:	7863      	ldrb	r3, [r4, #1]
 800d8f6:	2b2a      	cmp	r3, #42	; 0x2a
 800d8f8:	d135      	bne.n	800d966 <_vfiprintf_r+0x1ce>
 800d8fa:	9b03      	ldr	r3, [sp, #12]
 800d8fc:	1d1a      	adds	r2, r3, #4
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	9203      	str	r2, [sp, #12]
 800d902:	2b00      	cmp	r3, #0
 800d904:	bfb8      	it	lt
 800d906:	f04f 33ff 	movlt.w	r3, #4294967295
 800d90a:	3402      	adds	r4, #2
 800d90c:	9305      	str	r3, [sp, #20]
 800d90e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d9f4 <_vfiprintf_r+0x25c>
 800d912:	7821      	ldrb	r1, [r4, #0]
 800d914:	2203      	movs	r2, #3
 800d916:	4650      	mov	r0, sl
 800d918:	f7f2 fc7a 	bl	8000210 <memchr>
 800d91c:	b140      	cbz	r0, 800d930 <_vfiprintf_r+0x198>
 800d91e:	2340      	movs	r3, #64	; 0x40
 800d920:	eba0 000a 	sub.w	r0, r0, sl
 800d924:	fa03 f000 	lsl.w	r0, r3, r0
 800d928:	9b04      	ldr	r3, [sp, #16]
 800d92a:	4303      	orrs	r3, r0
 800d92c:	3401      	adds	r4, #1
 800d92e:	9304      	str	r3, [sp, #16]
 800d930:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d934:	482c      	ldr	r0, [pc, #176]	; (800d9e8 <_vfiprintf_r+0x250>)
 800d936:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d93a:	2206      	movs	r2, #6
 800d93c:	f7f2 fc68 	bl	8000210 <memchr>
 800d940:	2800      	cmp	r0, #0
 800d942:	d03f      	beq.n	800d9c4 <_vfiprintf_r+0x22c>
 800d944:	4b29      	ldr	r3, [pc, #164]	; (800d9ec <_vfiprintf_r+0x254>)
 800d946:	bb1b      	cbnz	r3, 800d990 <_vfiprintf_r+0x1f8>
 800d948:	9b03      	ldr	r3, [sp, #12]
 800d94a:	3307      	adds	r3, #7
 800d94c:	f023 0307 	bic.w	r3, r3, #7
 800d950:	3308      	adds	r3, #8
 800d952:	9303      	str	r3, [sp, #12]
 800d954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d956:	443b      	add	r3, r7
 800d958:	9309      	str	r3, [sp, #36]	; 0x24
 800d95a:	e767      	b.n	800d82c <_vfiprintf_r+0x94>
 800d95c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d960:	460c      	mov	r4, r1
 800d962:	2001      	movs	r0, #1
 800d964:	e7a5      	b.n	800d8b2 <_vfiprintf_r+0x11a>
 800d966:	2300      	movs	r3, #0
 800d968:	3401      	adds	r4, #1
 800d96a:	9305      	str	r3, [sp, #20]
 800d96c:	4619      	mov	r1, r3
 800d96e:	f04f 0c0a 	mov.w	ip, #10
 800d972:	4620      	mov	r0, r4
 800d974:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d978:	3a30      	subs	r2, #48	; 0x30
 800d97a:	2a09      	cmp	r2, #9
 800d97c:	d903      	bls.n	800d986 <_vfiprintf_r+0x1ee>
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d0c5      	beq.n	800d90e <_vfiprintf_r+0x176>
 800d982:	9105      	str	r1, [sp, #20]
 800d984:	e7c3      	b.n	800d90e <_vfiprintf_r+0x176>
 800d986:	fb0c 2101 	mla	r1, ip, r1, r2
 800d98a:	4604      	mov	r4, r0
 800d98c:	2301      	movs	r3, #1
 800d98e:	e7f0      	b.n	800d972 <_vfiprintf_r+0x1da>
 800d990:	ab03      	add	r3, sp, #12
 800d992:	9300      	str	r3, [sp, #0]
 800d994:	462a      	mov	r2, r5
 800d996:	4b16      	ldr	r3, [pc, #88]	; (800d9f0 <_vfiprintf_r+0x258>)
 800d998:	a904      	add	r1, sp, #16
 800d99a:	4630      	mov	r0, r6
 800d99c:	f3af 8000 	nop.w
 800d9a0:	4607      	mov	r7, r0
 800d9a2:	1c78      	adds	r0, r7, #1
 800d9a4:	d1d6      	bne.n	800d954 <_vfiprintf_r+0x1bc>
 800d9a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d9a8:	07d9      	lsls	r1, r3, #31
 800d9aa:	d405      	bmi.n	800d9b8 <_vfiprintf_r+0x220>
 800d9ac:	89ab      	ldrh	r3, [r5, #12]
 800d9ae:	059a      	lsls	r2, r3, #22
 800d9b0:	d402      	bmi.n	800d9b8 <_vfiprintf_r+0x220>
 800d9b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d9b4:	f7ff fddd 	bl	800d572 <__retarget_lock_release_recursive>
 800d9b8:	89ab      	ldrh	r3, [r5, #12]
 800d9ba:	065b      	lsls	r3, r3, #25
 800d9bc:	f53f af12 	bmi.w	800d7e4 <_vfiprintf_r+0x4c>
 800d9c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9c2:	e711      	b.n	800d7e8 <_vfiprintf_r+0x50>
 800d9c4:	ab03      	add	r3, sp, #12
 800d9c6:	9300      	str	r3, [sp, #0]
 800d9c8:	462a      	mov	r2, r5
 800d9ca:	4b09      	ldr	r3, [pc, #36]	; (800d9f0 <_vfiprintf_r+0x258>)
 800d9cc:	a904      	add	r1, sp, #16
 800d9ce:	4630      	mov	r0, r6
 800d9d0:	f000 f880 	bl	800dad4 <_printf_i>
 800d9d4:	e7e4      	b.n	800d9a0 <_vfiprintf_r+0x208>
 800d9d6:	bf00      	nop
 800d9d8:	08010ee4 	.word	0x08010ee4
 800d9dc:	08010f04 	.word	0x08010f04
 800d9e0:	08010ec4 	.word	0x08010ec4
 800d9e4:	08010f24 	.word	0x08010f24
 800d9e8:	08010f2e 	.word	0x08010f2e
 800d9ec:	00000000 	.word	0x00000000
 800d9f0:	0800d773 	.word	0x0800d773
 800d9f4:	08010f2a 	.word	0x08010f2a

0800d9f8 <_printf_common>:
 800d9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9fc:	4616      	mov	r6, r2
 800d9fe:	4699      	mov	r9, r3
 800da00:	688a      	ldr	r2, [r1, #8]
 800da02:	690b      	ldr	r3, [r1, #16]
 800da04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800da08:	4293      	cmp	r3, r2
 800da0a:	bfb8      	it	lt
 800da0c:	4613      	movlt	r3, r2
 800da0e:	6033      	str	r3, [r6, #0]
 800da10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800da14:	4607      	mov	r7, r0
 800da16:	460c      	mov	r4, r1
 800da18:	b10a      	cbz	r2, 800da1e <_printf_common+0x26>
 800da1a:	3301      	adds	r3, #1
 800da1c:	6033      	str	r3, [r6, #0]
 800da1e:	6823      	ldr	r3, [r4, #0]
 800da20:	0699      	lsls	r1, r3, #26
 800da22:	bf42      	ittt	mi
 800da24:	6833      	ldrmi	r3, [r6, #0]
 800da26:	3302      	addmi	r3, #2
 800da28:	6033      	strmi	r3, [r6, #0]
 800da2a:	6825      	ldr	r5, [r4, #0]
 800da2c:	f015 0506 	ands.w	r5, r5, #6
 800da30:	d106      	bne.n	800da40 <_printf_common+0x48>
 800da32:	f104 0a19 	add.w	sl, r4, #25
 800da36:	68e3      	ldr	r3, [r4, #12]
 800da38:	6832      	ldr	r2, [r6, #0]
 800da3a:	1a9b      	subs	r3, r3, r2
 800da3c:	42ab      	cmp	r3, r5
 800da3e:	dc26      	bgt.n	800da8e <_printf_common+0x96>
 800da40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800da44:	1e13      	subs	r3, r2, #0
 800da46:	6822      	ldr	r2, [r4, #0]
 800da48:	bf18      	it	ne
 800da4a:	2301      	movne	r3, #1
 800da4c:	0692      	lsls	r2, r2, #26
 800da4e:	d42b      	bmi.n	800daa8 <_printf_common+0xb0>
 800da50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800da54:	4649      	mov	r1, r9
 800da56:	4638      	mov	r0, r7
 800da58:	47c0      	blx	r8
 800da5a:	3001      	adds	r0, #1
 800da5c:	d01e      	beq.n	800da9c <_printf_common+0xa4>
 800da5e:	6823      	ldr	r3, [r4, #0]
 800da60:	68e5      	ldr	r5, [r4, #12]
 800da62:	6832      	ldr	r2, [r6, #0]
 800da64:	f003 0306 	and.w	r3, r3, #6
 800da68:	2b04      	cmp	r3, #4
 800da6a:	bf08      	it	eq
 800da6c:	1aad      	subeq	r5, r5, r2
 800da6e:	68a3      	ldr	r3, [r4, #8]
 800da70:	6922      	ldr	r2, [r4, #16]
 800da72:	bf0c      	ite	eq
 800da74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da78:	2500      	movne	r5, #0
 800da7a:	4293      	cmp	r3, r2
 800da7c:	bfc4      	itt	gt
 800da7e:	1a9b      	subgt	r3, r3, r2
 800da80:	18ed      	addgt	r5, r5, r3
 800da82:	2600      	movs	r6, #0
 800da84:	341a      	adds	r4, #26
 800da86:	42b5      	cmp	r5, r6
 800da88:	d11a      	bne.n	800dac0 <_printf_common+0xc8>
 800da8a:	2000      	movs	r0, #0
 800da8c:	e008      	b.n	800daa0 <_printf_common+0xa8>
 800da8e:	2301      	movs	r3, #1
 800da90:	4652      	mov	r2, sl
 800da92:	4649      	mov	r1, r9
 800da94:	4638      	mov	r0, r7
 800da96:	47c0      	blx	r8
 800da98:	3001      	adds	r0, #1
 800da9a:	d103      	bne.n	800daa4 <_printf_common+0xac>
 800da9c:	f04f 30ff 	mov.w	r0, #4294967295
 800daa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daa4:	3501      	adds	r5, #1
 800daa6:	e7c6      	b.n	800da36 <_printf_common+0x3e>
 800daa8:	18e1      	adds	r1, r4, r3
 800daaa:	1c5a      	adds	r2, r3, #1
 800daac:	2030      	movs	r0, #48	; 0x30
 800daae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dab2:	4422      	add	r2, r4
 800dab4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dab8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dabc:	3302      	adds	r3, #2
 800dabe:	e7c7      	b.n	800da50 <_printf_common+0x58>
 800dac0:	2301      	movs	r3, #1
 800dac2:	4622      	mov	r2, r4
 800dac4:	4649      	mov	r1, r9
 800dac6:	4638      	mov	r0, r7
 800dac8:	47c0      	blx	r8
 800daca:	3001      	adds	r0, #1
 800dacc:	d0e6      	beq.n	800da9c <_printf_common+0xa4>
 800dace:	3601      	adds	r6, #1
 800dad0:	e7d9      	b.n	800da86 <_printf_common+0x8e>
	...

0800dad4 <_printf_i>:
 800dad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dad8:	7e0f      	ldrb	r7, [r1, #24]
 800dada:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dadc:	2f78      	cmp	r7, #120	; 0x78
 800dade:	4691      	mov	r9, r2
 800dae0:	4680      	mov	r8, r0
 800dae2:	460c      	mov	r4, r1
 800dae4:	469a      	mov	sl, r3
 800dae6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800daea:	d807      	bhi.n	800dafc <_printf_i+0x28>
 800daec:	2f62      	cmp	r7, #98	; 0x62
 800daee:	d80a      	bhi.n	800db06 <_printf_i+0x32>
 800daf0:	2f00      	cmp	r7, #0
 800daf2:	f000 80d8 	beq.w	800dca6 <_printf_i+0x1d2>
 800daf6:	2f58      	cmp	r7, #88	; 0x58
 800daf8:	f000 80a3 	beq.w	800dc42 <_printf_i+0x16e>
 800dafc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800db04:	e03a      	b.n	800db7c <_printf_i+0xa8>
 800db06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800db0a:	2b15      	cmp	r3, #21
 800db0c:	d8f6      	bhi.n	800dafc <_printf_i+0x28>
 800db0e:	a101      	add	r1, pc, #4	; (adr r1, 800db14 <_printf_i+0x40>)
 800db10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db14:	0800db6d 	.word	0x0800db6d
 800db18:	0800db81 	.word	0x0800db81
 800db1c:	0800dafd 	.word	0x0800dafd
 800db20:	0800dafd 	.word	0x0800dafd
 800db24:	0800dafd 	.word	0x0800dafd
 800db28:	0800dafd 	.word	0x0800dafd
 800db2c:	0800db81 	.word	0x0800db81
 800db30:	0800dafd 	.word	0x0800dafd
 800db34:	0800dafd 	.word	0x0800dafd
 800db38:	0800dafd 	.word	0x0800dafd
 800db3c:	0800dafd 	.word	0x0800dafd
 800db40:	0800dc8d 	.word	0x0800dc8d
 800db44:	0800dbb1 	.word	0x0800dbb1
 800db48:	0800dc6f 	.word	0x0800dc6f
 800db4c:	0800dafd 	.word	0x0800dafd
 800db50:	0800dafd 	.word	0x0800dafd
 800db54:	0800dcaf 	.word	0x0800dcaf
 800db58:	0800dafd 	.word	0x0800dafd
 800db5c:	0800dbb1 	.word	0x0800dbb1
 800db60:	0800dafd 	.word	0x0800dafd
 800db64:	0800dafd 	.word	0x0800dafd
 800db68:	0800dc77 	.word	0x0800dc77
 800db6c:	682b      	ldr	r3, [r5, #0]
 800db6e:	1d1a      	adds	r2, r3, #4
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	602a      	str	r2, [r5, #0]
 800db74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800db7c:	2301      	movs	r3, #1
 800db7e:	e0a3      	b.n	800dcc8 <_printf_i+0x1f4>
 800db80:	6820      	ldr	r0, [r4, #0]
 800db82:	6829      	ldr	r1, [r5, #0]
 800db84:	0606      	lsls	r6, r0, #24
 800db86:	f101 0304 	add.w	r3, r1, #4
 800db8a:	d50a      	bpl.n	800dba2 <_printf_i+0xce>
 800db8c:	680e      	ldr	r6, [r1, #0]
 800db8e:	602b      	str	r3, [r5, #0]
 800db90:	2e00      	cmp	r6, #0
 800db92:	da03      	bge.n	800db9c <_printf_i+0xc8>
 800db94:	232d      	movs	r3, #45	; 0x2d
 800db96:	4276      	negs	r6, r6
 800db98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db9c:	485e      	ldr	r0, [pc, #376]	; (800dd18 <_printf_i+0x244>)
 800db9e:	230a      	movs	r3, #10
 800dba0:	e019      	b.n	800dbd6 <_printf_i+0x102>
 800dba2:	680e      	ldr	r6, [r1, #0]
 800dba4:	602b      	str	r3, [r5, #0]
 800dba6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dbaa:	bf18      	it	ne
 800dbac:	b236      	sxthne	r6, r6
 800dbae:	e7ef      	b.n	800db90 <_printf_i+0xbc>
 800dbb0:	682b      	ldr	r3, [r5, #0]
 800dbb2:	6820      	ldr	r0, [r4, #0]
 800dbb4:	1d19      	adds	r1, r3, #4
 800dbb6:	6029      	str	r1, [r5, #0]
 800dbb8:	0601      	lsls	r1, r0, #24
 800dbba:	d501      	bpl.n	800dbc0 <_printf_i+0xec>
 800dbbc:	681e      	ldr	r6, [r3, #0]
 800dbbe:	e002      	b.n	800dbc6 <_printf_i+0xf2>
 800dbc0:	0646      	lsls	r6, r0, #25
 800dbc2:	d5fb      	bpl.n	800dbbc <_printf_i+0xe8>
 800dbc4:	881e      	ldrh	r6, [r3, #0]
 800dbc6:	4854      	ldr	r0, [pc, #336]	; (800dd18 <_printf_i+0x244>)
 800dbc8:	2f6f      	cmp	r7, #111	; 0x6f
 800dbca:	bf0c      	ite	eq
 800dbcc:	2308      	moveq	r3, #8
 800dbce:	230a      	movne	r3, #10
 800dbd0:	2100      	movs	r1, #0
 800dbd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dbd6:	6865      	ldr	r5, [r4, #4]
 800dbd8:	60a5      	str	r5, [r4, #8]
 800dbda:	2d00      	cmp	r5, #0
 800dbdc:	bfa2      	ittt	ge
 800dbde:	6821      	ldrge	r1, [r4, #0]
 800dbe0:	f021 0104 	bicge.w	r1, r1, #4
 800dbe4:	6021      	strge	r1, [r4, #0]
 800dbe6:	b90e      	cbnz	r6, 800dbec <_printf_i+0x118>
 800dbe8:	2d00      	cmp	r5, #0
 800dbea:	d04d      	beq.n	800dc88 <_printf_i+0x1b4>
 800dbec:	4615      	mov	r5, r2
 800dbee:	fbb6 f1f3 	udiv	r1, r6, r3
 800dbf2:	fb03 6711 	mls	r7, r3, r1, r6
 800dbf6:	5dc7      	ldrb	r7, [r0, r7]
 800dbf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dbfc:	4637      	mov	r7, r6
 800dbfe:	42bb      	cmp	r3, r7
 800dc00:	460e      	mov	r6, r1
 800dc02:	d9f4      	bls.n	800dbee <_printf_i+0x11a>
 800dc04:	2b08      	cmp	r3, #8
 800dc06:	d10b      	bne.n	800dc20 <_printf_i+0x14c>
 800dc08:	6823      	ldr	r3, [r4, #0]
 800dc0a:	07de      	lsls	r6, r3, #31
 800dc0c:	d508      	bpl.n	800dc20 <_printf_i+0x14c>
 800dc0e:	6923      	ldr	r3, [r4, #16]
 800dc10:	6861      	ldr	r1, [r4, #4]
 800dc12:	4299      	cmp	r1, r3
 800dc14:	bfde      	ittt	le
 800dc16:	2330      	movle	r3, #48	; 0x30
 800dc18:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dc1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dc20:	1b52      	subs	r2, r2, r5
 800dc22:	6122      	str	r2, [r4, #16]
 800dc24:	f8cd a000 	str.w	sl, [sp]
 800dc28:	464b      	mov	r3, r9
 800dc2a:	aa03      	add	r2, sp, #12
 800dc2c:	4621      	mov	r1, r4
 800dc2e:	4640      	mov	r0, r8
 800dc30:	f7ff fee2 	bl	800d9f8 <_printf_common>
 800dc34:	3001      	adds	r0, #1
 800dc36:	d14c      	bne.n	800dcd2 <_printf_i+0x1fe>
 800dc38:	f04f 30ff 	mov.w	r0, #4294967295
 800dc3c:	b004      	add	sp, #16
 800dc3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc42:	4835      	ldr	r0, [pc, #212]	; (800dd18 <_printf_i+0x244>)
 800dc44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dc48:	6829      	ldr	r1, [r5, #0]
 800dc4a:	6823      	ldr	r3, [r4, #0]
 800dc4c:	f851 6b04 	ldr.w	r6, [r1], #4
 800dc50:	6029      	str	r1, [r5, #0]
 800dc52:	061d      	lsls	r5, r3, #24
 800dc54:	d514      	bpl.n	800dc80 <_printf_i+0x1ac>
 800dc56:	07df      	lsls	r7, r3, #31
 800dc58:	bf44      	itt	mi
 800dc5a:	f043 0320 	orrmi.w	r3, r3, #32
 800dc5e:	6023      	strmi	r3, [r4, #0]
 800dc60:	b91e      	cbnz	r6, 800dc6a <_printf_i+0x196>
 800dc62:	6823      	ldr	r3, [r4, #0]
 800dc64:	f023 0320 	bic.w	r3, r3, #32
 800dc68:	6023      	str	r3, [r4, #0]
 800dc6a:	2310      	movs	r3, #16
 800dc6c:	e7b0      	b.n	800dbd0 <_printf_i+0xfc>
 800dc6e:	6823      	ldr	r3, [r4, #0]
 800dc70:	f043 0320 	orr.w	r3, r3, #32
 800dc74:	6023      	str	r3, [r4, #0]
 800dc76:	2378      	movs	r3, #120	; 0x78
 800dc78:	4828      	ldr	r0, [pc, #160]	; (800dd1c <_printf_i+0x248>)
 800dc7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dc7e:	e7e3      	b.n	800dc48 <_printf_i+0x174>
 800dc80:	0659      	lsls	r1, r3, #25
 800dc82:	bf48      	it	mi
 800dc84:	b2b6      	uxthmi	r6, r6
 800dc86:	e7e6      	b.n	800dc56 <_printf_i+0x182>
 800dc88:	4615      	mov	r5, r2
 800dc8a:	e7bb      	b.n	800dc04 <_printf_i+0x130>
 800dc8c:	682b      	ldr	r3, [r5, #0]
 800dc8e:	6826      	ldr	r6, [r4, #0]
 800dc90:	6961      	ldr	r1, [r4, #20]
 800dc92:	1d18      	adds	r0, r3, #4
 800dc94:	6028      	str	r0, [r5, #0]
 800dc96:	0635      	lsls	r5, r6, #24
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	d501      	bpl.n	800dca0 <_printf_i+0x1cc>
 800dc9c:	6019      	str	r1, [r3, #0]
 800dc9e:	e002      	b.n	800dca6 <_printf_i+0x1d2>
 800dca0:	0670      	lsls	r0, r6, #25
 800dca2:	d5fb      	bpl.n	800dc9c <_printf_i+0x1c8>
 800dca4:	8019      	strh	r1, [r3, #0]
 800dca6:	2300      	movs	r3, #0
 800dca8:	6123      	str	r3, [r4, #16]
 800dcaa:	4615      	mov	r5, r2
 800dcac:	e7ba      	b.n	800dc24 <_printf_i+0x150>
 800dcae:	682b      	ldr	r3, [r5, #0]
 800dcb0:	1d1a      	adds	r2, r3, #4
 800dcb2:	602a      	str	r2, [r5, #0]
 800dcb4:	681d      	ldr	r5, [r3, #0]
 800dcb6:	6862      	ldr	r2, [r4, #4]
 800dcb8:	2100      	movs	r1, #0
 800dcba:	4628      	mov	r0, r5
 800dcbc:	f7f2 faa8 	bl	8000210 <memchr>
 800dcc0:	b108      	cbz	r0, 800dcc6 <_printf_i+0x1f2>
 800dcc2:	1b40      	subs	r0, r0, r5
 800dcc4:	6060      	str	r0, [r4, #4]
 800dcc6:	6863      	ldr	r3, [r4, #4]
 800dcc8:	6123      	str	r3, [r4, #16]
 800dcca:	2300      	movs	r3, #0
 800dccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcd0:	e7a8      	b.n	800dc24 <_printf_i+0x150>
 800dcd2:	6923      	ldr	r3, [r4, #16]
 800dcd4:	462a      	mov	r2, r5
 800dcd6:	4649      	mov	r1, r9
 800dcd8:	4640      	mov	r0, r8
 800dcda:	47d0      	blx	sl
 800dcdc:	3001      	adds	r0, #1
 800dcde:	d0ab      	beq.n	800dc38 <_printf_i+0x164>
 800dce0:	6823      	ldr	r3, [r4, #0]
 800dce2:	079b      	lsls	r3, r3, #30
 800dce4:	d413      	bmi.n	800dd0e <_printf_i+0x23a>
 800dce6:	68e0      	ldr	r0, [r4, #12]
 800dce8:	9b03      	ldr	r3, [sp, #12]
 800dcea:	4298      	cmp	r0, r3
 800dcec:	bfb8      	it	lt
 800dcee:	4618      	movlt	r0, r3
 800dcf0:	e7a4      	b.n	800dc3c <_printf_i+0x168>
 800dcf2:	2301      	movs	r3, #1
 800dcf4:	4632      	mov	r2, r6
 800dcf6:	4649      	mov	r1, r9
 800dcf8:	4640      	mov	r0, r8
 800dcfa:	47d0      	blx	sl
 800dcfc:	3001      	adds	r0, #1
 800dcfe:	d09b      	beq.n	800dc38 <_printf_i+0x164>
 800dd00:	3501      	adds	r5, #1
 800dd02:	68e3      	ldr	r3, [r4, #12]
 800dd04:	9903      	ldr	r1, [sp, #12]
 800dd06:	1a5b      	subs	r3, r3, r1
 800dd08:	42ab      	cmp	r3, r5
 800dd0a:	dcf2      	bgt.n	800dcf2 <_printf_i+0x21e>
 800dd0c:	e7eb      	b.n	800dce6 <_printf_i+0x212>
 800dd0e:	2500      	movs	r5, #0
 800dd10:	f104 0619 	add.w	r6, r4, #25
 800dd14:	e7f5      	b.n	800dd02 <_printf_i+0x22e>
 800dd16:	bf00      	nop
 800dd18:	08010f35 	.word	0x08010f35
 800dd1c:	08010f46 	.word	0x08010f46

0800dd20 <_sbrk_r>:
 800dd20:	b538      	push	{r3, r4, r5, lr}
 800dd22:	4d06      	ldr	r5, [pc, #24]	; (800dd3c <_sbrk_r+0x1c>)
 800dd24:	2300      	movs	r3, #0
 800dd26:	4604      	mov	r4, r0
 800dd28:	4608      	mov	r0, r1
 800dd2a:	602b      	str	r3, [r5, #0]
 800dd2c:	f7f2 fdec 	bl	8000908 <_sbrk>
 800dd30:	1c43      	adds	r3, r0, #1
 800dd32:	d102      	bne.n	800dd3a <_sbrk_r+0x1a>
 800dd34:	682b      	ldr	r3, [r5, #0]
 800dd36:	b103      	cbz	r3, 800dd3a <_sbrk_r+0x1a>
 800dd38:	6023      	str	r3, [r4, #0]
 800dd3a:	bd38      	pop	{r3, r4, r5, pc}
 800dd3c:	2000b560 	.word	0x2000b560

0800dd40 <__sread>:
 800dd40:	b510      	push	{r4, lr}
 800dd42:	460c      	mov	r4, r1
 800dd44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd48:	f000 fa6e 	bl	800e228 <_read_r>
 800dd4c:	2800      	cmp	r0, #0
 800dd4e:	bfab      	itete	ge
 800dd50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dd52:	89a3      	ldrhlt	r3, [r4, #12]
 800dd54:	181b      	addge	r3, r3, r0
 800dd56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dd5a:	bfac      	ite	ge
 800dd5c:	6563      	strge	r3, [r4, #84]	; 0x54
 800dd5e:	81a3      	strhlt	r3, [r4, #12]
 800dd60:	bd10      	pop	{r4, pc}

0800dd62 <__swrite>:
 800dd62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd66:	461f      	mov	r7, r3
 800dd68:	898b      	ldrh	r3, [r1, #12]
 800dd6a:	05db      	lsls	r3, r3, #23
 800dd6c:	4605      	mov	r5, r0
 800dd6e:	460c      	mov	r4, r1
 800dd70:	4616      	mov	r6, r2
 800dd72:	d505      	bpl.n	800dd80 <__swrite+0x1e>
 800dd74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd78:	2302      	movs	r3, #2
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	f000 f9d0 	bl	800e120 <_lseek_r>
 800dd80:	89a3      	ldrh	r3, [r4, #12]
 800dd82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dd8a:	81a3      	strh	r3, [r4, #12]
 800dd8c:	4632      	mov	r2, r6
 800dd8e:	463b      	mov	r3, r7
 800dd90:	4628      	mov	r0, r5
 800dd92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd96:	f000 b869 	b.w	800de6c <_write_r>

0800dd9a <__sseek>:
 800dd9a:	b510      	push	{r4, lr}
 800dd9c:	460c      	mov	r4, r1
 800dd9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dda2:	f000 f9bd 	bl	800e120 <_lseek_r>
 800dda6:	1c43      	adds	r3, r0, #1
 800dda8:	89a3      	ldrh	r3, [r4, #12]
 800ddaa:	bf15      	itete	ne
 800ddac:	6560      	strne	r0, [r4, #84]	; 0x54
 800ddae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ddb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ddb6:	81a3      	strheq	r3, [r4, #12]
 800ddb8:	bf18      	it	ne
 800ddba:	81a3      	strhne	r3, [r4, #12]
 800ddbc:	bd10      	pop	{r4, pc}

0800ddbe <__sclose>:
 800ddbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddc2:	f000 b8db 	b.w	800df7c <_close_r>
	...

0800ddc8 <__swbuf_r>:
 800ddc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddca:	460e      	mov	r6, r1
 800ddcc:	4614      	mov	r4, r2
 800ddce:	4605      	mov	r5, r0
 800ddd0:	b118      	cbz	r0, 800ddda <__swbuf_r+0x12>
 800ddd2:	6983      	ldr	r3, [r0, #24]
 800ddd4:	b90b      	cbnz	r3, 800ddda <__swbuf_r+0x12>
 800ddd6:	f7ff fb1b 	bl	800d410 <__sinit>
 800ddda:	4b21      	ldr	r3, [pc, #132]	; (800de60 <__swbuf_r+0x98>)
 800dddc:	429c      	cmp	r4, r3
 800ddde:	d12b      	bne.n	800de38 <__swbuf_r+0x70>
 800dde0:	686c      	ldr	r4, [r5, #4]
 800dde2:	69a3      	ldr	r3, [r4, #24]
 800dde4:	60a3      	str	r3, [r4, #8]
 800dde6:	89a3      	ldrh	r3, [r4, #12]
 800dde8:	071a      	lsls	r2, r3, #28
 800ddea:	d52f      	bpl.n	800de4c <__swbuf_r+0x84>
 800ddec:	6923      	ldr	r3, [r4, #16]
 800ddee:	b36b      	cbz	r3, 800de4c <__swbuf_r+0x84>
 800ddf0:	6923      	ldr	r3, [r4, #16]
 800ddf2:	6820      	ldr	r0, [r4, #0]
 800ddf4:	1ac0      	subs	r0, r0, r3
 800ddf6:	6963      	ldr	r3, [r4, #20]
 800ddf8:	b2f6      	uxtb	r6, r6
 800ddfa:	4283      	cmp	r3, r0
 800ddfc:	4637      	mov	r7, r6
 800ddfe:	dc04      	bgt.n	800de0a <__swbuf_r+0x42>
 800de00:	4621      	mov	r1, r4
 800de02:	4628      	mov	r0, r5
 800de04:	f000 f950 	bl	800e0a8 <_fflush_r>
 800de08:	bb30      	cbnz	r0, 800de58 <__swbuf_r+0x90>
 800de0a:	68a3      	ldr	r3, [r4, #8]
 800de0c:	3b01      	subs	r3, #1
 800de0e:	60a3      	str	r3, [r4, #8]
 800de10:	6823      	ldr	r3, [r4, #0]
 800de12:	1c5a      	adds	r2, r3, #1
 800de14:	6022      	str	r2, [r4, #0]
 800de16:	701e      	strb	r6, [r3, #0]
 800de18:	6963      	ldr	r3, [r4, #20]
 800de1a:	3001      	adds	r0, #1
 800de1c:	4283      	cmp	r3, r0
 800de1e:	d004      	beq.n	800de2a <__swbuf_r+0x62>
 800de20:	89a3      	ldrh	r3, [r4, #12]
 800de22:	07db      	lsls	r3, r3, #31
 800de24:	d506      	bpl.n	800de34 <__swbuf_r+0x6c>
 800de26:	2e0a      	cmp	r6, #10
 800de28:	d104      	bne.n	800de34 <__swbuf_r+0x6c>
 800de2a:	4621      	mov	r1, r4
 800de2c:	4628      	mov	r0, r5
 800de2e:	f000 f93b 	bl	800e0a8 <_fflush_r>
 800de32:	b988      	cbnz	r0, 800de58 <__swbuf_r+0x90>
 800de34:	4638      	mov	r0, r7
 800de36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de38:	4b0a      	ldr	r3, [pc, #40]	; (800de64 <__swbuf_r+0x9c>)
 800de3a:	429c      	cmp	r4, r3
 800de3c:	d101      	bne.n	800de42 <__swbuf_r+0x7a>
 800de3e:	68ac      	ldr	r4, [r5, #8]
 800de40:	e7cf      	b.n	800dde2 <__swbuf_r+0x1a>
 800de42:	4b09      	ldr	r3, [pc, #36]	; (800de68 <__swbuf_r+0xa0>)
 800de44:	429c      	cmp	r4, r3
 800de46:	bf08      	it	eq
 800de48:	68ec      	ldreq	r4, [r5, #12]
 800de4a:	e7ca      	b.n	800dde2 <__swbuf_r+0x1a>
 800de4c:	4621      	mov	r1, r4
 800de4e:	4628      	mov	r0, r5
 800de50:	f000 f81e 	bl	800de90 <__swsetup_r>
 800de54:	2800      	cmp	r0, #0
 800de56:	d0cb      	beq.n	800ddf0 <__swbuf_r+0x28>
 800de58:	f04f 37ff 	mov.w	r7, #4294967295
 800de5c:	e7ea      	b.n	800de34 <__swbuf_r+0x6c>
 800de5e:	bf00      	nop
 800de60:	08010ee4 	.word	0x08010ee4
 800de64:	08010f04 	.word	0x08010f04
 800de68:	08010ec4 	.word	0x08010ec4

0800de6c <_write_r>:
 800de6c:	b538      	push	{r3, r4, r5, lr}
 800de6e:	4d07      	ldr	r5, [pc, #28]	; (800de8c <_write_r+0x20>)
 800de70:	4604      	mov	r4, r0
 800de72:	4608      	mov	r0, r1
 800de74:	4611      	mov	r1, r2
 800de76:	2200      	movs	r2, #0
 800de78:	602a      	str	r2, [r5, #0]
 800de7a:	461a      	mov	r2, r3
 800de7c:	f7f2 fcf3 	bl	8000866 <_write>
 800de80:	1c43      	adds	r3, r0, #1
 800de82:	d102      	bne.n	800de8a <_write_r+0x1e>
 800de84:	682b      	ldr	r3, [r5, #0]
 800de86:	b103      	cbz	r3, 800de8a <_write_r+0x1e>
 800de88:	6023      	str	r3, [r4, #0]
 800de8a:	bd38      	pop	{r3, r4, r5, pc}
 800de8c:	2000b560 	.word	0x2000b560

0800de90 <__swsetup_r>:
 800de90:	4b32      	ldr	r3, [pc, #200]	; (800df5c <__swsetup_r+0xcc>)
 800de92:	b570      	push	{r4, r5, r6, lr}
 800de94:	681d      	ldr	r5, [r3, #0]
 800de96:	4606      	mov	r6, r0
 800de98:	460c      	mov	r4, r1
 800de9a:	b125      	cbz	r5, 800dea6 <__swsetup_r+0x16>
 800de9c:	69ab      	ldr	r3, [r5, #24]
 800de9e:	b913      	cbnz	r3, 800dea6 <__swsetup_r+0x16>
 800dea0:	4628      	mov	r0, r5
 800dea2:	f7ff fab5 	bl	800d410 <__sinit>
 800dea6:	4b2e      	ldr	r3, [pc, #184]	; (800df60 <__swsetup_r+0xd0>)
 800dea8:	429c      	cmp	r4, r3
 800deaa:	d10f      	bne.n	800decc <__swsetup_r+0x3c>
 800deac:	686c      	ldr	r4, [r5, #4]
 800deae:	89a3      	ldrh	r3, [r4, #12]
 800deb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800deb4:	0719      	lsls	r1, r3, #28
 800deb6:	d42c      	bmi.n	800df12 <__swsetup_r+0x82>
 800deb8:	06dd      	lsls	r5, r3, #27
 800deba:	d411      	bmi.n	800dee0 <__swsetup_r+0x50>
 800debc:	2309      	movs	r3, #9
 800debe:	6033      	str	r3, [r6, #0]
 800dec0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dec4:	81a3      	strh	r3, [r4, #12]
 800dec6:	f04f 30ff 	mov.w	r0, #4294967295
 800deca:	e03e      	b.n	800df4a <__swsetup_r+0xba>
 800decc:	4b25      	ldr	r3, [pc, #148]	; (800df64 <__swsetup_r+0xd4>)
 800dece:	429c      	cmp	r4, r3
 800ded0:	d101      	bne.n	800ded6 <__swsetup_r+0x46>
 800ded2:	68ac      	ldr	r4, [r5, #8]
 800ded4:	e7eb      	b.n	800deae <__swsetup_r+0x1e>
 800ded6:	4b24      	ldr	r3, [pc, #144]	; (800df68 <__swsetup_r+0xd8>)
 800ded8:	429c      	cmp	r4, r3
 800deda:	bf08      	it	eq
 800dedc:	68ec      	ldreq	r4, [r5, #12]
 800dede:	e7e6      	b.n	800deae <__swsetup_r+0x1e>
 800dee0:	0758      	lsls	r0, r3, #29
 800dee2:	d512      	bpl.n	800df0a <__swsetup_r+0x7a>
 800dee4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dee6:	b141      	cbz	r1, 800defa <__swsetup_r+0x6a>
 800dee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800deec:	4299      	cmp	r1, r3
 800deee:	d002      	beq.n	800def6 <__swsetup_r+0x66>
 800def0:	4630      	mov	r0, r6
 800def2:	f7ff fb47 	bl	800d584 <_free_r>
 800def6:	2300      	movs	r3, #0
 800def8:	6363      	str	r3, [r4, #52]	; 0x34
 800defa:	89a3      	ldrh	r3, [r4, #12]
 800defc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800df00:	81a3      	strh	r3, [r4, #12]
 800df02:	2300      	movs	r3, #0
 800df04:	6063      	str	r3, [r4, #4]
 800df06:	6923      	ldr	r3, [r4, #16]
 800df08:	6023      	str	r3, [r4, #0]
 800df0a:	89a3      	ldrh	r3, [r4, #12]
 800df0c:	f043 0308 	orr.w	r3, r3, #8
 800df10:	81a3      	strh	r3, [r4, #12]
 800df12:	6923      	ldr	r3, [r4, #16]
 800df14:	b94b      	cbnz	r3, 800df2a <__swsetup_r+0x9a>
 800df16:	89a3      	ldrh	r3, [r4, #12]
 800df18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800df1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df20:	d003      	beq.n	800df2a <__swsetup_r+0x9a>
 800df22:	4621      	mov	r1, r4
 800df24:	4630      	mov	r0, r6
 800df26:	f000 f933 	bl	800e190 <__smakebuf_r>
 800df2a:	89a0      	ldrh	r0, [r4, #12]
 800df2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df30:	f010 0301 	ands.w	r3, r0, #1
 800df34:	d00a      	beq.n	800df4c <__swsetup_r+0xbc>
 800df36:	2300      	movs	r3, #0
 800df38:	60a3      	str	r3, [r4, #8]
 800df3a:	6963      	ldr	r3, [r4, #20]
 800df3c:	425b      	negs	r3, r3
 800df3e:	61a3      	str	r3, [r4, #24]
 800df40:	6923      	ldr	r3, [r4, #16]
 800df42:	b943      	cbnz	r3, 800df56 <__swsetup_r+0xc6>
 800df44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800df48:	d1ba      	bne.n	800dec0 <__swsetup_r+0x30>
 800df4a:	bd70      	pop	{r4, r5, r6, pc}
 800df4c:	0781      	lsls	r1, r0, #30
 800df4e:	bf58      	it	pl
 800df50:	6963      	ldrpl	r3, [r4, #20]
 800df52:	60a3      	str	r3, [r4, #8]
 800df54:	e7f4      	b.n	800df40 <__swsetup_r+0xb0>
 800df56:	2000      	movs	r0, #0
 800df58:	e7f7      	b.n	800df4a <__swsetup_r+0xba>
 800df5a:	bf00      	nop
 800df5c:	2000002c 	.word	0x2000002c
 800df60:	08010ee4 	.word	0x08010ee4
 800df64:	08010f04 	.word	0x08010f04
 800df68:	08010ec4 	.word	0x08010ec4

0800df6c <abort>:
 800df6c:	b508      	push	{r3, lr}
 800df6e:	2006      	movs	r0, #6
 800df70:	f000 f994 	bl	800e29c <raise>
 800df74:	2001      	movs	r0, #1
 800df76:	f7f2 fc4f 	bl	8000818 <_exit>
	...

0800df7c <_close_r>:
 800df7c:	b538      	push	{r3, r4, r5, lr}
 800df7e:	4d06      	ldr	r5, [pc, #24]	; (800df98 <_close_r+0x1c>)
 800df80:	2300      	movs	r3, #0
 800df82:	4604      	mov	r4, r0
 800df84:	4608      	mov	r0, r1
 800df86:	602b      	str	r3, [r5, #0]
 800df88:	f7f2 fc89 	bl	800089e <_close>
 800df8c:	1c43      	adds	r3, r0, #1
 800df8e:	d102      	bne.n	800df96 <_close_r+0x1a>
 800df90:	682b      	ldr	r3, [r5, #0]
 800df92:	b103      	cbz	r3, 800df96 <_close_r+0x1a>
 800df94:	6023      	str	r3, [r4, #0]
 800df96:	bd38      	pop	{r3, r4, r5, pc}
 800df98:	2000b560 	.word	0x2000b560

0800df9c <__sflush_r>:
 800df9c:	898a      	ldrh	r2, [r1, #12]
 800df9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfa2:	4605      	mov	r5, r0
 800dfa4:	0710      	lsls	r0, r2, #28
 800dfa6:	460c      	mov	r4, r1
 800dfa8:	d458      	bmi.n	800e05c <__sflush_r+0xc0>
 800dfaa:	684b      	ldr	r3, [r1, #4]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	dc05      	bgt.n	800dfbc <__sflush_r+0x20>
 800dfb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	dc02      	bgt.n	800dfbc <__sflush_r+0x20>
 800dfb6:	2000      	movs	r0, #0
 800dfb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dfbe:	2e00      	cmp	r6, #0
 800dfc0:	d0f9      	beq.n	800dfb6 <__sflush_r+0x1a>
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dfc8:	682f      	ldr	r7, [r5, #0]
 800dfca:	602b      	str	r3, [r5, #0]
 800dfcc:	d032      	beq.n	800e034 <__sflush_r+0x98>
 800dfce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dfd0:	89a3      	ldrh	r3, [r4, #12]
 800dfd2:	075a      	lsls	r2, r3, #29
 800dfd4:	d505      	bpl.n	800dfe2 <__sflush_r+0x46>
 800dfd6:	6863      	ldr	r3, [r4, #4]
 800dfd8:	1ac0      	subs	r0, r0, r3
 800dfda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dfdc:	b10b      	cbz	r3, 800dfe2 <__sflush_r+0x46>
 800dfde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dfe0:	1ac0      	subs	r0, r0, r3
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	4602      	mov	r2, r0
 800dfe6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dfe8:	6a21      	ldr	r1, [r4, #32]
 800dfea:	4628      	mov	r0, r5
 800dfec:	47b0      	blx	r6
 800dfee:	1c43      	adds	r3, r0, #1
 800dff0:	89a3      	ldrh	r3, [r4, #12]
 800dff2:	d106      	bne.n	800e002 <__sflush_r+0x66>
 800dff4:	6829      	ldr	r1, [r5, #0]
 800dff6:	291d      	cmp	r1, #29
 800dff8:	d82c      	bhi.n	800e054 <__sflush_r+0xb8>
 800dffa:	4a2a      	ldr	r2, [pc, #168]	; (800e0a4 <__sflush_r+0x108>)
 800dffc:	40ca      	lsrs	r2, r1
 800dffe:	07d6      	lsls	r6, r2, #31
 800e000:	d528      	bpl.n	800e054 <__sflush_r+0xb8>
 800e002:	2200      	movs	r2, #0
 800e004:	6062      	str	r2, [r4, #4]
 800e006:	04d9      	lsls	r1, r3, #19
 800e008:	6922      	ldr	r2, [r4, #16]
 800e00a:	6022      	str	r2, [r4, #0]
 800e00c:	d504      	bpl.n	800e018 <__sflush_r+0x7c>
 800e00e:	1c42      	adds	r2, r0, #1
 800e010:	d101      	bne.n	800e016 <__sflush_r+0x7a>
 800e012:	682b      	ldr	r3, [r5, #0]
 800e014:	b903      	cbnz	r3, 800e018 <__sflush_r+0x7c>
 800e016:	6560      	str	r0, [r4, #84]	; 0x54
 800e018:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e01a:	602f      	str	r7, [r5, #0]
 800e01c:	2900      	cmp	r1, #0
 800e01e:	d0ca      	beq.n	800dfb6 <__sflush_r+0x1a>
 800e020:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e024:	4299      	cmp	r1, r3
 800e026:	d002      	beq.n	800e02e <__sflush_r+0x92>
 800e028:	4628      	mov	r0, r5
 800e02a:	f7ff faab 	bl	800d584 <_free_r>
 800e02e:	2000      	movs	r0, #0
 800e030:	6360      	str	r0, [r4, #52]	; 0x34
 800e032:	e7c1      	b.n	800dfb8 <__sflush_r+0x1c>
 800e034:	6a21      	ldr	r1, [r4, #32]
 800e036:	2301      	movs	r3, #1
 800e038:	4628      	mov	r0, r5
 800e03a:	47b0      	blx	r6
 800e03c:	1c41      	adds	r1, r0, #1
 800e03e:	d1c7      	bne.n	800dfd0 <__sflush_r+0x34>
 800e040:	682b      	ldr	r3, [r5, #0]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d0c4      	beq.n	800dfd0 <__sflush_r+0x34>
 800e046:	2b1d      	cmp	r3, #29
 800e048:	d001      	beq.n	800e04e <__sflush_r+0xb2>
 800e04a:	2b16      	cmp	r3, #22
 800e04c:	d101      	bne.n	800e052 <__sflush_r+0xb6>
 800e04e:	602f      	str	r7, [r5, #0]
 800e050:	e7b1      	b.n	800dfb6 <__sflush_r+0x1a>
 800e052:	89a3      	ldrh	r3, [r4, #12]
 800e054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e058:	81a3      	strh	r3, [r4, #12]
 800e05a:	e7ad      	b.n	800dfb8 <__sflush_r+0x1c>
 800e05c:	690f      	ldr	r7, [r1, #16]
 800e05e:	2f00      	cmp	r7, #0
 800e060:	d0a9      	beq.n	800dfb6 <__sflush_r+0x1a>
 800e062:	0793      	lsls	r3, r2, #30
 800e064:	680e      	ldr	r6, [r1, #0]
 800e066:	bf08      	it	eq
 800e068:	694b      	ldreq	r3, [r1, #20]
 800e06a:	600f      	str	r7, [r1, #0]
 800e06c:	bf18      	it	ne
 800e06e:	2300      	movne	r3, #0
 800e070:	eba6 0807 	sub.w	r8, r6, r7
 800e074:	608b      	str	r3, [r1, #8]
 800e076:	f1b8 0f00 	cmp.w	r8, #0
 800e07a:	dd9c      	ble.n	800dfb6 <__sflush_r+0x1a>
 800e07c:	6a21      	ldr	r1, [r4, #32]
 800e07e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e080:	4643      	mov	r3, r8
 800e082:	463a      	mov	r2, r7
 800e084:	4628      	mov	r0, r5
 800e086:	47b0      	blx	r6
 800e088:	2800      	cmp	r0, #0
 800e08a:	dc06      	bgt.n	800e09a <__sflush_r+0xfe>
 800e08c:	89a3      	ldrh	r3, [r4, #12]
 800e08e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e092:	81a3      	strh	r3, [r4, #12]
 800e094:	f04f 30ff 	mov.w	r0, #4294967295
 800e098:	e78e      	b.n	800dfb8 <__sflush_r+0x1c>
 800e09a:	4407      	add	r7, r0
 800e09c:	eba8 0800 	sub.w	r8, r8, r0
 800e0a0:	e7e9      	b.n	800e076 <__sflush_r+0xda>
 800e0a2:	bf00      	nop
 800e0a4:	20400001 	.word	0x20400001

0800e0a8 <_fflush_r>:
 800e0a8:	b538      	push	{r3, r4, r5, lr}
 800e0aa:	690b      	ldr	r3, [r1, #16]
 800e0ac:	4605      	mov	r5, r0
 800e0ae:	460c      	mov	r4, r1
 800e0b0:	b913      	cbnz	r3, 800e0b8 <_fflush_r+0x10>
 800e0b2:	2500      	movs	r5, #0
 800e0b4:	4628      	mov	r0, r5
 800e0b6:	bd38      	pop	{r3, r4, r5, pc}
 800e0b8:	b118      	cbz	r0, 800e0c2 <_fflush_r+0x1a>
 800e0ba:	6983      	ldr	r3, [r0, #24]
 800e0bc:	b90b      	cbnz	r3, 800e0c2 <_fflush_r+0x1a>
 800e0be:	f7ff f9a7 	bl	800d410 <__sinit>
 800e0c2:	4b14      	ldr	r3, [pc, #80]	; (800e114 <_fflush_r+0x6c>)
 800e0c4:	429c      	cmp	r4, r3
 800e0c6:	d11b      	bne.n	800e100 <_fflush_r+0x58>
 800e0c8:	686c      	ldr	r4, [r5, #4]
 800e0ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d0ef      	beq.n	800e0b2 <_fflush_r+0xa>
 800e0d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e0d4:	07d0      	lsls	r0, r2, #31
 800e0d6:	d404      	bmi.n	800e0e2 <_fflush_r+0x3a>
 800e0d8:	0599      	lsls	r1, r3, #22
 800e0da:	d402      	bmi.n	800e0e2 <_fflush_r+0x3a>
 800e0dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0de:	f7ff fa47 	bl	800d570 <__retarget_lock_acquire_recursive>
 800e0e2:	4628      	mov	r0, r5
 800e0e4:	4621      	mov	r1, r4
 800e0e6:	f7ff ff59 	bl	800df9c <__sflush_r>
 800e0ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0ec:	07da      	lsls	r2, r3, #31
 800e0ee:	4605      	mov	r5, r0
 800e0f0:	d4e0      	bmi.n	800e0b4 <_fflush_r+0xc>
 800e0f2:	89a3      	ldrh	r3, [r4, #12]
 800e0f4:	059b      	lsls	r3, r3, #22
 800e0f6:	d4dd      	bmi.n	800e0b4 <_fflush_r+0xc>
 800e0f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0fa:	f7ff fa3a 	bl	800d572 <__retarget_lock_release_recursive>
 800e0fe:	e7d9      	b.n	800e0b4 <_fflush_r+0xc>
 800e100:	4b05      	ldr	r3, [pc, #20]	; (800e118 <_fflush_r+0x70>)
 800e102:	429c      	cmp	r4, r3
 800e104:	d101      	bne.n	800e10a <_fflush_r+0x62>
 800e106:	68ac      	ldr	r4, [r5, #8]
 800e108:	e7df      	b.n	800e0ca <_fflush_r+0x22>
 800e10a:	4b04      	ldr	r3, [pc, #16]	; (800e11c <_fflush_r+0x74>)
 800e10c:	429c      	cmp	r4, r3
 800e10e:	bf08      	it	eq
 800e110:	68ec      	ldreq	r4, [r5, #12]
 800e112:	e7da      	b.n	800e0ca <_fflush_r+0x22>
 800e114:	08010ee4 	.word	0x08010ee4
 800e118:	08010f04 	.word	0x08010f04
 800e11c:	08010ec4 	.word	0x08010ec4

0800e120 <_lseek_r>:
 800e120:	b538      	push	{r3, r4, r5, lr}
 800e122:	4d07      	ldr	r5, [pc, #28]	; (800e140 <_lseek_r+0x20>)
 800e124:	4604      	mov	r4, r0
 800e126:	4608      	mov	r0, r1
 800e128:	4611      	mov	r1, r2
 800e12a:	2200      	movs	r2, #0
 800e12c:	602a      	str	r2, [r5, #0]
 800e12e:	461a      	mov	r2, r3
 800e130:	f7f2 fbdc 	bl	80008ec <_lseek>
 800e134:	1c43      	adds	r3, r0, #1
 800e136:	d102      	bne.n	800e13e <_lseek_r+0x1e>
 800e138:	682b      	ldr	r3, [r5, #0]
 800e13a:	b103      	cbz	r3, 800e13e <_lseek_r+0x1e>
 800e13c:	6023      	str	r3, [r4, #0]
 800e13e:	bd38      	pop	{r3, r4, r5, pc}
 800e140:	2000b560 	.word	0x2000b560

0800e144 <__swhatbuf_r>:
 800e144:	b570      	push	{r4, r5, r6, lr}
 800e146:	460e      	mov	r6, r1
 800e148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e14c:	2900      	cmp	r1, #0
 800e14e:	b096      	sub	sp, #88	; 0x58
 800e150:	4614      	mov	r4, r2
 800e152:	461d      	mov	r5, r3
 800e154:	da08      	bge.n	800e168 <__swhatbuf_r+0x24>
 800e156:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e15a:	2200      	movs	r2, #0
 800e15c:	602a      	str	r2, [r5, #0]
 800e15e:	061a      	lsls	r2, r3, #24
 800e160:	d410      	bmi.n	800e184 <__swhatbuf_r+0x40>
 800e162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e166:	e00e      	b.n	800e186 <__swhatbuf_r+0x42>
 800e168:	466a      	mov	r2, sp
 800e16a:	f000 f8b3 	bl	800e2d4 <_fstat_r>
 800e16e:	2800      	cmp	r0, #0
 800e170:	dbf1      	blt.n	800e156 <__swhatbuf_r+0x12>
 800e172:	9a01      	ldr	r2, [sp, #4]
 800e174:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e178:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e17c:	425a      	negs	r2, r3
 800e17e:	415a      	adcs	r2, r3
 800e180:	602a      	str	r2, [r5, #0]
 800e182:	e7ee      	b.n	800e162 <__swhatbuf_r+0x1e>
 800e184:	2340      	movs	r3, #64	; 0x40
 800e186:	2000      	movs	r0, #0
 800e188:	6023      	str	r3, [r4, #0]
 800e18a:	b016      	add	sp, #88	; 0x58
 800e18c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e190 <__smakebuf_r>:
 800e190:	898b      	ldrh	r3, [r1, #12]
 800e192:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e194:	079d      	lsls	r5, r3, #30
 800e196:	4606      	mov	r6, r0
 800e198:	460c      	mov	r4, r1
 800e19a:	d507      	bpl.n	800e1ac <__smakebuf_r+0x1c>
 800e19c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e1a0:	6023      	str	r3, [r4, #0]
 800e1a2:	6123      	str	r3, [r4, #16]
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	6163      	str	r3, [r4, #20]
 800e1a8:	b002      	add	sp, #8
 800e1aa:	bd70      	pop	{r4, r5, r6, pc}
 800e1ac:	ab01      	add	r3, sp, #4
 800e1ae:	466a      	mov	r2, sp
 800e1b0:	f7ff ffc8 	bl	800e144 <__swhatbuf_r>
 800e1b4:	9900      	ldr	r1, [sp, #0]
 800e1b6:	4605      	mov	r5, r0
 800e1b8:	4630      	mov	r0, r6
 800e1ba:	f7ff fa4f 	bl	800d65c <_malloc_r>
 800e1be:	b948      	cbnz	r0, 800e1d4 <__smakebuf_r+0x44>
 800e1c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1c4:	059a      	lsls	r2, r3, #22
 800e1c6:	d4ef      	bmi.n	800e1a8 <__smakebuf_r+0x18>
 800e1c8:	f023 0303 	bic.w	r3, r3, #3
 800e1cc:	f043 0302 	orr.w	r3, r3, #2
 800e1d0:	81a3      	strh	r3, [r4, #12]
 800e1d2:	e7e3      	b.n	800e19c <__smakebuf_r+0xc>
 800e1d4:	4b0d      	ldr	r3, [pc, #52]	; (800e20c <__smakebuf_r+0x7c>)
 800e1d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800e1d8:	89a3      	ldrh	r3, [r4, #12]
 800e1da:	6020      	str	r0, [r4, #0]
 800e1dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1e0:	81a3      	strh	r3, [r4, #12]
 800e1e2:	9b00      	ldr	r3, [sp, #0]
 800e1e4:	6163      	str	r3, [r4, #20]
 800e1e6:	9b01      	ldr	r3, [sp, #4]
 800e1e8:	6120      	str	r0, [r4, #16]
 800e1ea:	b15b      	cbz	r3, 800e204 <__smakebuf_r+0x74>
 800e1ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1f0:	4630      	mov	r0, r6
 800e1f2:	f000 f881 	bl	800e2f8 <_isatty_r>
 800e1f6:	b128      	cbz	r0, 800e204 <__smakebuf_r+0x74>
 800e1f8:	89a3      	ldrh	r3, [r4, #12]
 800e1fa:	f023 0303 	bic.w	r3, r3, #3
 800e1fe:	f043 0301 	orr.w	r3, r3, #1
 800e202:	81a3      	strh	r3, [r4, #12]
 800e204:	89a0      	ldrh	r0, [r4, #12]
 800e206:	4305      	orrs	r5, r0
 800e208:	81a5      	strh	r5, [r4, #12]
 800e20a:	e7cd      	b.n	800e1a8 <__smakebuf_r+0x18>
 800e20c:	0800d3a9 	.word	0x0800d3a9

0800e210 <__malloc_lock>:
 800e210:	4801      	ldr	r0, [pc, #4]	; (800e218 <__malloc_lock+0x8>)
 800e212:	f7ff b9ad 	b.w	800d570 <__retarget_lock_acquire_recursive>
 800e216:	bf00      	nop
 800e218:	2000b564 	.word	0x2000b564

0800e21c <__malloc_unlock>:
 800e21c:	4801      	ldr	r0, [pc, #4]	; (800e224 <__malloc_unlock+0x8>)
 800e21e:	f7ff b9a8 	b.w	800d572 <__retarget_lock_release_recursive>
 800e222:	bf00      	nop
 800e224:	2000b564 	.word	0x2000b564

0800e228 <_read_r>:
 800e228:	b538      	push	{r3, r4, r5, lr}
 800e22a:	4d07      	ldr	r5, [pc, #28]	; (800e248 <_read_r+0x20>)
 800e22c:	4604      	mov	r4, r0
 800e22e:	4608      	mov	r0, r1
 800e230:	4611      	mov	r1, r2
 800e232:	2200      	movs	r2, #0
 800e234:	602a      	str	r2, [r5, #0]
 800e236:	461a      	mov	r2, r3
 800e238:	f7f2 faf8 	bl	800082c <_read>
 800e23c:	1c43      	adds	r3, r0, #1
 800e23e:	d102      	bne.n	800e246 <_read_r+0x1e>
 800e240:	682b      	ldr	r3, [r5, #0]
 800e242:	b103      	cbz	r3, 800e246 <_read_r+0x1e>
 800e244:	6023      	str	r3, [r4, #0]
 800e246:	bd38      	pop	{r3, r4, r5, pc}
 800e248:	2000b560 	.word	0x2000b560

0800e24c <_raise_r>:
 800e24c:	291f      	cmp	r1, #31
 800e24e:	b538      	push	{r3, r4, r5, lr}
 800e250:	4604      	mov	r4, r0
 800e252:	460d      	mov	r5, r1
 800e254:	d904      	bls.n	800e260 <_raise_r+0x14>
 800e256:	2316      	movs	r3, #22
 800e258:	6003      	str	r3, [r0, #0]
 800e25a:	f04f 30ff 	mov.w	r0, #4294967295
 800e25e:	bd38      	pop	{r3, r4, r5, pc}
 800e260:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e262:	b112      	cbz	r2, 800e26a <_raise_r+0x1e>
 800e264:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e268:	b94b      	cbnz	r3, 800e27e <_raise_r+0x32>
 800e26a:	4620      	mov	r0, r4
 800e26c:	f000 f830 	bl	800e2d0 <_getpid_r>
 800e270:	462a      	mov	r2, r5
 800e272:	4601      	mov	r1, r0
 800e274:	4620      	mov	r0, r4
 800e276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e27a:	f000 b817 	b.w	800e2ac <_kill_r>
 800e27e:	2b01      	cmp	r3, #1
 800e280:	d00a      	beq.n	800e298 <_raise_r+0x4c>
 800e282:	1c59      	adds	r1, r3, #1
 800e284:	d103      	bne.n	800e28e <_raise_r+0x42>
 800e286:	2316      	movs	r3, #22
 800e288:	6003      	str	r3, [r0, #0]
 800e28a:	2001      	movs	r0, #1
 800e28c:	e7e7      	b.n	800e25e <_raise_r+0x12>
 800e28e:	2400      	movs	r4, #0
 800e290:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e294:	4628      	mov	r0, r5
 800e296:	4798      	blx	r3
 800e298:	2000      	movs	r0, #0
 800e29a:	e7e0      	b.n	800e25e <_raise_r+0x12>

0800e29c <raise>:
 800e29c:	4b02      	ldr	r3, [pc, #8]	; (800e2a8 <raise+0xc>)
 800e29e:	4601      	mov	r1, r0
 800e2a0:	6818      	ldr	r0, [r3, #0]
 800e2a2:	f7ff bfd3 	b.w	800e24c <_raise_r>
 800e2a6:	bf00      	nop
 800e2a8:	2000002c 	.word	0x2000002c

0800e2ac <_kill_r>:
 800e2ac:	b538      	push	{r3, r4, r5, lr}
 800e2ae:	4d07      	ldr	r5, [pc, #28]	; (800e2cc <_kill_r+0x20>)
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	4604      	mov	r4, r0
 800e2b4:	4608      	mov	r0, r1
 800e2b6:	4611      	mov	r1, r2
 800e2b8:	602b      	str	r3, [r5, #0]
 800e2ba:	f7f2 fa9b 	bl	80007f4 <_kill>
 800e2be:	1c43      	adds	r3, r0, #1
 800e2c0:	d102      	bne.n	800e2c8 <_kill_r+0x1c>
 800e2c2:	682b      	ldr	r3, [r5, #0]
 800e2c4:	b103      	cbz	r3, 800e2c8 <_kill_r+0x1c>
 800e2c6:	6023      	str	r3, [r4, #0]
 800e2c8:	bd38      	pop	{r3, r4, r5, pc}
 800e2ca:	bf00      	nop
 800e2cc:	2000b560 	.word	0x2000b560

0800e2d0 <_getpid_r>:
 800e2d0:	f7f2 ba87 	b.w	80007e2 <_getpid>

0800e2d4 <_fstat_r>:
 800e2d4:	b538      	push	{r3, r4, r5, lr}
 800e2d6:	4d07      	ldr	r5, [pc, #28]	; (800e2f4 <_fstat_r+0x20>)
 800e2d8:	2300      	movs	r3, #0
 800e2da:	4604      	mov	r4, r0
 800e2dc:	4608      	mov	r0, r1
 800e2de:	4611      	mov	r1, r2
 800e2e0:	602b      	str	r3, [r5, #0]
 800e2e2:	f7f2 fae8 	bl	80008b6 <_fstat>
 800e2e6:	1c43      	adds	r3, r0, #1
 800e2e8:	d102      	bne.n	800e2f0 <_fstat_r+0x1c>
 800e2ea:	682b      	ldr	r3, [r5, #0]
 800e2ec:	b103      	cbz	r3, 800e2f0 <_fstat_r+0x1c>
 800e2ee:	6023      	str	r3, [r4, #0]
 800e2f0:	bd38      	pop	{r3, r4, r5, pc}
 800e2f2:	bf00      	nop
 800e2f4:	2000b560 	.word	0x2000b560

0800e2f8 <_isatty_r>:
 800e2f8:	b538      	push	{r3, r4, r5, lr}
 800e2fa:	4d06      	ldr	r5, [pc, #24]	; (800e314 <_isatty_r+0x1c>)
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	4604      	mov	r4, r0
 800e300:	4608      	mov	r0, r1
 800e302:	602b      	str	r3, [r5, #0]
 800e304:	f7f2 fae7 	bl	80008d6 <_isatty>
 800e308:	1c43      	adds	r3, r0, #1
 800e30a:	d102      	bne.n	800e312 <_isatty_r+0x1a>
 800e30c:	682b      	ldr	r3, [r5, #0]
 800e30e:	b103      	cbz	r3, 800e312 <_isatty_r+0x1a>
 800e310:	6023      	str	r3, [r4, #0]
 800e312:	bd38      	pop	{r3, r4, r5, pc}
 800e314:	2000b560 	.word	0x2000b560

0800e318 <_init>:
 800e318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e31a:	bf00      	nop
 800e31c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e31e:	bc08      	pop	{r3}
 800e320:	469e      	mov	lr, r3
 800e322:	4770      	bx	lr

0800e324 <_fini>:
 800e324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e326:	bf00      	nop
 800e328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e32a:	bc08      	pop	{r3}
 800e32c:	469e      	mov	lr, r3
 800e32e:	4770      	bx	lr
